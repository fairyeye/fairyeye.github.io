{"meta":{"title":"人生当苦, 良人当归","subtitle":"","description":"我不过像你像他像那野草野花。","author":"有李说不清","url":"https://fairyeye.github.io","root":"/"},"pages":[{"title":"","date":"2023-06-05T01:28:10.943Z","updated":"2023-06-05T01:28:10.943Z","comments":true,"path":"404.html","permalink":"https://fairyeye.github.io/404.html","excerpt":"","text":""},{"title":"","date":"2023-06-05T01:28:10.943Z","updated":"2023-06-05T01:28:10.943Z","comments":true,"path":"404/404.html","permalink":"https://fairyeye.github.io/404/404.html","excerpt":"","text":""},{"title":"","date":"2023-06-05T01:28:10.959Z","updated":"2023-06-05T01:28:10.959Z","comments":true,"path":"about/index.html","permalink":"https://fairyeye.github.io/about/index.html","excerpt":"","text":"This is About."},{"title":"category","date":"2020-04-27T06:30:47.000Z","updated":"2023-06-05T01:28:10.959Z","comments":true,"path":"categories/index.html","permalink":"https://fairyeye.github.io/categories/index.html","excerpt":"","text":""},{"title":"all","date":"2020-04-27T06:26:32.000Z","updated":"2023-06-05T01:28:10.960Z","comments":true,"path":"tags/index.html","permalink":"https://fairyeye.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Obsidian","slug":"Obsidian","date":"2023-06-05T01:58:52.308Z","updated":"2023-06-05T02:15:15.545Z","comments":true,"path":"2023/06/05/Obsidian/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/Obsidian/","excerpt":"","text":"把main.js 复制到.obsidian/plugin/auto_upload_pic/中。","categories":[{"name":"软件使用","slug":"软件使用","permalink":"https://fairyeye.github.io/categories/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"}],"tags":[{"name":"软件","slug":"软件","permalink":"https://fairyeye.github.io/tags/%E8%BD%AF%E4%BB%B6/"}]},{"title":"Java Zero","slug":"项目实战","date":"2023-06-05T01:28:10.959Z","updated":"2023-06-05T01:28:10.959Z","comments":true,"path":"2023/06/05/项目实战/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/","excerpt":"","text":"启动类 1234567891011121314151617@RestController@SpringBootApplicationpublic class DoaApplication &#123; @Resource private JdbcTemplate jdbcTemplate; public static void main(String[] args) &#123; SpringApplication.run(DoaApplication.class, args); &#125; @GetMapping(&quot;/test&quot;) public List&lt;Map&lt;String, Object&gt;&gt; test() &#123; return jdbcTemplate.queryForList(&quot;select * from user&quot;); &#125;&#125; 配置 12345spring: datasource: url: jdbc:mysql://localhost:3306/doa?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;rewriteBatchedStatements=true&amp;serverTimezone=UTC username: root password: root 12345&lt;-- pom --&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;/dependency&gt; Java Zero版本1&lt;spring-boot.version&gt;2.1.18.RELEASE&lt;/spring-boot.version&gt; 开源组件123上传文件spring-file-storagehttps://spring-file-storage.xuyanwu.cn/#/","categories":[],"tags":[{"name":"dairy","slug":"dairy","permalink":"https://fairyeye.github.io/tags/dairy/"}]},{"title":"","slug":"阿里巴巴手册","date":"2023-06-05T01:28:10.959Z","updated":"2023-06-05T01:28:10.959Z","comments":true,"path":"2023/06/05/阿里巴巴手册/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E6%89%8B%E5%86%8C/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"","slug":"未整合","date":"2023-06-05T01:28:10.958Z","updated":"2023-06-05T01:28:10.958Z","comments":true,"path":"2023/06/05/未整合/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/%E6%9C%AA%E6%95%B4%E5%90%88/","excerpt":"","text":"# 先将当前仓库的文件的暂存区中剔除 git rm -r –cached . # 再添加所有的文件到暂存区，这时.gitignore文件就会生效了 git add .","categories":[],"tags":[]},{"title":"MySQL查询","slug":"模板","date":"2023-06-05T01:28:10.958Z","updated":"2023-06-05T01:28:10.958Z","comments":true,"path":"2023/06/05/模板/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/%E6%A8%A1%E6%9D%BF/","excerpt":"","text":"1. 首先要保证本地的MySQL服务支持FEDERATED引擎。12345输入：SHOW ENGINES;如下 FEDERATED 行的Support为YES则表示开启了FEDERATED。如果为 NO 则表示未开启。如果 FEDERATED 没有开启的话 要启用。 2.启用 FEDERATED123在MySQL的配置文件安装目录下的my.ini或my.cnf 加上 一行 `FEDERATED` 3.建表建表一般应的是InnoDB引擎，这里需要修改一下 改为 ENGINE=FEDERATED 从原表导出表结构SQL，然后修改 ENGINE = InnoDB-&gt;ENGINE=FEDERATED CONNECTION=&#39;mysql://用户名:密码@IP:PORT/库名/表名&#39; 然后打开这张表，可以看到远程表里的数据已经同步到了这张表。","categories":[{"name":"MySQL","slug":"MySQL","permalink":"https://fairyeye.github.io/categories/MySQL/"}],"tags":[{"name":"utils","slug":"utils","permalink":"https://fairyeye.github.io/tags/utils/"}]},{"title":"","slug":"查询不在B表里的A表数据","date":"2023-06-05T01:28:10.958Z","updated":"2023-06-05T01:28:10.958Z","comments":true,"path":"2023/06/05/查询不在B表里的A表数据/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/%E6%9F%A5%E8%AF%A2%E4%B8%8D%E5%9C%A8B%E8%A1%A8%E9%87%8C%E7%9A%84A%E8%A1%A8%E6%95%B0%E6%8D%AE/","excerpt":"","text":"","categories":[],"tags":[{"name":"utils","slug":"utils","permalink":"https://fairyeye.github.io/tags/utils/"}]},{"title":"","slug":"设计模式笔记","date":"2023-06-05T01:28:10.958Z","updated":"2023-06-05T01:28:10.959Z","comments":true,"path":"2023/06/05/设计模式笔记/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0/","excerpt":"","text":"设计模式遵循六⼤原则；单⼀职责( ⼀个类和⽅法只做⼀件事 )、⾥⽒替换( 多态，⼦类可扩展⽗类 )、依赖 倒置( 细节依赖抽象，下层依赖上层 )、接⼝隔离( 建⽴单⼀接⼝ )、迪⽶特原则( 最少知道，降低耦合 )、开闭 原则( 抽象架构，扩展实现 ）。 1. 工厂模式举个例子： 吃：南方人爱吃饭，北方人爱吃面 定义一个接口：吃 定义两个实现类继承吃：饭、面 定义一个工厂：饭店 饭店通过判断是南方人还是北方人返回不同的实现类，从而让不同的人吃到了不同的饭 2.抽象工厂模式3.建造者模式实体类的setXxx()方法，一般是返回void，可以改造为： 1234public ObjectX setXxx(String xx) &#123; this.xxx = xx return this;&#125; 4. 原型模式考卷题目和答案乱序。","categories":[],"tags":[]},{"title":"淘汰策略","slug":"淘汰策略","date":"2023-06-05T01:28:10.958Z","updated":"2023-06-05T01:28:10.958Z","comments":true,"path":"2023/06/05/淘汰策略/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5/","excerpt":"","text":"12345常见的策略有三种：- FIFO：先进先出策略 - LFU：最少使用策略- LRU：最近最少使用策略","categories":[],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://fairyeye.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"","slug":"搭建SSR服务器","date":"2023-06-05T01:28:10.957Z","updated":"2023-06-05T01:28:10.957Z","comments":true,"path":"2023/06/05/搭建SSR服务器/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/%E6%90%AD%E5%BB%BASSR%E6%9C%8D%E5%8A%A1%E5%99%A8/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435apt install git 报错：Temporary failure resolving &#x27;archive.ubuntu.com具体如下：Ign:1 http://archive.ubuntu.com/ubuntu xenial/main i386 liberror-perl all 0.17-1.2Ign:2 http://archive.ubuntu.com/ubuntu xenial/main i386 git-man all 1:2.7.4-0ubuntu1Err:3 http://archive.ubuntu.com/ubuntu xenial/main amd64 git amd64 1:2.7.4-0ubuntu1 Temporary failure resolving &#x27;archive.ubuntu.com&#x27;Err:1 http://archive.ubuntu.com/ubuntu xenial/main i386 liberror-perl all 0.17-1.2 Temporary failure resolving &#x27;archive.ubuntu.com&#x27;Err:2 http://archive.ubuntu.com/ubuntu xenial/main i386 git-man all 1:2.7.4-0ubuntu1 Temporary failure resolving &#x27;archive.ubuntu.com&#x27;E: Failed to fetch http://archive.ubuntu.com/ubuntu/pool/main/libe/liberror-perl/liberror-perl_0.17-1.2_all.deb Temporary failure resolving &#x27;archive.ubuntu.com&#x27;E: Failed to fetch http://archive.ubuntu.com/ubuntu/pool/main/g/git/git-man_2.7.4-0ubuntu1_all.deb Temporary failure resolving &#x27;archive.ubuntu.com&#x27;E: Failed to fetch http://archive.ubuntu.com/ubuntu/pool/main/g/git/git_2.7.4-0ubuntu1_amd64.deb Temporary failure resolving &#x27;archive.ubuntu.com&#x27;E: Unable to fetch some archives, maybe run apt-get update or try with --fix-missing?root@132157:~# apt-get updateErr:1 http://security.ubuntu.com/ubuntu xenial-security InRelease Temporary failure resolving &#x27;security.ubuntu.com&#x27;Err:2 http://archive.ubuntu.com/ubuntu xenial InRelease Temporary failure resolving &#x27;archive.ubuntu.com&#x27;Err:3 http://archive.ubuntu.com/ubuntu xenial-updates InRelease Temporary failure resolving &#x27;archive.ubuntu.com&#x27;Err:4 http://archive.ubuntu.com/ubuntu xenial-backports InRelease Temporary failure resolving &#x27;archive.ubuntu.com&#x27;Reading package lists... DoneW: Failed to fetch http://archive.ubuntu.com/ubuntu/dists/xenial/InRelease Temporary failure resolving &#x27;archive.ubuntu.com&#x27;W: Failed to fetch http://archive.ubuntu.com/ubuntu/dists/xenial-updates/InRelease Temporary failure resolving &#x27;archive.ubuntu.com&#x27;W: Failed to fetch http://archive.ubuntu.com/ubuntu/dists/xenial-backports/InRelease Temporary failure resolving &#x27;archive.ubuntu.com&#x27;W: Failed to fetch http://security.ubuntu.com/ubuntu/dists/xenial-security/InRelease Temporary failure resolving &#x27;security.ubuntu.com&#x27;W: Some index files failed to download. They have been ignored, or old ones used instead. 原因是DNS未配置 1234sudo vi /etc/resolv.conf+ nameserver 202.96.134.133+ nameserver 8.8.8.8","categories":[],"tags":[]},{"title":"","slug":"数据库锁","date":"2023-06-05T01:28:10.957Z","updated":"2023-06-05T01:28:10.957Z","comments":true,"path":"2023/06/05/数据库锁/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%94%81/","excerpt":"","text":"https://blog.csdn.net/Tastill/article/details/88060539 pdf https://www.cnblogs.com/duoduo-727/p/9367175.html CASE mmla.ATTR_VALUE WHEN ‘Y’ THEN ‘BONDED’ ELSE ‘’END 1234desc information_schema.innodb_locks;SHOW PROCESSLIST;show OPEN TABLES where In_use &gt; 0;select * from information_schema.innodb_trx;","categories":[],"tags":[]},{"title":"Java8 LocalDate","slug":"日期处理","date":"2023-06-05T01:28:10.957Z","updated":"2023-06-05T01:28:10.957Z","comments":true,"path":"2023/06/05/日期处理/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/%E6%97%A5%E6%9C%9F%E5%A4%84%E7%90%86/","excerpt":"","text":"1234567891011121314151617LocalDate localDate = LocalDate.now(); LocalTime localTime = LocalTime.now(); LocalDateTime localDateTime = LocalDateTime.now(); System.out.println(localDate); // 2020-10-09 System.out.println(localTime); // 18:29:47.712227100 System.out.println(localDateTime); // 2020-10-09T18:29:47.712227100 // 去掉毫秒 System.out.println(localTime.withNano(0)); // 18:29:47 System.out.println(localDateTime.withNano(0)); // 2020-10-09T18:29:47 System.out.println(localTime.truncatedTo(ChronoUnit.SECONDS)); // 18:29:47 System.out.println(localDateTime.truncatedTo(ChronoUnit.SECONDS)); // 2020-10-09T18:29:47 // 获取加减一天的日期 System.out.println(localDateTime.plusDays(1L)); // 2020-10-10T18:33:47.376192400 System.out.println(localDateTime.plusDays(-1L)); // 2020-10-08T18:33:47.376192400 参考API","categories":[],"tags":[{"name":"utils","slug":"utils","permalink":"https://fairyeye.github.io/tags/utils/"}]},{"title":"","slug":"有序字符串","date":"2023-06-05T01:28:10.957Z","updated":"2023-06-05T01:28:10.957Z","comments":true,"path":"2023/06/05/有序字符串/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/%E6%9C%89%E5%BA%8F%E5%AD%97%E7%AC%A6%E4%B8%B2/","excerpt":"","text":"0001-0099&#x2F;字符串有序 1234NumberFormat f=new DecimalFormat(&quot;00000&quot;);for(int i=1;i&lt;10000;i++)&#123;System.out.println(f.format(i));&#125; ER-00001 下一个为ER-00002一直到ER-99999 12345String m = &quot;ER-&quot;;for (int i = 0; i &lt; 2; i++) &#123; String format = String.format(&quot;%05d&quot;, i); System.out.println(m+format);&#125;","categories":[],"tags":[]},{"title":"","slug":"前端学习","date":"2023-06-05T01:28:10.956Z","updated":"2023-06-05T01:28:10.956Z","comments":true,"path":"2023/06/05/前端学习/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"1234使用 yarn 创建 Umi 脚手架，执行以下命令$ mkdir li &amp;&amp; cd li$ yarn create umi$ yarn 123456failed (13: Permission denied)# vim nginx.conf - user www-data; + user root;","categories":[],"tags":[]},{"title":"查询优化","slug":"分页查询","date":"2023-06-05T01:28:10.956Z","updated":"2023-06-05T01:28:10.956Z","comments":true,"path":"2023/06/05/分页查询/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/","excerpt":"","text":"MySQL 并不是跳过 offset 行，而是取 offset+N 行，然后返回放弃前 offset 行，返回 N 行。 123456789# 反例（耗时129.570s）select * from task_result LIMIT 20000000, 10;# 正例（耗时5.114s）SELECT a.* FROM task_result a, (select id from task_result LIMIT 20000000, 10) b where a.id = b.id;# 说明task_result表为生产环境的一个表，总数据量为3400万，id为主键，偏移量达到2000万 获取一条数据时的Limit 1在很多情况下我们已知数据仅存在一条，此时我们应该告知数据库只用查一条，否则将会转化为全表扫描 123456789# 反例（耗时2424.612s）select * from task_result where unique_key = &#x27;ebbf420b65d95573db7669f21fa3be3e_861414030800727_48&#x27;;# 正例（耗时1.036s）select * from task_result where unique_key = &#x27;ebbf420b65d95573db7669f21fa3be3e_861414030800727_48&#x27; LIMIT 1;# 说明task_result表为生产环境的一个表，总数据量为3400万，where条件非索引字段，数据所在行为第19486条记录 批量插入1234567891011# 反例INSERT into person(name,age) values(&#x27;A&#x27;,24)INSERT into person(name,age) values(&#x27;B&#x27;,24)INSERT into person(name,age) values(&#x27;C&#x27;,24)# 正例INSERT into person(name,age) values(&#x27;A&#x27;,24),(&#x27;B&#x27;,24),(&#x27;C&#x27;,24);# 说明比较常规，就不多做说明了 https://juejin.im/post/5ea16dede51d45470b4ffc5b?utm_source=gold_browser_extension","categories":[{"name":"mysql","slug":"mysql","permalink":"https://fairyeye.github.io/categories/mysql/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://fairyeye.github.io/tags/mysql/"}]},{"title":"CAS","slug":"单例模式 - 副本","date":"2023-06-05T01:28:10.956Z","updated":"2023-06-05T01:28:10.956Z","comments":true,"path":"2023/06/05/单例模式 - 副本/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%20-%20%E5%89%AF%E6%9C%AC/","excerpt":"","text":"https://www.processon.com/view/link/5f6891517d9c087da1ba5bbe","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://fairyeye.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"demo","slug":"demo","permalink":"https://fairyeye.github.io/tags/demo/"}]},{"title":"单例模式","slug":"单例模式","date":"2023-06-05T01:28:10.956Z","updated":"2023-06-05T01:28:10.956Z","comments":true,"path":"2023/06/05/单例模式/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/","excerpt":"","text":"1. 最简单的单例模式：123456789101112131415161718192021222324252627282930package com.example.demo.JUC.thread;/** * @author huapeng.zhang * @version 1.0 * @date 2020/9/17 18:28 */public class SingletomDemo &#123; private static SingletomDemo singletomDemo = null; private SingletomDemo() &#123; System.out.println(Thread.currentThread().getName() + &quot;\\t 我是构造方法SingletomDemo()！&quot;); &#125; public static SingletomDemo getInstance() &#123; if (singletomDemo == null) &#123; singletomDemo = new SingletomDemo(); &#125; return singletomDemo; &#125; public static void main(String[] args) &#123; // 单线程 System.out.println(SingletomDemo.getInstance() == SingletomDemo.getInstance()); System.out.println(SingletomDemo.getInstance() == SingletomDemo.getInstance()); System.out.println(SingletomDemo.getInstance() == SingletomDemo.getInstance()); &#125;&#125; 在单线程的情况下，打印结果如下： 可以看到，虽然我们一共调用了六次getInstance()， 但是只打印了一次构造方法输出内容，也就是只调用了一个构造函数，所获得的对象地址自然是一样的。 2. 多线程下的单例模式我们对main()方法做一下改造，改造后的代码如下： 12345678public static void main(String[] args) &#123; // 改为多线程后 可能多次调用构造函数 for (int i = 0; i &lt; 10; i++) &#123; new Thread(() -&gt; &#123; SingletomDemo.getInstance(); &#125;, String.valueOf(i)).start(); &#125;&#125; 打印结果为： 多次执行下可以看到打印的次数是不同的。 可以对getInstance()方法添加synchronized加锁，保证只生成一个实例。 123456private static synchronized SingletomDemo getInstance() &#123; if (singletomDemo == null) &#123; singletomDemo = new SingletomDemo(); &#125; return singletomDemo;&#125; 再次执行程序发现只打印了一次构造方法输出函数，还有另外一种方法就是DCL：double check locks双端检测模式模式也可以达到同样的目的。 3.DCL + 单例模式我们再次对getInstance()方法进行改造，代码如下： 1234567891011// DCL模式(double check locks双端检测模式)private static SingletomDemo getInstance() &#123; if (singletomDemo == null) &#123; synchronized (SingletomDemo.class) &#123; if (singletomDemo == null) &#123; singletomDemo = new SingletomDemo(); &#125; &#125; &#125; return singletomDemo;&#125; 当我们的单例模式写到这种程度的时候，基本可以应对99%的情况，但是由于指令排序的存在，还是有可能会出现问题。 123memory = allocate(); //1.分配对象内存空间instance(memory); //2.初始化对象instance = memory; //3.设置instance指向刚分配的内存地址，此时instance!=null 步骤2、3不存在数据依赖，所以由于指令重排的关系，可能会出现： 123memory = allocate(); //1.分配对象内存空间instance = memory; //3.设置instance指向刚分配的内存地址，此时instance!=nullinstance(memory); //2.初始化对象 4.Volatile + 单例模式我们在声明 singletomDemo时，加上Volatile关键字修饰，就可以达到完美的效果。 最终代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344package com.example.demo.JUC.thread;/** * @author huapeng.zhang * @version 1.0 * @date 2020/9/17 18:28 */public class SingletomDemo &#123; private static volatile SingletomDemo singletomDemo = null; private SingletomDemo() &#123; System.out.println(Thread.currentThread().getName() + &quot;\\t 我是构造方法SingletomDemo()！&quot;); &#125; // DCL模式(double check locks双端检测模式) private static SingletomDemo getInstance() &#123; if (singletomDemo == null) &#123; synchronized (SingletomDemo.class) &#123; if (singletomDemo == null) &#123; singletomDemo = new SingletomDemo(); &#125; &#125; &#125; return singletomDemo; &#125; public static void main(String[] args) &#123; // 单线程// System.out.println(SingletomDemo.getInstance() == SingletomDemo.getInstance());// System.out.println(SingletomDemo.getInstance() == SingletomDemo.getInstance());// System.out.println(SingletomDemo.getInstance() == SingletomDemo.getInstance());// 改为多线程后 可能多次调用构造函数// 可以在 getInstance上加SYNC解决问题 for (int i = 0; i &lt; 10; i++) &#123; new Thread(() -&gt; &#123; SingletomDemo.getInstance(); &#125;, String.valueOf(i)).start(); &#125; &#125;&#125;","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://fairyeye.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"demo","slug":"demo","permalink":"https://fairyeye.github.io/tags/demo/"}]},{"title":"反射","slug":"反射获取父类字段","date":"2023-06-05T01:28:10.956Z","updated":"2023-06-05T01:28:10.956Z","comments":true,"path":"2023/06/05/反射获取父类字段/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/%E5%8F%8D%E5%B0%84%E8%8E%B7%E5%8F%96%E7%88%B6%E7%B1%BB%E5%AD%97%E6%AE%B5/","excerpt":"","text":"1234Class&lt;?&gt; superclass = itfBaseBO.getClass();while (!superclass.getName().equals(ExpandDomain.class.getName())) &#123; superclass = superclass.getSuperclass();&#125;","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://fairyeye.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"demo","slug":"demo","permalink":"https://fairyeye.github.io/tags/demo/"}]},{"title":"","slug":"同步不同服务的MySQL数据表","date":"2023-06-05T01:28:10.956Z","updated":"2023-06-05T01:28:10.956Z","comments":true,"path":"2023/06/05/同步不同服务的MySQL数据表/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/%E5%90%8C%E6%AD%A5%E4%B8%8D%E5%90%8C%E6%9C%8D%E5%8A%A1%E7%9A%84MySQL%E6%95%B0%E6%8D%AE%E8%A1%A8/","excerpt":"","text":"1.查询数据库是否启用 FEDERATED引擎1SHOW ENGINES; 如果Support 为NO需要改为YES ，只需要修改自己的数据库，目标数据库无需修改。 2.建立数据库自建表引擎一般为InnoDB，建立远程数据表示需要修改为FEDERATED 建立与目标 表一样的表结构 替换引擎为FEDERATED 1ENGINE=FEDERATED CONNECTION=&#x27;mysql://#&#123;userName&#125;:#&#123;passwd&#125;@#&#123;IP&#125;:#&#123;PORT&#125;/#&#123;数据库&#125;/#&#123;表&#125;&#x27;","categories":[],"tags":[]},{"title":"","slug":"挖坑","date":"2023-06-05T01:28:10.956Z","updated":"2023-06-05T01:28:10.956Z","comments":true,"path":"2023/06/05/挖坑/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/%E6%8C%96%E5%9D%91/","excerpt":"","text":"@interface","categories":[],"tags":[]},{"title":"Transactional注解","slug":"事务问题","date":"2023-06-05T01:28:10.955Z","updated":"2023-06-05T01:28:10.955Z","comments":true,"path":"2023/06/05/事务问题/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/%E4%BA%8B%E5%8A%A1%E9%97%AE%E9%A2%98/","excerpt":"","text":"方法A中调用B后再调用C,三个方法中均有插入数据后再查询数据 B方法的注解：@Transactional(propagation&#x3D;Propagation.REQUIRES_NEW) –不管是否存在事务,都创建一个新的事务,原来的挂起,新的执行完毕,继续执行老的事务 C方法的注解：@Transactional(propagation&#x3D;Propagation.REQUIRED) –如果有事务,那么加入事务,没有的话新建一个 1、当方法B或者C报错时，A、B、C方法都回滚 2、当方法A、B、C异常被捕获时，A、B、C事务不回滚（a、b、c均入库） 3、当方法BC执行后，方法A报错时，A、C事务回滚，B事务不回滚（b数据入库） A方法向表中添加数据a，在查询该表能得到数据a B方法向表中添加数据b，再查询该表能得到数据b C方法向表中添加数据c，再查询该表能得到数据a，b，c 带有注解@Transactional(propagation&#x3D;Propagation.REQUIRES_NEW)的方法走完之后，数据就会被提交入库 另外需要注意方法内部调用@Transactional(propagation&#x3D;Propagation.REQUIRES_NEW)注解不生效，比如A和B都在同一个方法中，A调用B，B方法是此注解，则不生效。同样，AOP拦截也拦截不到B 12345678910111213141516171819public enum Propagation &#123; REQUIRED(0), SUPPORTS(1), MANDATORY(2), REQUIRES_NEW(3), NOT_SUPPORTED(4), NEVER(5), NESTED(6); private final int value; private Propagation(int value) &#123; this.value = value; &#125; public int value() &#123; return this.value; &#125;&#125; 七种事物传播类型 默认为：REQUIRED","categories":[{"name":"数据库","slug":"数据库","permalink":"https://fairyeye.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[]},{"title":"","slug":"使用教程","date":"2023-06-05T01:28:10.955Z","updated":"2023-06-05T01:28:10.955Z","comments":true,"path":"2023/06/05/使用教程/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/","excerpt":"","text":"系统1. 登录：2. 注册：3. 更改密码：","categories":[],"tags":[]},{"title":"","slug":"Work","date":"2023-06-05T01:28:10.954Z","updated":"2023-06-05T01:28:10.954Z","comments":true,"path":"2023/06/05/Work/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/Work/","excerpt":"","text":"Date：2020-12-20 22:12:30 Intellij IDEA Live Templete![image-20201220221405385](&#x2F;Users&#x2F;li&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20201220221405385.png) Preferences&#x2F;Editor&#x2F;Live Templates -&gt; Java 123Abbreviation: 输入代码即可快速打印代码。比如常用的sout-&gt;System.out.print();Description: 描述。Template text: 模板内容。 实际上是通过XML 实现，右键copy粘贴之后可以看到。 123456&lt;template name=&quot;lo&quot; value=&quot;private static final Logger LOGGER = LoggerFactory.getLogger($Class$.class);&quot; description=&quot;Generate Logger Slf4j&quot; toReformat=&quot;false&quot; toShortenFQNames=&quot;true&quot;&gt; &lt;variable name=&quot;Class&quot; expression=&quot;className()&quot; defaultValue=&quot;String&quot; alwaysStopAt=&quot;true&quot; /&gt; &lt;context&gt; &lt;option name=&quot;JAVA_CODE&quot; value=&quot;true&quot; /&gt; &lt;/context&gt;&lt;/template&gt; Date:2020-12-19 10:20:18 数据分发，HZERO每个业务节点连接各自数据库 Date : 2020-12-09 19:29:18 1234src/main/resourcesbanner.txt自定义banner生成banner网站：network-science.de/ascii/ 12Optional 抛异常Optional.ofNullable(object&lt;T&gt; ).orElseThrow(() -&gt; new Exception()); 12345678&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt;&lt;/dependency&gt;","categories":[],"tags":[]},{"title":"fastJson使用","slug":"fastJson","date":"2023-06-05T01:28:10.954Z","updated":"2023-06-05T01:28:10.954Z","comments":true,"path":"2023/06/05/fastJson/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/fastJson/","excerpt":"","text":"syntax error, expect &#123;, actual [, pos 0, fastjson-version 1.2.50 12345// 转换一个map对象List&lt;Map&lt;String, Object&gt;&gt; maps = jdbcTemplate.queryForList(&quot;select * from user&quot;); maps.forEach(stringObjectMap -&gt; &#123; User user = JSON.parseObject(JSON.toJSONString(stringObjectMap), User.class); &#125;);","categories":[],"tags":[{"name":"utils","slug":"utils","permalink":"https://fairyeye.github.io/tags/utils/"}]},{"title":"","slug":"Springboot返回html","date":"2023-06-05T01:28:10.953Z","updated":"2023-06-05T01:28:10.953Z","comments":true,"path":"2023/06/05/Springboot返回html/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/Springboot%E8%BF%94%E5%9B%9Ehtml/","excerpt":"","text":"Springboot返回html2019-04-15阅读 1.4K0 注：Springboot的版本2.1.3.RELEASE List-1 application.properties文件 1234567server.port=8080#url中，项目的前缀server.servlet.context-path=/projectspring.mvc.view.prefix=/spring.mvc.view.suffix=.html 整体结构如下图1所示，html要放在static下，不是templates下 图１ List-2 HelloController的内容如下 1234567891011121314import lombok.extern.slf4j.Slf4j;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;@Slf4j@Controllerpublic class HelloController &#123; @RequestMapping(value = &quot;/hello&quot;) public String index() &#123; log.info(&quot;收到请求&quot;); return &quot;html/hello&quot;; &#125;&#125; List-3 启动springboot，之后在浏览器中输入 12345#返回index.html的内容http://localhost:8080/project/#返回hello.html的内容http://localhost:8080/project/hello 网上很多关于模板的（Thymeleaf 、FreeMarker 等），但是我不需要，我只需要纯的html。 index.html是springboot的默认welcome page。 Reference https://www.jianshu.com/p/eb4c0fc2dfc4 https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-spring-mvc-static-content https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-spring-mvc-welcome-page ​ (adsbygoogle &#x3D; window.adsbygoogle || []).push({});","categories":[],"tags":[]},{"title":"","slug":"StringToInteger","date":"2023-06-05T01:28:10.953Z","updated":"2023-06-05T01:28:10.953Z","comments":true,"path":"2023/06/05/StringToInteger/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/StringToInteger/","excerpt":"","text":"页面标题 body { background-image: url(\"../640.png\"); } String 转 Integer1.Integer的parseInt方法12345String string = &quot;123&quot;;int value = Integer.parseInt(string);System.out.println(&quot;stringToInt----------&gt;&quot;+value);结果：StringToInt----------&gt;123 2.Integer的valueOf方法12345String string = &quot;123&quot;;Integer value = Integer.valueOf(string);System.out.println(&quot;stringToInt1----------&gt;&quot;+value);结果：StringToInt1----------&gt;123 以上两种方法都是可行的。 但是会有特殊的情况，比如： 1234567891011String string = &quot;abc&quot;;int value = Integer.parseInt(string);System.out.println(&quot;stringToInt----------&gt;&quot;+value);结果：Exception in thread &quot;main&quot; java.lang.NumberFormatException: For input string: &quot;abc&quot; at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) at java.lang.Integer.parseInt(Integer.java:580) at java.lang.Integer.parseInt(Integer.java:615) at com.hand.todo.infra.util.StringToInt.stringToInt(StringToInt.java:16) at com.hand.todo.infra.util.StringToInt.main(StringToInt.java:10) 使用stringToInt1()也会返回同样的错误。 123public static Integer valueOf(String s) throws NumberFormatException &#123; return Integer.valueOf(parseInt(s, 10));&#125; valueOf()调用了parseInt()，所以返回同样的错误是正常的。 按照正常的逻辑来说，我们需要对这个错误进行处理，比如： 1234567891011121314151617String string = &quot;abc&quot;;int value = 0;try &#123; value = Integer.parseInt(string);&#125; catch (NumberFormatException e) &#123; e.printStackTrace();&#125;System.out.println(&quot;StringToInt----------&gt;&quot;+value);结果：java.lang.NumberFormatException: For input string: &quot;abc&quot; at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) at java.lang.Integer.parseInt(Integer.java:580) at java.lang.Integer.parseInt(Integer.java:615) at com.hand.todo.infra.util.StringToInt.stringToInt(StringToInt.java:18) at com.hand.todo.infra.util.StringToInt.main(StringToInt.java:10)StringToInt----------&gt;0 可以看到，虽然依然报错，但是程序还是继续执行了。 然后回到主题。 3.Guava 的 Ints 结合 Java8 的 Optional1234567String string = &quot;abc&quot;;Integer value = Optional.ofNullable(string) .map(Ints::tryParse) .orElse(0); System.out.println(&quot;StringToInt2----------&gt;&quot; + value); 结果：StringToInt2----------&gt;0 可以在转换失败的时候为他设置默认值： 1234567String string = &quot;abc&quot;;Integer value = Optional.ofNullable(string) .map(Ints::tryParse) .orElse(100); System.out.println(&quot;StringToInt2----------&gt;&quot; + value); 结果：StringToInt2----------&gt;100 写在末尾：之所以写这么详细是因为最开始的时候我很菜，看别人写的文档都很简单，虽然可以解决问题，但是却不解其意，所以写的啰嗦一点，对新手比较友好。 ​","categories":[],"tags":[]},{"title":"Ubuntu","slug":"Ubuntu","date":"2023-06-05T01:28:10.953Z","updated":"2023-06-05T01:28:10.953Z","comments":true,"path":"2023/06/05/Ubuntu/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/Ubuntu/","excerpt":"","text":"NETDATA1. 安装编译环境1sudo apt install zlib1g-dev gcc make git autoconf autogen automake pkg-config uuid-dev 2. 克隆项目1git clone https://github.com/firehol/netdata.git --depth=1 3. 安装netdata123456https://www.cnblogs.com/beile/p/12875395.html官方：https://learn.netdata.cloud/docs/agent/packaging/installer/methods/offline./netdata-installer.sh 然后访问 IP:19999 NGINX1. 安装Nginx12sudo suapt-get install nginx 浏览器地址栏输入 IP看到如下页面表示已经安装好了Nginx，如果有域名，输入域名也是同样的效果（前提是已经给域名添加了解析） 2.Nginx 转发端口我已经在服务器上安装了netdata服务，端口为19999,但是通过Nginx访问服务器时默认是80端口，所以需要做一些配置，在我们输入域名的时候访问不同的端口。 123456789101112131415161718192021# nginx.conf里包含 include /etc/nginx/conf.d/*.conf; 所以可以在/etc/nginx/conf.d 文件夹下新增一个配置文件server &#123; listen 80; server_name IP; location / &#123; client_max_body_size 3000m; proxy_next_upstream http_502 http_504 error timeout invalid_header; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Real-PORT $remote_port; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://127.0.0.1:19999; proxy_redirect default; proxy_connect_timeout 3000; &#125;&#125; 这样 当我们在浏览器地址栏输入 域名时 就会自动跳转到netdata的主页 3. 反向代理+负载均衡 &#x3D;&gt;12345678910111213141516171819202122# 实际服务upstream web_servers &#123; server 192.168.139.128:9001; server 192.168.139.128:9002;&#125;server &#123; # 代理端口 listen 10086; server_name 192.168.139.128; location / &#123; proxy_pass http://web_servers; proxy_set_header Host $host:$server_port; &#125;&#125;# 可以部署两个服务 9001、9002 发布时，等上一个成功发布后，启动第二个。# 未验证# 加上systemclt管理Java服务# 负载均衡的方式：https://mp.weixin.qq.com/s/yJyEwPkLD0V9G0451gbZYg# 1.轮询；2.权重；3.ip_hash；4.fair；5.url_hash 时区- https://blog.csdn.net/weixin_44109450/article/details/124259338 - Githubsudo vim /etc/hosts 140.82.112.4 github.com 199.232.69.194 github.global.ssl.fastly.net 内网穿透121. https://doc.natfrp.com/#/frpc/service/systemd2. 青龙12# 进入青龙容器docker exec -it qinglong bash 使用systemctl管理服务12345678https://www.jianshu.com/p/2deb0b79cb10# 路径/etc/systemd/system# 日志journalctl -u 服务名 Arthas123456789101112131415161718192021https://arthas.aliyun.com/doc/quick-start.html#_2-%E5%90%AF%E5%8A%A8-arthas[arthas@588425]$ watch net.lab1024.smartadmin.module.business.project.service.ProjectBaiscService queryProjects returnObjPress Q or Ctrl+C to abort.Affect(class count: 2 , method count: 2) cost in 170 ms, listenerId: 1method=net.lab1024.smartadmin.module.business.project.service.ProjectBaiscService.queryProjects location=AtExitts=2022-11-28 20:11:49; [cost=37.212667ms] result=@ResponseDTO[ code=@Integer[1], msg=@String[操作成功!], success=@Boolean[true], data=@ArrayList[isEmpty=false;size=13],]method=net.lab1024.smartadmin.module.business.project.service.ProjectBaiscService$$EnhancerBySpringCGLIB$$2f00139f.queryProjects location=AtExitts=2022-11-28 20:11:49; [cost=94.21994ms] result=@ResponseDTO[ code=@Integer[1], msg=@String[操作成功!], success=@Boolean[true], data=@ArrayList[isEmpty=false;size=13],] Prometheus123456789101112131415161718192021222324# prometheuswget https://github.com/prometheus/prometheus/releases/download/v2.40.4/prometheus-2.40.4.linux-amd64.tar.gztar -zxvf prometheus-2.40.4.linux-amd64.tar.gzsudo mv prometheus-2.40.4.linux-amd64 /usr/local/prometheusvim /usr/lib/systemd/system/prometheus.service[Unit]Description=prometheusAfter=network.target [Service]User=prometheusGroup=prometheusWorkingDirectory=/usr/local/prometheusExecStart=/usr/local/prometheus/prometheus[Install]WantedBy=multi-user.target# 启动并开启自启systemctl daemon-reloadsystemctl enable --now prometheus","categories":[],"tags":[{"name":"系统集成","slug":"系统集成","permalink":"https://fairyeye.github.io/tags/%E7%B3%BB%E7%BB%9F%E9%9B%86%E6%88%90/"}]},{"title":"","slug":"Untitled","date":"2023-06-05T01:28:10.953Z","updated":"2023-06-05T01:28:10.953Z","comments":true,"path":"2023/06/05/Untitled/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/Untitled/","excerpt":"","text":"12Jmeter 轻量级LoaderRunner 重量级","categories":[],"tags":[]},{"title":"","slug":"VPS相关","date":"2023-06-05T01:28:10.953Z","updated":"2023-06-05T01:28:10.953Z","comments":true,"path":"2023/06/05/VPS相关/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/VPS%E7%9B%B8%E5%85%B3/","excerpt":"","text":"12345root 8841 1 0 01:49 ? 00:00:00 /usr/bin/python /usr/local/bin/ssserver -c /etc/shadowsocks-python/config.json -d start// 创建软连接root@139141:/usr/local/bin# ln /etc/init.d/shadowsocks-python /usr/bin/","categories":[],"tags":[]},{"title":"","slug":"WHEN YOU HAVE A NEW PC","date":"2023-06-05T01:28:10.953Z","updated":"2023-06-05T03:21:23.936Z","comments":true,"path":"2023/06/05/WHEN YOU HAVE A NEW PC/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/WHEN%20YOU%20HAVE%20A%20NEW%20PC/","excerpt":"","text":"WHEN YOU HAVE A NEW PCJava环境配置1. 安装​ 提前新建两个文件夹，jdk，jre，默认路径也可以 ​ 安装jdk-8u111-windows-x64.exe ​ 设置jdk、jre的路径 2. 配置环境变量​ 右键此电脑 -&gt; 属性 -&gt; 高级系统设置 -&gt; 环境变量 -&gt; 系统变量(S) ​ 只有系统变量才是全局的。 123456新建 CLASSPATH .;新建 JAVA_HOME jdk路径修改 path 添加 %JAVA_HOME%\\bin;测试 java -version javac -version Maven环境配置 解压apache-maven-3.3.9.rar 到指定的目录。 修改配置文件（压缩包已修改过）。 GIT 工具1. 全局配置用户信息12git config --global user.name &quot;fairy&quot;git config --global user.email &quot;fairy@gmail.com&quot; 2. 生成key1ssh-keygen -t rsa -C &#x27;email&#x27; // Email可选，会在key中生成你的邮箱信息 一直回车就行 ​ 生成的key文件 C:\\Users\\你的用户名\\.ssh\\id_rsa.pub ​ 用文本编辑器打开，复制到GIT上。 3. 上传项目到GIT123456cd 项目文件加夹git initgit remote add origin git@github.com:fairyeye/StudyJava.gitgit add .git commit -m &quot;Initial commit&quot;git push -u origin master MySQL 安装安装https://www.runoob.com/mysql/mysql-install.html 修改初始密码 MySQL版本5.7.6版本以前用户可以使用如下命令： 1mysql&gt; SET PASSWORD = PASSWORD(&#x27;your pwd&#x27;); MySQL版本5.7.6版本开始的用户可以使用如下命令： 1mysql&gt; ALTER USER USER() IDENTIFIED BY &#x27;your pwd&#x27;; 登录报错 https://www.cnblogs.com/lifan1998/p/9177731.html 去图标​ 管理员运行 去图标.bat 文件。 谷歌访问助手​ 谷歌浏览器 -&gt; 更多工具 -&gt; 扩展程序 -&gt; 开发者模式(打开) 。 ​ 拖动 谷歌访问助手.crx 到谷歌浏览器中。 软件安装清单 IDEA： Chrome： uTools： Typora： Another Redis Desktop Manager：很好看的Redis客户端 XShell：好看 好用 tabby-terminal：https://github.com/Eugeny/tabby/releases/tag/v1.0.164 Shadowsocks：小飞机 Windows Termial:Windows终端 nvm: Windows切换node版本 n：Mac切换node版本 pyenv：切换python版本 Invoke-WebRequest -UseBasicParsing -Uri “https://raw.githubusercontent.com/pyenv-win/pyenv-win/master/pyenv-win/install-pyenv-win.ps1“ -OutFile “.&#x2F;install-pyenv-win.ps1”; &amp;”.&#x2F;install-pyenv-win.ps1” 电脑使用软件","categories":[],"tags":[]},{"title":"","slug":"MySQL","date":"2023-06-05T01:28:10.951Z","updated":"2023-06-05T01:28:10.951Z","comments":true,"path":"2023/06/05/MySQL/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/MySQL/","excerpt":"","text":"123456789101112SELECT swid.OPERATION, swid.DELIVERY_METHOD, GROUP_CONCAT( DISTINCT( swid.WORK_ORDER_ID ) ) WORK_ORDER_ID FROM SSME_WO_ISSUE_DETAIL swid WHERE swid.TENANT_ID = 4 AND swid.WORK_ORDER_ID IN ( &#x27;42717.1&#x27;,&#x27;42719.1&#x27; ) GROUP BY swid.OPERATION, swid.DELIVERY_METHOD https://www.cnblogs.com/minqiliang/p/16577102.html https://blog.csdn.net/z15711187787/article/details/124986309 https://blog.csdn.net/weixin_45994575/article/details/123071909?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-123071909-blog-123821186.t0_edu_mix&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-123071909-blog-123821186.t0_edu_mix&amp;utm_relevant_index=1 部署记录","categories":[],"tags":[]},{"title":"","slug":"MySQL数据删除恢复","date":"2023-06-05T01:28:10.951Z","updated":"2023-06-05T01:28:10.951Z","comments":true,"path":"2023/06/05/MySQL数据删除恢复/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/MySQL%E6%95%B0%E6%8D%AE%E5%88%A0%E9%99%A4%E6%81%A2%E5%A4%8D/","excerpt":"","text":"123456# 数据库中运行# 判断binlog是否开启show variables like &#x27;%log_bin%&#x27;;# 找到数据库data位置show variables like &#x27;datadir&#x27;; data目录下数据 找到当天的binlog 12# 转换为SQL 只转换操作时间内的数据即可root@VM-4-10-ubuntu:/var/lib/mysql# mysqlbinlog --base64-output=decode-rows -v --database=smart-admin-dev --start-datetime=&quot;2022-11-28 10:50:00&quot; --stop-datetime=&quot;2022-11-28 11:00:00&quot; binlog.000018 &gt; 000018.sql 000018.sql 12# 将SQL转换为insert语句root@VM-4-10-ubuntu:/var/lib/mysql# cat 000018.sql | sed -n &#x27;/###/p&#x27; | sed &#x27;s/### //g;s/\\/\\*.*/,/g;s/DELETE FROM/;INSERT INTO/g;s/WHERE/SELECT/g;&#x27; |sed -r &#x27;s/(@17.*),/\\1;/g&#x27; | sed &#x27;s/@1=//g&#x27;| sed &#x27;s/@[1-9]=/,/g&#x27; | sed &#x27;s/@[1-9][0-9]=/,/g&#x27; &gt; 000018OK.sql 000018OK.sql 最后将数据导入数据库即可。","categories":[],"tags":[]},{"title":"","slug":"MySQL重启失败","date":"2023-06-05T01:28:10.951Z","updated":"2023-06-05T01:28:10.951Z","comments":true,"path":"2023/06/05/MySQL重启失败/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/MySQL%E9%87%8D%E5%90%AF%E5%A4%B1%E8%B4%A5/","excerpt":"","text":"my.cnf -&gt; 查看 err_log 位置 查看日志报错 1ERROR:-----------&gt; The innodb_system data file &#x27;ibdata1&#x27; must be writable 12# 5.7之后版本 [根据MySQL安装路径]chmod -R 777 /var/lib/mysql","categories":[],"tags":[]},{"title":"","slug":"Nacos","date":"2023-06-05T01:28:10.951Z","updated":"2023-06-05T01:28:10.951Z","comments":true,"path":"2023/06/05/Nacos/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/Nacos/","excerpt":"","text":"配置中心1.添加依赖12345&lt;dependency&gt; &lt;groupId&gt;com.alibaba.boot&lt;/groupId&gt; &lt;artifactId&gt;nacos-config-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;0.2.1&lt;/version&gt; &lt;/dependency&gt; 2.启动类注解 @NacosPropertySource12345678910@SpringBootApplication // dataId 对应配置管理-配置列表-dataId@NacosPropertySource(dataId = &quot;nacosDemo&quot;, autoRefreshed = true) public class NacosDemoApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(NacosDemoApplication.class, args); &#125; &#125; 3.配置nacos地址123spring: application: name: nacos-demo 4.使用配置123456789101112131415@RestController public class CacheController &#123; @NacosValue(value = &quot;$&#123;useLocalCache:false&#125;&quot;, autoRefreshed = true) private boolean useLocalCache; private static final String template = &quot;useLocalCache is %s!&quot;; @GetMapping(&quot;/cache&quot;) public String cache() &#123; // 默认返回false return String.format(template, useLocalCache); &#125; &#125;// 此时返回结果 ：useLocalCache is false! 增加配置并发布 1// 返回结果 ：useLocalCache is true!","categories":[],"tags":[]},{"title":"","slug":"Object","date":"2023-06-05T01:28:10.951Z","updated":"2023-06-05T01:28:10.951Z","comments":true,"path":"2023/06/05/Object/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/Object/","excerpt":"","text":"https://hellogithub.com/periodical/statistics/click/?target=https://github.com/RitterHou/Geisha https://hellogithub.com/periodical/statistics/click/?target=https://github.com/dianbaer/anychat","categories":[],"tags":[]},{"title":"List stream","slug":"Java 8 Stream","date":"2023-06-05T01:28:10.950Z","updated":"2023-06-05T01:28:10.950Z","comments":true,"path":"2023/06/05/Java 8 Stream/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/Java%208%20Stream/","excerpt":"","text":"通过workOrederNum字段排序 1List&lt;ProduceOrderDTO&gt; collect = list.stream().sorted(Comparator.comparing(ProduceOrderDTO::getWorkOrderNum)).collect(Collectors.toList()); 查出InstructionPoDTO中InstructionDocNum作为list 12// 筛选出不重复的 instructionDocNumList&lt;String&gt; instructionDocNums = read.stream().map(InstructionPoDTO::getInstructionDocNum).distinct().collect(Collectors.toList()); 筛选所有instructionDocNum = 123的对象 12List&lt;InstructionPoDTO&gt; instructionPoDTOS = read.stream().filter(instructionPoDTO -&gt; instructionPoDTO.getInstructionDocNum().equals(&quot;123&quot;)).collect(Collectors.toList()); 查询出第一个 1String instructionDocId = instructionDocs.stream().findFirst().get(); 设置typeCode为key，list的对象为value 1Map&lt;String, MtGenType&gt; typesMap = types.stream().collect(Collectors.toMap(t -&gt; t.getTypeCode(), t -&gt; t)); &#x2F;&#x2F; 通过字段去重 1instructionSapStockDTOS.stream().collect(Collectors.collectingAndThen(Collectors.toCollection(()-&gt; new TreeSet&lt;&gt;(Comparator.comparing(o -&gt; o.getMaterial()+&quot;;&quot;+o.getPlant()+&quot;;&quot;+o.getStorage()+&quot;;&quot;+o.getBatch()+&quot;;&quot;+o.getSpecialStock()))), ArrayList::new)); GROUP BY 123456789101112131415161718192021222324252627Map&lt;String, List&lt;WmsIqcRecord&gt;&gt; map = records.stream().collect(Collectors.groupingBy(iqcRecord -&gt; &#123; if (StringUtils.equals(&quot;TO_DO&quot;, iqcRecord.getStatus())) &#123; switch (iqcRecord.getDealMethod()) &#123; case &quot;RELEASE&quot;: return &quot;TO_RELEASE&quot;; case &quot;FREEZE&quot;: return &quot;TO_FREEZE&quot;; case &quot;RETURN&quot;: return &quot;TO_RETURN&quot;; default: return &quot;TO_DO&quot;; &#125; &#125; else if (StringUtils.equals(&quot;DONE&quot;, iqcRecord.getStatus())) &#123; switch (iqcRecord.getDealMethod()) &#123; case &quot;RELEASE&quot;: return &quot;RELEASE_DONE&quot;; case &quot;FREEZE&quot;: return &quot;FREEZE_DONE&quot;; case &quot;RETURN&quot;: return &quot;RETURN_DONE&quot;; default: return &quot;DONE&quot;; &#125; &#125; else &#123; return &quot;DEAL&quot;; &#125; &#125;)); 1234567// List&lt;LocalDate&gt; collect = localDates.stream().sorted((var1, var2) -&gt; &#123;// if (var1.isBefore(var2)) &#123;// return -1;// &#125;// return 1;// &#125;).collect(Collectors.toList());// System.out.println(localDates.stream().sorted().collect(Collectors.toList()));","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://fairyeye.github.io/tags/Java/"}]},{"title":"JdbcTemplete批处理","slug":"JDBCTemplete批处理","date":"2023-06-05T01:28:10.950Z","updated":"2023-06-05T01:28:10.950Z","comments":true,"path":"2023/06/05/JDBCTemplete批处理/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/JDBCTemplete%E6%89%B9%E5%A4%84%E7%90%86/","excerpt":"","text":"123456789101112131415161718// sql语句String sql = &quot;INSERT INTO ssme_iqc_change(TENANT_ID, KID) VALUE (?, ?);&quot;;List&lt;String&gt; kids = new ArrayList&lt;&gt;();// BatchPreparedStatementSetter 通过循环取出数据填充到SQL中jdbcTemplate.batchUpdate(sql, new BatchPreparedStatementSetter() &#123; @Override public void setValues(PreparedStatement ps, int i) throws SQLException &#123; ps.setLong(1, 4L); ps.setString(2, kids.get(i)); &#125; @Override public int getBatchSize() &#123; return kids.size(); &#125; &#125;);","categories":[{"name":"速率优化","slug":"速率优化","permalink":"https://fairyeye.github.io/categories/%E9%80%9F%E7%8E%87%E4%BC%98%E5%8C%96/"}],"tags":[{"name":"utils","slug":"utils","permalink":"https://fairyeye.github.io/tags/utils/"}]},{"title":"","slug":"Jmeter简单使用","date":"2023-06-05T01:28:10.950Z","updated":"2023-06-05T01:28:10.950Z","comments":true,"path":"2023/06/05/Jmeter简单使用/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/Jmeter%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Navicat数据库导出链接密码解析","slug":"Mac 数据库忘记密码","date":"2023-06-05T01:28:10.950Z","updated":"2023-06-05T01:28:10.950Z","comments":true,"path":"2023/06/05/Mac 数据库忘记密码/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/Mac%20%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/","excerpt":"","text":"参考：https://blog.csdn.net/harris_lele/article/details/123588127 导出来，然后用php解析密码即可； 在线运行php： https://www.toolfk.com/tools/online-runphp.html 运行代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141&lt;?phpclass NavicatPassword&#123; protected $version = 0; protected $aesKey = &#x27;libcckeylibcckey&#x27;; protected $aesIv = &#x27;libcciv libcciv &#x27;; protected $blowString = &#x27;3DC5CA39&#x27;; protected $blowKey = null; protected $blowIv = null; public function __construct($version = 12) &#123; $this-&gt;version = $version; $this-&gt;blowKey = sha1(&#x27;3DC5CA39&#x27;, true); $this-&gt;blowIv = hex2bin(&#x27;d9c7c3c8870d64bd&#x27;); &#125; public function encrypt($string) &#123; $result = FALSE; switch ($this-&gt;version) &#123; case 11: $result = $this-&gt;encryptEleven($string); break; case 12: $result = $this-&gt;encryptTwelve($string); break; default: break; &#125; return $result; &#125; protected function encryptEleven($string) &#123; $round = intval(floor(strlen($string) / 8)); $leftLength = strlen($string) % 8; $result = &#x27;&#x27;; $currentVector = $this-&gt;blowIv; for ($i = 0; $i &lt; $round; $i++) &#123; $temp = $this-&gt;encryptBlock($this-&gt;xorBytes(substr($string, 8 * $i, 8), $currentVector)); $currentVector = $this-&gt;xorBytes($currentVector, $temp); $result .= $temp; &#125; if ($leftLength) &#123; $currentVector = $this-&gt;encryptBlock($currentVector); $result .= $this-&gt;xorBytes(substr($string, 8 * $i, $leftLength), $currentVector); &#125; return strtoupper(bin2hex($result)); &#125; protected function encryptBlock($block) &#123; return openssl_encrypt($block, &#x27;BF-ECB&#x27;, $this-&gt;blowKey, OPENSSL_RAW_DATA|OPENSSL_NO_PADDING); &#125; protected function decryptBlock($block) &#123; return openssl_decrypt($block, &#x27;BF-ECB&#x27;, $this-&gt;blowKey, OPENSSL_RAW_DATA|OPENSSL_NO_PADDING); &#125; protected function xorBytes($str1, $str2) &#123; $result = &#x27;&#x27;; for ($i = 0; $i &lt; strlen($str1); $i++) &#123; $result .= chr(ord($str1[$i]) ^ ord($str2[$i])); &#125; return $result; &#125; protected function encryptTwelve($string) &#123; $result = openssl_encrypt($string, &#x27;AES-128-CBC&#x27;, $this-&gt;aesKey, OPENSSL_RAW_DATA, $this-&gt;aesIv); return strtoupper(bin2hex($result)); &#125; public function decrypt($string) &#123; $result = FALSE; switch ($this-&gt;version) &#123; case 11: $result = $this-&gt;decryptEleven($string); break; case 12: $result = $this-&gt;decryptTwelve($string); break; default: break; &#125; return $result; &#125; protected function decryptEleven($upperString) &#123; $string = hex2bin(strtolower($upperString)); $round = intval(floor(strlen($string) / 8)); $leftLength = strlen($string) % 8; $result = &#x27;&#x27;; $currentVector = $this-&gt;blowIv; for ($i = 0; $i &lt; $round; $i++) &#123; $encryptedBlock = substr($string, 8 * $i, 8); $temp = $this-&gt;xorBytes($this-&gt;decryptBlock($encryptedBlock), $currentVector); $currentVector = $this-&gt;xorBytes($currentVector, $encryptedBlock); $result .= $temp; &#125; if ($leftLength) &#123; $currentVector = $this-&gt;encryptBlock($currentVector); $result .= $this-&gt;xorBytes(substr($string, 8 * $i, $leftLength), $currentVector); &#125; return $result; &#125; protected function decryptTwelve($upperString) &#123; $string = hex2bin(strtolower($upperString)); return openssl_decrypt($string, &#x27;AES-128-CBC&#x27;, $this-&gt;aesKey, OPENSSL_RAW_DATA, $this-&gt;aesIv); &#125;&#125;; //需要指定版本两种，11或12//$navicatPassword = new NavicatPassword(11);$navicatPassword = new NavicatPassword(12); //解密//$decode = $navicatPassword-&gt;decrypt(&#x27;15057D7BA390&#x27;);$decode = $navicatPassword-&gt;decrypt(&#x27;75008D0AE102C19EE3767E201AC9E4D2&#x27;);echo $decode.&quot;\\n&quot;;?&gt;","categories":[{"name":"实用","slug":"实用","permalink":"https://fairyeye.github.io/categories/%E5%AE%9E%E7%94%A8/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://fairyeye.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"","slug":"Main方法","date":"2023-06-05T01:28:10.950Z","updated":"2023-06-05T01:28:10.950Z","comments":true,"path":"2023/06/05/Main方法/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/Main%E6%96%B9%E6%B3%95/","excerpt":"","text":"天天写 main方法， args到底是个啥?? 12345public static void main(String[] args) &#123; &#125;java -jar demo.jar &#x27;$MAVEN_REPOSITORY$&#x27; &#x27;哈哈&#x27; &#x27;12345&#x27;","categories":[],"tags":[]},{"title":"","slug":"Mapper","date":"2023-06-05T01:28:10.950Z","updated":"2023-06-05T01:28:10.951Z","comments":true,"path":"2023/06/05/Mapper/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/Mapper/","excerpt":"","text":"123456&lt;if test=&quot;dto.instructionDocStatus != null and dto.instructionDocStatus != &#x27;&#x27;&quot;&gt; AND MID.INSTRUCTION_DOC_STATUS IN &lt;foreach collection=&quot;dto.instructionDocStatus.split(&#x27;,&#x27;)&quot; item=&quot;item&quot; index=&quot;index&quot; separator=&quot;,&quot;&gt; #&#123;item&#125; &lt;/foreach&gt;&lt;/if&gt;","categories":[],"tags":[]},{"title":"Git","slug":"Git","date":"2023-06-05T01:28:10.949Z","updated":"2023-06-05T01:28:10.949Z","comments":true,"path":"2023/06/05/Git/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/Git/","excerpt":"Git常用操作。","text":"Git常用操作。 1https://blog.csdn.net/ch2362710931/article/details/125709372","categories":[],"tags":[]},{"title":"","slug":"Go笔记","date":"2023-06-05T01:28:10.949Z","updated":"2023-06-05T01:28:10.949Z","comments":true,"path":"2023/06/05/Go笔记/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/Go%E7%AC%94%E8%AE%B0/","excerpt":"","text":"1// 当标识符（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：Group1，那么使用这种形式的标识符的对象就可以被外部包的代码所使用（客户端程序需要先导入这个包），这被称为导出（像面向对象语言中的 public）；标识符如果以小写字母开头，则对包外是不可见的，但是他们在整个包的内部是可见并且可用的（像面向对象语言中的 protected ）。 报错：The &#39;main&#39; file has the non-main package or does not contain the &#39;main&#39; function main函数需要再main包下","categories":[],"tags":[]},{"title":"","slug":"IDEA配置","date":"2023-06-05T01:28:10.949Z","updated":"2023-06-05T01:28:10.949Z","comments":true,"path":"2023/06/05/IDEA配置/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/IDEA%E9%85%8D%E7%BD%AE/","excerpt":"","text":"1. Maven 设置","categories":[],"tags":[]},{"title":"","slug":"Idea启动项目找不到主类","date":"2023-06-05T01:28:10.949Z","updated":"2023-06-05T01:28:10.950Z","comments":true,"path":"2023/06/05/Idea启动项目找不到主类/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/Idea%E5%90%AF%E5%8A%A8%E9%A1%B9%E7%9B%AE%E6%89%BE%E4%B8%8D%E5%88%B0%E4%B8%BB%E7%B1%BB/","excerpt":"","text":"多module下，启动程序报错： 执行下，就可以了","categories":[],"tags":[]},{"title":"Easy Code使用问题","slug":"EasyCode使用记录","date":"2023-06-05T01:28:10.948Z","updated":"2023-06-05T01:28:10.948Z","comments":true,"path":"2023/06/05/EasyCode使用记录/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/EasyCode%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/","excerpt":"","text":"Mapper接口要加上@Mapper注解。 application.yml要加上 12mybatis: mapper-locations: classpath:/mapper/*Dao.xml","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://fairyeye.github.io/tags/Java/"}]},{"title":"","slug":"BigDecimal","date":"2023-06-05T01:28:10.948Z","updated":"2023-06-05T01:28:10.948Z","comments":true,"path":"2023/06/05/BigDecimal/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/BigDecimal/","excerpt":"","text":"123456789101112131415161718192021222324252627int a = bigdemical.compareTo(bigdemical2)//a = -1,表示bigdemical小于bigdemical2；//a = 0,表示bigdemical等于bigdemical2；//a = 1,表示bigdemical大于bigdemical2；//加减乘除：BigDecimal bignum1 = new BigDecimal(&quot;10&quot;); BigDecimal bignum2 = new BigDecimal(&quot;5&quot;); BigDecimal bignum3 = null; //加法 bignum3 = bignum1.add(bignum2); System.out.println(&quot;和 是：&quot; + bignum3); //减法 bignum3 = bignum1.(bignum2); System.out.println(&quot;差 是：&quot; + bignum3); //乘法 bignum3 = bignum1.multiply(bignum2); System.out.println(&quot;积 是：&quot; + bignum3); //除法 bignum3 = bignum1.divide(bignum2); System.out.println(&quot;商 是：&quot; + bignum3); BigDecimal 去除小数点后的0123BigDecimal bigDecimal = new BigDecimal(&quot;10.100000&quot;);bigDecimal = bigDecimal.stripTrailingZeros();// 10.1String str = bigDecimal.toPlainString();//转成字符串","categories":[],"tags":[]},{"title":"Delete/Truncate/Drop","slug":"Delete & Truncate","date":"2023-06-05T01:28:10.948Z","updated":"2023-06-05T01:28:10.948Z","comments":true,"path":"2023/06/05/Delete & Truncate/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/Delete%20&%20Truncate/","excerpt":"","text":"假如把一张表比作一间教室，数据比作学生。 drop 就是把这件教师炸掉了，教室都没了，更不用说数据了。 truncate 就是把学生开除了，离开了，再也没有了。 delete 就是学生出去了，虽然他们可能不会回来了，但是位置还是要留着。 Drop直接删掉表，这个没什么好说的。 包括表结构，表数据，全部删除，占用的空间也会释放。 Truncate截断表，会释放空间。 Delete删除数据","categories":[],"tags":[{"name":"dairy","slug":"dairy","permalink":"https://fairyeye.github.io/tags/dairy/"}]},{"title":"","slug":"ExcelUtils","date":"2023-06-05T01:28:10.948Z","updated":"2023-06-05T01:28:10.948Z","comments":true,"path":"2023/06/05/ExcelUtils/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/ExcelUtils/","excerpt":"","text":"1234// 对应Excel头与实体类字段 通过HeaderAliasint rowCount = reader.getRowCount();reader.setHeaderAlias(DataReadVO.getHeaderAlias());List&lt;DataReadVO&gt; read = reader.read(0, 1, rowCount, DataReadVO.class); 1234567891011121314151617public class DataReadVO &#123; private boolean status = false; private Long lineNum; private String materialId; private String materialCode; private Double qty; public Map&lt;String, String&gt; map; public static Map&lt;String, String&gt; getHeaderAlias()&#123; Map&lt;String, String&gt; map = new HashMap&lt;&gt;(); map.put(&quot;行号&quot;, &quot;lineNum&quot;); map.put(&quot;物料编码&quot;, &quot;materialCode&quot;); map.put(&quot;数量&quot;, &quot;qty&quot;); return map; &#125;&#125;","categories":[],"tags":[]},{"title":"","slug":"FileUtils","date":"2023-06-05T01:28:10.948Z","updated":"2023-06-05T01:28:10.948Z","comments":true,"path":"2023/06/05/FileUtils/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/FileUtils/","excerpt":"","text":"数组转文件 123456789101112131415161718192021222324252627282930313233343536373839/** * @param bfile * @param filePath * @param fileName * * 根据byte数组，生成文件 */public static void getFile(byte[] bfile, String filePath,String fileName) &#123; BufferedOutputStream bos = null; FileOutputStream fos = null; File file = null; try &#123; File dir = new File(filePath); if(!dir.exists()&amp;&amp;dir.isDirectory())&#123;//判断文件目录是否存在 dir.mkdirs(); &#125; file = new File(filePath+&quot;\\\\&quot;+fileName); fos = new FileOutputStream(file); bos = new BufferedOutputStream(fos); bos.write(bfile); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; if (bos != null) &#123; try &#123; bos.close(); &#125; catch (IOException e1) &#123; e1.printStackTrace(); &#125; &#125; if (fos != null) &#123; try &#123; fos.close(); &#125; catch (IOException e1) &#123; e1.printStackTrace(); &#125; &#125; &#125;&#125;","categories":[],"tags":[]},{"title":"","slug":"10","date":"2023-06-05T01:28:10.947Z","updated":"2023-06-05T01:56:20.456Z","comments":true,"path":"2023/06/05/10/","link":"","permalink":"https://fairyeye.github.io/2023/06/05/10/","excerpt":"","text":"12query -&gt; DataPermission :","categories":[],"tags":[]},{"title":"Redis笔记","slug":"Redis笔记","date":"2021-12-10T02:36:33.000Z","updated":"2023-06-05T01:28:10.952Z","comments":true,"path":"2021/12/10/Redis笔记/","link":"","permalink":"https://fairyeye.github.io/2021/12/10/Redis%E7%AC%94%E8%AE%B0/","excerpt":"","text":"&#x2F;&#x2F; 201个线程 应该扣减201 -&gt; 库存不足","categories":[],"tags":[{"name":"dairy","slug":"dairy","permalink":"https://fairyeye.github.io/tags/dairy/"}]},{"title":"数据库时间存储","slug":"数据库时间存储","date":"2020-04-29T08:12:42.000Z","updated":"2023-06-05T01:28:10.957Z","comments":true,"path":"2020/04/29/数据库时间存储/","link":"","permalink":"https://fairyeye.github.io/2020/04/29/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%97%B6%E9%97%B4%E5%AD%98%E5%82%A8/","excerpt":"","text":"数据库如何存储时间？你真的知道吗？我们平时开发中不可避免的就是要存储时间，比如我们要记录操作表中这条记录的时间、记录转账的交易时间、记录出发时间等等。你会发现这个时间这个东西与我们开发的联系还是非常紧密的，用的好与不好会给我们的业务甚至功能带来很大的影响。所以，我们有必要重新出发，好好认识一下这个东西。 这是一篇短小精悍的文章，仔细阅读一定能学到不少东西！ 1.切记不要用字符串存储日期我记得我在大学的时候就这样干过，而且现在很多对数据库不太了解的新手也会这样干，可见，这种存储日期的方式的优点还是有的，就是简单直白，容易上手。 但是，这是不正确的做法，主要会有下面两个问题： 字符串占用的空间更大！ 字符串存储的日期比较效率比较低（逐个字符进行比对），无法用日期相关的 API 进行计算和比较。 2.Datetime 和 Timestamp 之间抉择Datetime 和 Timestamp 是 MySQL 提供的两种比较相似的保存时间的数据类型。他们两者究竟该如何选择呢？ 通常我们都会首选 Timestamp。 下面说一下为什么这样做! 2.1 DateTime 类型没有时区信息的DateTime 类型是没有时区信息的（时区无关） ，DateTime 类型保存的时间都是当前会话所设置的时区对应的时间。这样就会有什么问题呢？当你的时区更换之后，比如你的服务器更换地址或者更换客户端连接时区设置的话，就会导致你从数据库中读出的时间错误。不要小看这个问题，很多系统就是因为这个问题闹出了很多笑话。 Timestamp 和时区有关。Timestamp 类型字段的值会随着服务器时区的变化而变化，自动换算成相应的时间，说简单点就是在不同时区，查询到同一个条记录此字段的值会不一样。 下面实际演示一下！ 建表 SQL 语句： 123456CREATE TABLE `time_zone_test` ( `id` bigint(20) NOT NULL AUTO_INCREMENT, `date_time` datetime DEFAULT NULL, `time_stamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8; 插入数据： 1INSERT INTO time_zone_test(date_time,time_stamp) VALUES(NOW(),NOW()); 查看数据： 1select date_time,time_stamp from time_zone_test; 结果： 12345+---------------------+---------------------+| date_time | time_stamp |+---------------------+---------------------+| 2020-01-11 09:53:32 | 2020-01-11 09:53:32 |+---------------------+---------------------+ 现在我们运行 修改当前会话的时区: 1set time_zone=&#x27;+8:00&#x27;; 再次查看数据： 12345+---------------------+---------------------+| date_time | time_stamp |+---------------------+---------------------+| 2020-01-11 09:53:32 | 2020-01-11 17:53:32 |+---------------------+---------------------+ 扩展：一些关于 MySQL 时区设置的一个常用 sql 命令 12345678910# 查看当前会话时区SELECT @@session.time_zone;# 设置当前会话时区SET time_zone = &#x27;Europe/Helsinki&#x27;;SET time_zone = &quot;+00:00&quot;;# 数据库全局时区设置SELECT @@global.time_zone;# 设置全局时区SET GLOBAL time_zone = &#x27;+8:00&#x27;;SET GLOBAL time_zone = &#x27;Europe/Helsinki&#x27;; 2.2 DateTime 类型耗费空间更大Timestamp 只需要使用 4 个字节的存储空间，但是 DateTime 需要耗费 8 个字节的存储空间。但是，这样同样造成了一个问题，Timestamp 表示的时间范围更小。 DateTime ：1000-01-01 00:00:00 ~ 9999-12-31 23:59:59 Timestamp： 1970-01-01 00:00:01 ~ 2037-12-31 23:59:59 Timestamp 在不同版本的 MySQL 中有细微差别。 3 再看 MySQL 日期类型存储空间下图是 MySQL 5.6 版本中日期类型所占的存储空间： 可以看出 5.6.4 之后的 MySQL 多出了一个需要 0 ～ 3 字节的小数位。Datatime 和 Timestamp 会有几种不同的存储空间占用。 为了方便，本文我们还是默认 Timestamp 只需要使用 4 个字节的存储空间，但是 DateTime 需要耗费 8 个字节的存储空间。 4.数值型时间戳是更好的选择吗？很多时候，我们也会使用 int 或者 bigint 类型的数值也就是时间戳来表示时间。 这种存储方式的具有 Timestamp 类型的所具有一些优点，并且使用它的进行日期排序以及对比等操作的效率会更高，跨系统也很方便，毕竟只是存放的数值。缺点也很明显，就是数据的可读性太差了，你无法直观的看到具体时间。 时间戳的定义如下： 时间戳的定义是从一个基准时间开始算起，这个基准时间是「1970-1-1 00:00:00 +0:00」，从这个时间开始，用整数表示，以秒计时，随着时间的流逝这个时间整数不断增加。这样一来，我只需要一个数值，就可以完美地表示时间了，而且这个数值是一个绝对数值，即无论的身处地球的任何角落，这个表示时间的时间戳，都是一样的，生成的数值都是一样的，并且没有时区的概念，所以在系统的中时间的传输中，都不需要进行额外的转换了，只有在显示给用户的时候，才转换为字符串格式的本地时间。 数据库中实际操作： 123456789101112131415mysql&gt; select UNIX_TIMESTAMP(&#x27;2020-01-11 09:53:32&#x27;);+---------------------------------------+| UNIX_TIMESTAMP(&#x27;2020-01-11 09:53:32&#x27;) |+---------------------------------------+| 1578707612 |+---------------------------------------+1 row in set (0.00 sec)mysql&gt; select FROM_UNIXTIME(1578707612);+---------------------------+| FROM_UNIXTIME(1578707612) |+---------------------------+| 2020-01-11 09:53:32 |+---------------------------+1 row in set (0.01 sec) 1转载：https://juejin.im/post/5e1d494a5188254c45778a14","categories":[],"tags":[{"name":"dairy","slug":"dairy","permalink":"https://fairyeye.github.io/tags/dairy/"}]},{"title":"MySQL连接问题","slug":"MySQL连接问题","date":"2020-04-28T10:15:49.000Z","updated":"2023-06-05T01:28:10.951Z","comments":true,"path":"2020/04/28/MySQL连接问题/","link":"","permalink":"https://fairyeye.github.io/2020/04/28/MySQL%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98/","excerpt":"","text":"今天接了一个任务，把之前写好的Mapper 中的SQL多连接一张表， 然后中间出现了一个问题 1SELECT ui.name FROM school s,user u LEFT JOIN user_info ui ON u.id = ui.id; 这样是没错的，但是如果把表的顺序换一下 1SELECT ui.name FROM user u,school s LEFT JOIN user_info ui ON u.id = ui.id; 就会出问题，理论上来说这样是正常的，但是刚开始的时候确实忽略的这个问题 毕竟有前辈写的代码，实战中都是很多张表关联。","categories":[],"tags":[{"name":"dairy","slug":"dairy","permalink":"https://fairyeye.github.io/tags/dairy/"}]},{"title":"RE:2网关","slug":"RE-2网关","date":"2020-04-26T07:25:10.000Z","updated":"2023-06-05T01:28:10.952Z","comments":true,"path":"2020/04/26/RE-2网关/","link":"","permalink":"https://fairyeye.github.io/2020/04/26/RE-2%E7%BD%91%E5%85%B3/","excerpt":"","text":"错误的依赖正确的依赖 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-netflix-eureka-client&lt;/artifactId&gt;&lt;/dependency&gt; 使用IP注册到注册中心123456eureka: instance: hostname: $&#123;spring.cloud.client.ip-address&#125; instance-id: $&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125; # 使用IP注册到注册中心 prefer-ip-address: true http://www.ityouknow.com/springcloud/2018/12/12/spring-cloud-gateway-start.html","categories":[],"tags":[{"name":"store","slug":"store","permalink":"https://fairyeye.github.io/tags/store/"}]},{"title":"RE:3-UserService","slug":"RE-3用户服务","date":"2020-04-26T07:25:10.000Z","updated":"2023-06-05T01:28:10.952Z","comments":true,"path":"2020/04/26/RE-3用户服务/","link":"","permalink":"https://fairyeye.github.io/2020/04/26/RE-3%E7%94%A8%E6%88%B7%E6%9C%8D%E5%8A%A1/","excerpt":"","text":"依赖：1234567891011121314151617&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;2.1.2&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&lt;/dependency&gt; 配置12345678spring: application: name: goods-service datasource: url: jdbc:mysql://dev.store.local:3306/store_goods?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false username: root password: root driver-class-name: com.mysql.jdbc.Driver TIPS通过easyCode 生成的代码 需要在application配置文件中添加： 12mybatis: mapper-locations: classpath:/mapper/*Dao.xml 报错：1java.sql.SQLException: The server time zone value &#x27;?й???????&#x27; is unrecognized or represents more 在数据库连接后添加：&amp;serverTimezone=GMT","categories":[],"tags":[{"name":"store","slug":"store","permalink":"https://fairyeye.github.io/tags/store/"}]},{"title":"RE:4Swagger","slug":"RE-4Swagger","date":"2020-04-26T07:25:10.000Z","updated":"2023-06-05T01:28:10.952Z","comments":true,"path":"2020/04/26/RE-4Swagger/","link":"","permalink":"https://fairyeye.github.io/2020/04/26/RE-4Swagger/","excerpt":"","text":"添加依赖 12345678910&lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt; &lt;version&gt;2.9.2&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt; &lt;version&gt;2.9.2&lt;/version&gt;&lt;/dependency&gt; https://blog.csdn.net/huangjinjin520/article/details/89740672","categories":[],"tags":[{"name":"store","slug":"store","permalink":"https://fairyeye.github.io/tags/store/"}]},{"title":"RE:5UserService&Fegin","slug":"RE-5UserService&Fegin","date":"2020-04-26T07:25:10.000Z","updated":"2023-06-05T01:28:10.952Z","comments":true,"path":"2020/04/26/RE-5UserService&Fegin/","link":"","permalink":"https://fairyeye.github.io/2020/04/26/RE-5UserService&Fegin/","excerpt":"","text":"Fegin123456789101112package com.fairyeye.feign;@FeignClient(name = &quot;goods-service&quot;)public interface GoodsFeign &#123; /** * * @param id * @return */ @GetMapping(&quot;/goods/selectOne&quot;) public Goods selectOne(@RequestParam(value = &quot;id&quot;) Long id);&#125; @FeignClient(name = &quot;goods-service&quot;):服务名称 @GetMapping(&quot;/goods/selectOne&quot;)：是goods-service中该接口的完整路由。 注册中心： Application AMIs Availability Zones Status GOODS-SERVICE n&#x2F;a (1) (1) UP (1) - your ip:port USER-SERVICE n&#x2F;a (1) (1) UP (1) - your ip:port UserServicehttps://github.com/fairyeye/store 1+1+1+1+1+1+1 &#x3D; 7 6+5+4+3+2+1 &#x3D;","categories":[],"tags":[{"name":"store","slug":"store","permalink":"https://fairyeye.github.io/tags/store/"}]},{"title":"RE:1 注册中心","slug":"RE-1注册中心","date":"2020-04-26T06:25:50.000Z","updated":"2023-06-05T01:28:10.952Z","comments":true,"path":"2020/04/26/RE-1注册中心/","link":"","permalink":"https://fairyeye.github.io/2020/04/26/RE-1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/","excerpt":"","text":"基础依赖1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;&lt;/dependency&gt; 注解启动类上加@EnableEurekaServer注解 store需要pom application.yml 1234567891011spring: application: name: store-eurekaserver: port: 8000eureka: client: register-with-eureka: false fetch-registry: false serviceUrl: defaultZone: http://dev.store.local:$&#123;server.port&#125;/eureka/ 1register-with-eureka: false // 注释之后才可以看到 available instance 参考： http://www.ityouknow.com/springcloud/2017/05/10/springcloud-eureka.html MySQL 版本：8.0.19","categories":[{"name":"折腾","slug":"折腾","permalink":"https://fairyeye.github.io/categories/%E6%8A%98%E8%85%BE/"}],"tags":[{"name":"store","slug":"store","permalink":"https://fairyeye.github.io/tags/store/"}]},{"title":"GC","slug":"GC回收算法","date":"2020-04-23T16:00:00.000Z","updated":"2023-06-05T01:28:10.949Z","comments":true,"path":"2020/04/24/GC回收算法/","link":"","permalink":"https://fairyeye.github.io/2020/04/24/GC%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95/","excerpt":"","text":"引用计数算法​ 原理：是否有对象引用。 ​ ![Reference counting](D:\\workspace\\gitee\\StaticFile\\image\\Reference counting.png) ​ 缺点：如果两个对象互相引用，会造成内存泄漏。 可达性分析法​","categories":[],"tags":[{"name":"dairy","slug":"dairy","permalink":"https://fairyeye.github.io/tags/dairy/"}]},{"title":"GC","slug":"IDEA Plugins","date":"2020-04-23T16:00:00.000Z","updated":"2023-06-05T01:28:10.949Z","comments":true,"path":"2020/04/24/IDEA Plugins/","link":"","permalink":"https://fairyeye.github.io/2020/04/24/IDEA%20Plugins/","excerpt":"","text":"Java Bean to Json 实体类–&gt;Json","categories":[],"tags":[{"name":"dairy","slug":"dairy","permalink":"https://fairyeye.github.io/tags/dairy/"}]},{"title":"22","slug":"22","date":"2020-04-22T03:08:07.000Z","updated":"2023-06-05T01:28:10.948Z","comments":true,"path":"2020/04/22/22/","link":"","permalink":"https://fairyeye.github.io/2020/04/22/22/","excerpt":"","text":"Calendar Modifier and Type Method and Description BigDecimal divide(BigDecimal divisor, int roundingMode)Returns a BigDecimal whose value is (this / divisor), and whose scale is this.scale(). BigDecimal divide(BigDecimal divisor, int scale, int roundingMode)Returns a BigDecimal whose value is (this / divisor), and whose scale is as specified. BigDecimal add(BigDecimal augend)Returns a BigDecimal whose value is (this + augend), and whose scale is max(this.scale(), augend.scale()). BigDecimal add(BigDecimal augend, MathContext mc)Returns a BigDecimal whose value is (this + augend), with rounding according to the context settings. double doubleValue()Converts this BigDecimal to a double. Modifier and Type Method and Description BigDecimal abs()Returns a BigDecimal whose value is the absolute value of this BigDecimal, and whose scale is this.scale(). BigDecimal abs(MathContext mc)Returns a BigDecimal whose value is the absolute value of this BigDecimal, with rounding according to the context settings. BigDecimal add(BigDecimal augend)Returns a BigDecimal whose value is (this + augend), and whose scale is max(this.scale(), augend.scale()). BigDecimal add(BigDecimal augend, MathContext mc)Returns a BigDecimal whose value is (this + augend), with rounding according to the context settings. byte byteValueExact()Converts this BigDecimal to a byte, checking for lost information. int compareTo(BigDecimal val)Compares this BigDecimal with the specified BigDecimal. BigDecimal divide(BigDecimal divisor)Returns a BigDecimal whose value is (this / divisor), and whose preferred scale is (this.scale() - divisor.scale()); if the exact quotient cannot be represented (because it has a non-terminating decimal expansion) an ArithmeticException is thrown. BigDecimal divide(BigDecimal divisor, int roundingMode)Returns a BigDecimal whose value is (this / divisor), and whose scale is this.scale(). BigDecimal divide(BigDecimal divisor, int scale, int roundingMode)Returns a BigDecimal whose value is (this / divisor), and whose scale is as specified. BigDecimal divide(BigDecimal divisor, int scale, RoundingMode roundingMode)Returns a BigDecimal whose value is (this / divisor), and whose scale is as specified. BigDecimal divide(BigDecimal divisor, MathContext mc)Returns a BigDecimal whose value is (this / divisor), with rounding according to the context settings. BigDecimal divide(BigDecimal divisor, RoundingMode roundingMode)Returns a BigDecimal whose value is (this / divisor), and whose scale is this.scale(). BigDecimal[] divideAndRemainder(BigDecimal divisor)Returns a two-element BigDecimal array containing the result of divideToIntegralValue followed by the result of remainder on the two operands. BigDecimal[] divideAndRemainder(BigDecimal divisor, MathContext mc)Returns a two-element BigDecimal array containing the result of divideToIntegralValue followed by the result of remainder on the two operands calculated with rounding according to the context settings. BigDecimal divideToIntegralValue(BigDecimal divisor)Returns a BigDecimal whose value is the integer part of the quotient (this / divisor) rounded down. BigDecimal divideToIntegralValue(BigDecimal divisor, MathContext mc)Returns a BigDecimal whose value is the integer part of (this / divisor). double doubleValue()Converts this BigDecimal to a double. boolean equals(Object x)Compares this BigDecimal with the specified Object for equality. float floatValue()Converts this BigDecimal to a float. int hashCode()Returns the hash code for this BigDecimal. int intValue()Converts this BigDecimal to an int. int intValueExact()Converts this BigDecimal to an int, checking for lost information. long longValue()Converts this BigDecimal to a long. long longValueExact()Converts this BigDecimal to a long, checking for lost information. BigDecimal max(BigDecimal val)Returns the maximum of this BigDecimal and val. BigDecimal min(BigDecimal val)Returns the minimum of this BigDecimal and val. BigDecimal movePointLeft(int n)Returns a BigDecimal which is equivalent to this one with the decimal point moved n places to the left. BigDecimal movePointRight(int n)Returns a BigDecimal which is equivalent to this one with the decimal point moved n places to the right. BigDecimal multiply(BigDecimal multiplicand)Returns a BigDecimal whose value is (this × multiplicand), and whose scale is (this.scale() + multiplicand.scale()). BigDecimal multiply(BigDecimal multiplicand, MathContext mc)Returns a BigDecimal whose value is (this × multiplicand), with rounding according to the context settings. BigDecimal negate()Returns a BigDecimal whose value is (-this), and whose scale is this.scale(). BigDecimal negate(MathContext mc)Returns a BigDecimal whose value is (-this), with rounding according to the context settings. BigDecimal plus()Returns a BigDecimal whose value is (+this), and whose scale is this.scale(). BigDecimal plus(MathContext mc)Returns a BigDecimal whose value is (+this), with rounding according to the context settings. BigDecimal pow(int n)Returns a BigDecimal whose value is (thisn), The power is computed exactly, to unlimited precision. BigDecimal pow(int n, MathContext mc)Returns a BigDecimal whose value is (thisn). int precision()Returns the precision of this BigDecimal. BigDecimal remainder(BigDecimal divisor)Returns a BigDecimal whose value is (this % divisor). BigDecimal remainder(BigDecimal divisor, MathContext mc)Returns a BigDecimal whose value is (this % divisor), with rounding according to the context settings. BigDecimal round(MathContext mc)Returns a BigDecimal rounded according to the MathContext settings. int scale()Returns the scale of this BigDecimal. BigDecimal scaleByPowerOfTen(int n)Returns a BigDecimal whose numerical value is equal to (this * 10n). BigDecimal setScale(int newScale)Returns a BigDecimal whose scale is the specified value, and whose value is numerically equal to this BigDecimal‘s. BigDecimal setScale(int newScale, int roundingMode)Returns a BigDecimal whose scale is the specified value, and whose unscaled value is determined by multiplying or dividing this BigDecimal‘s unscaled value by the appropriate power of ten to maintain its overall value. BigDecimal setScale(int newScale, RoundingMode roundingMode)Returns a BigDecimal whose scale is the specified value, and whose unscaled value is determined by multiplying or dividing this BigDecimal‘s unscaled value by the appropriate power of ten to maintain its overall value. short shortValueExact()Converts this BigDecimal to a short, checking for lost information. int signum()Returns the signum function of this BigDecimal. BigDecimal stripTrailingZeros()Returns a BigDecimal which is numerically equal to this one but with any trailing zeros removed from the representation. BigDecimal subtract(BigDecimal subtrahend)Returns a BigDecimal whose value is (this - subtrahend), and whose scale is max(this.scale(), subtrahend.scale()). BigDecimal subtract(BigDecimal subtrahend, MathContext mc)Returns a BigDecimal whose value is (this - subtrahend), with rounding according to the context settings. BigInteger toBigInteger()Converts this BigDecimal to a BigInteger. BigInteger toBigIntegerExact()Converts this BigDecimal to a BigInteger, checking for lost information. String toEngineeringString()Returns a string representation of this BigDecimal, using engineering notation if an exponent is needed. String toPlainString()Returns a string representation of this BigDecimal without an exponent field. String toString()Returns the string representation of this BigDecimal, using scientific notation if an exponent is needed. BigDecimal ulp()Returns the size of an ulp, a unit in the last place, of this BigDecimal. BigInteger unscaledValue()Returns a BigInteger whose value is the unscaled value of this BigDecimal. static BigDecimal valueOf(double val)Translates a double into a BigDecimal, using the double‘s canonical string representation provided by the Double.toString(double) method. static BigDecimal valueOf(long val)Translates a long value into a BigDecimal with a scale of zero. static BigDecimal valueOf(long unscaledVal, int scale)Translates a long unscaled value and an int scale into a BigDecimal.","categories":[],"tags":[{"name":"dairy","slug":"dairy","permalink":"https://fairyeye.github.io/tags/dairy/"}]},{"title":"20","slug":"20","date":"2020-04-20T03:00:50.000Z","updated":"2023-06-05T01:28:10.948Z","comments":true,"path":"2020/04/20/20/","link":"","permalink":"https://fairyeye.github.io/2020/04/20/20/","excerpt":"","text":"String数组转int数组假设我们有一个字符串数组： 1String[] strings = &#123;&quot;1&quot;, &quot;2&quot;, &quot;3&quot;&#125;; 使用Lambda表达式（自Java 8起）： 1int[] array = Arrays.asList(strings).stream().mapToInt(Integer::parseInt).toArray(); 另一种方式： 1int[] array = Arrays.stream(strings).mapToInt(Integer::parseInt).toArray();","categories":[],"tags":[]},{"title":"17","slug":"17","date":"2020-04-17T02:59:54.000Z","updated":"2023-06-05T01:28:10.947Z","comments":true,"path":"2020/04/17/17/","link":"","permalink":"https://fairyeye.github.io/2020/04/17/17/","excerpt":"","text":"场景： 参数为一个list，但是不确定他是null还是size为0，如果同时判断的话，当他为null时 会出现nullPointException, 可以用 || 123if （Objects.isNull(list) || list == 0） &#123;&#125; 单个的逻辑运算符会将左右两个表达式都进行运算得出布尔值，再进行运算。 File - &gt; Other Setting -&gt; Setting For New Projects 全局配置 maven默认仓库地址，选择本地的地址 &lt;localRepository&gt;D:\\maven_repo&lt;/localRepository&gt; Setting -&gt; file and code temeplate -&gt; include","categories":[],"tags":[{"name":"dairy","slug":"dairy","permalink":"https://fairyeye.github.io/tags/dairy/"}]},{"title":"时间戳 -> Date","slug":"时间戳转换日期问题","date":"2020-04-17T02:59:54.000Z","updated":"2023-06-05T01:28:10.957Z","comments":true,"path":"2020/04/17/时间戳转换日期问题/","link":"","permalink":"https://fairyeye.github.io/2020/04/17/%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E6%8D%A2%E6%97%A5%E6%9C%9F%E9%97%AE%E9%A2%98/","excerpt":"","text":"基础依赖后来发现是我拿到的时间戳是以 秒 为单位的，而转换时需要的是 毫秒。 1Date date = new Date(1579676844); // 1970-01-19T14:47:56.844+0800 1Date date = new Date(1579676844 * 1000L); // 2020-01-22T15:07:24.000+0800","categories":[],"tags":[{"name":"basic","slug":"basic","permalink":"https://fairyeye.github.io/tags/basic/"}]},{"title":"Java 8 Stream","slug":"16","date":"2020-04-16T02:16:54.000Z","updated":"2023-06-05T01:28:10.947Z","comments":true,"path":"2020/04/16/16/","link":"","permalink":"https://fairyeye.github.io/2020/04/16/16/","excerpt":"","text":"Filter1Stream&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate) Returns a stream consisting of the elements of this stream that match the given predicate. This is an intermediate operation. Parameters: predicate - a non-interfering, stateless predicate to apply to each element to determine if it should be included Returns: the new stream 12// 通过条件筛选list.stream().filter(User -&gt; StringUtils.isEmpty(User.getUserName)); GroupBy12// 通过条件分组Map&lt;String, List&lt;User&gt;&gt; groupMap = list.stream().collect(Collectors.groupingBy(User::getName));","categories":[],"tags":[{"name":"dairy","slug":"dairy","permalink":"https://fairyeye.github.io/tags/dairy/"}]},{"title":"15","slug":"15","date":"2020-04-15T06:34:30.000Z","updated":"2023-06-05T01:28:10.947Z","comments":true,"path":"2020/04/15/15/","link":"","permalink":"https://fairyeye.github.io/2020/04/15/15/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"内部类问题","slug":"14","date":"2020-04-14T01:41:32.000Z","updated":"2023-06-05T01:28:10.947Z","comments":true,"path":"2020/04/14/14/","link":"","permalink":"https://fairyeye.github.io/2020/04/14/14/","excerpt":"","text":"12错误描述信息：org.fairy.eye.domin.entity.User is not an enclosing class ​ 在 new 一个内部类的对象时，idea 会生成如下的代码。 12// Info 是User的内部类User.Info info = new User.Info(); ​ 然后会提示报错 org.fairy.eye.domin.entity.User is not an enclosing class ​ 如果内部类没有用 static 修饰的话，是不能这样 new 的。 ​ 需要有外部类实例对象来支持。 12User user = new User();User.Info info = new user.Info();","categories":[],"tags":[{"name":"dairy","slug":"dairy","permalink":"https://fairyeye.github.io/tags/dairy/"}]},{"title":"GIT代码无法合并+本地构建成功服务器构建失败","slug":"13","date":"2020-04-13T01:13:28.000Z","updated":"2023-06-05T01:28:10.947Z","comments":true,"path":"2020/04/13/13/","link":"","permalink":"https://fairyeye.github.io/2020/04/13/13/","excerpt":"","text":"1.GIT相关场景：​ GIT版本出了点问题，无法正常合并代码 具体描述：​ 由于误操作，导致我的本地分支和dev分支不同，在GIT上对比的时候显示无差别，但是实际上最近一次的提交是没有合并的。 ​ 无奈之下，我选择回滚代码。 具体操作：第一种方法：注意：这种方法会把之后的代码完全覆盖掉，不建议使用，除非这个分支只有你自己操作，或者你回滚的版本之后没有别的人提交 首先要找到你要回滚的版本号。 ​ 在idea中操作：右键项目 -&gt; Git -&gt; Show History -&gt; 右键提交的版本 -&gt; Copy Revision Number。 ​ 在GIT中操作：找到提交的历史，SHA 值，即为版本号。 Git Bush 命令行&#x2F;idea TerMinal 命令行 ​ git reset --hard 版本号 第二种方法： 找到版本号，同上。 右键项目 -&gt; Git -&gt; Repository -&gt; Reset HEAD 在 To Commit 中输入版本号 最后：​ 记得一定要提交代码，即使看起来没有要 push 的东西，否则 git pull 之后等于没回滚。 2.构建相关场景：​ 回滚代码之后，本地可以成功构建，但服务器端无法正常构建。 具体描述：​ 服务器端构建一直失败，好像是拉取到了错误版本的代码。 具体操作：​ 暴脾气的我本来打算把项目删了重新拉一个下来，后来忍住了，在服务器端回滚了一下代码，然后手动构建了一下，居然成功了，完结。 最后：​ 虽然没什么有用的东西，不过思路还是有的。 ​ 首先你要确认本地构建的代码是否和服务器完全相同、服务器构建的时候是否pull了最新的代码…","categories":[],"tags":[{"name":"dairy","slug":"dairy","permalink":"https://fairyeye.github.io/tags/dairy/"}]},{"title":"Wed Apr 08 2020 00:00:00 GMT+0800 (中国标准时间)","slug":"test","date":"2020-04-08T01:54:30.000Z","updated":"2023-06-05T01:28:10.954Z","comments":true,"path":"2020/04/08/test/","link":"","permalink":"https://fairyeye.github.io/2020/04/08/test/","excerpt":"","text":"当做实体类入参时，可以通过mapper接口的@param绑定入参。 Exception：1org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.binding.BindingException 子查询： 1234567891011121314151617181920212223&lt;select id=&quot;queryList&quot; resultType=&quot;org.hdgp.mdm.domain.entity.DataPermission&quot;&gt; SELECT ddp.* FROM dmdm_data_permission ddp WHERE 1=1 &lt;if test=&quot;permission.attrName!=null&quot;&gt; AND ddp.attr_code in ( SELECT hda.attr_code FROM hdpm_data_attribute hda WHERE hda.attr_name LIKE CONCAT(CONCAT(&#x27;%&#x27;,#&#123;permission.attrName&#125;,&#x27;%&#x27;)) ) &lt;/if&gt; &lt;if test=&quot;permission.attrValue!=null&quot;&gt; AND ddp.attr_value LIKE CONCAT(CONCAT(&#x27;%&#x27;,#&#123;permission.attrValue&#125;,&#x27;%&#x27;)) &lt;/if&gt; &lt;if test=&quot;permission.meaning!=null&quot;&gt; AND ddp.attr_value IN ( SELECT hlv.value FROM hpfm_lov_value hlv WHERE hlv.meaning like CONCAT(CONCAT(&#x27;%&#x27;,#&#123;permission.meaning&#125;,&#x27;%&#x27;)) ) &lt;/if&gt;&lt;/select&gt; 换成连接查询： 1","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://fairyeye.github.io/tags/Java/"}]}],"categories":[{"name":"软件使用","slug":"软件使用","permalink":"https://fairyeye.github.io/categories/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"},{"name":"MySQL","slug":"MySQL","permalink":"https://fairyeye.github.io/categories/MySQL/"},{"name":"mysql","slug":"mysql","permalink":"https://fairyeye.github.io/categories/mysql/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://fairyeye.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"数据库","slug":"数据库","permalink":"https://fairyeye.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"速率优化","slug":"速率优化","permalink":"https://fairyeye.github.io/categories/%E9%80%9F%E7%8E%87%E4%BC%98%E5%8C%96/"},{"name":"实用","slug":"实用","permalink":"https://fairyeye.github.io/categories/%E5%AE%9E%E7%94%A8/"},{"name":"折腾","slug":"折腾","permalink":"https://fairyeye.github.io/categories/%E6%8A%98%E8%85%BE/"}],"tags":[{"name":"软件","slug":"软件","permalink":"https://fairyeye.github.io/tags/%E8%BD%AF%E4%BB%B6/"},{"name":"dairy","slug":"dairy","permalink":"https://fairyeye.github.io/tags/dairy/"},{"name":"utils","slug":"utils","permalink":"https://fairyeye.github.io/tags/utils/"},{"name":"数据结构","slug":"数据结构","permalink":"https://fairyeye.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"mysql","slug":"mysql","permalink":"https://fairyeye.github.io/tags/mysql/"},{"name":"demo","slug":"demo","permalink":"https://fairyeye.github.io/tags/demo/"},{"name":"系统集成","slug":"系统集成","permalink":"https://fairyeye.github.io/tags/%E7%B3%BB%E7%BB%9F%E9%9B%86%E6%88%90/"},{"name":"Java","slug":"Java","permalink":"https://fairyeye.github.io/tags/Java/"},{"name":"数据库","slug":"数据库","permalink":"https://fairyeye.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"store","slug":"store","permalink":"https://fairyeye.github.io/tags/store/"},{"name":"basic","slug":"basic","permalink":"https://fairyeye.github.io/tags/basic/"}]}