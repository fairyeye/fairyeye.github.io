{
    "version": "https://jsonfeed.org/version/1",
    "title": "人生当苦, 良人当归",
    "subtitle": "",
    "icon": "https://fairyeye.github.io/images/favicon.ico",
    "description": "我不过像你像他像那野草野花。",
    "home_page_url": "https://fairyeye.github.io",
    "items": [
        {
            "id": "https://fairyeye.github.io/2024/03/20/AA/",
            "url": "https://fairyeye.github.io/2024/03/20/AA/",
            "title": "",
            "date_published": "2024-03-20T08:06:47.521Z",
            "content_html": "<h1 id=\"jdbc\"><a class=\"anchor\" href=\"#jdbc\">#</a> JDBC</h1>\n",
            "tags": []
        },
        {
            "id": "https://fairyeye.github.io/2024/03/13/Spring%20Boot%20Admin/",
            "url": "https://fairyeye.github.io/2024/03/13/Spring%20Boot%20Admin/",
            "title": "Spring Boot Admin",
            "date_published": "2024-03-13T09:11:02.629Z",
            "content_html": "<h3 id=\"服务端配置\"><a class=\"anchor\" href=\"#服务端配置\">#</a> 服务端配置</h3>\n<p>新建一个 SpringBoot 项目</p>\n<p><code>pom.xml</code></p>\n<p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--如果不需要鉴权 可以不加Security依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>de.codecentric<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><code>application.properties</code></p>\n<p><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 端口</span></span><br><span class=\"line\"><span class=\"attr\">server.port</span>=<span class=\"string\">20000  </span></span><br><span class=\"line\"><span class=\"attr\">server.servlet.context-path</span>=<span class=\"string\">/admin</span></span><br></pre></td></tr></table></figure></p>\n<p>启动类加上  <code>@EnableAdminServer</code>  注解</p>\n<p>如果不需要鉴权  到这里就结束了，运行项目，然后访问 <code>localhost:20000/admin</code>  就可以看到 SBA 的 UI</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2024/03/13/b436a3855a95e5cb.png\" alt=\"\" /></p>\n<h4 id=\"非必须项\"><a class=\"anchor\" href=\"#非必须项\">#</a> 非必须项</h4>\n<p>引入 Security，开启认证登录，下面是一个简单的样例</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecuritySecureConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebSecurityConfigurerAdapter</span> &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AdminServerProperties adminServer;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">SecuritySecureConfig</span><span class=\"params\">(AdminServerProperties adminServer)</span> &#123;  </span><br><span class=\"line\">        <span class=\"built_in\">this</span>.adminServer = adminServer;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;  </span><br><span class=\"line\">    <span class=\"type\">SavedRequestAwareAuthenticationSuccessHandler</span> <span class=\"variable\">successHandler</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SavedRequestAwareAuthenticationSuccessHandler</span>();  </span><br><span class=\"line\">    successHandler.setTargetUrlParameter(<span class=\"string\">&quot;redirectTo&quot;</span>);  </span><br><span class=\"line\">    successHandler.setDefaultTargetUrl(<span class=\"built_in\">this</span>.adminServer.path(<span class=\"string\">&quot;/&quot;</span>));  </span><br><span class=\"line\">  </span><br><span class=\"line\">    http.authorizeRequests()  </span><br><span class=\"line\">      .antMatchers(<span class=\"built_in\">this</span>.adminServer.path(<span class=\"string\">&quot;/assets/**&quot;</span>)).permitAll()   </span><br><span class=\"line\">      .antMatchers(<span class=\"built_in\">this</span>.adminServer.path(<span class=\"string\">&quot;/login&quot;</span>)).permitAll()  </span><br><span class=\"line\">      .anyRequest().authenticated()   </span><br><span class=\"line\">      .and()  </span><br><span class=\"line\">    .formLogin().loginPage(<span class=\"built_in\">this</span>.adminServer.path(<span class=\"string\">&quot;/login&quot;</span>)).successHandler(successHandler).and()   </span><br><span class=\"line\">    .logout().logoutUrl(<span class=\"built_in\">this</span>.adminServer.path(<span class=\"string\">&quot;/logout&quot;</span>)).and()  </span><br><span class=\"line\">    .httpBasic().and()   </span><br><span class=\"line\">    .csrf()  </span><br><span class=\"line\">      .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())  </span><br><span class=\"line\">      .ignoringRequestMatchers(  </span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">AntPathRequestMatcher</span>(<span class=\"built_in\">this</span>.adminServer.path(<span class=\"string\">&quot;/instances&quot;</span>), HttpMethod.POST.toString()),  </span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">AntPathRequestMatcher</span>(<span class=\"built_in\">this</span>.adminServer.path(<span class=\"string\">&quot;/instances/*&quot;</span>), HttpMethod.DELETE.toString()),    </span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">AntPathRequestMatcher</span>(<span class=\"built_in\">this</span>.adminServer.path(<span class=\"string\">&quot;/actuator/**&quot;</span>))    </span><br><span class=\"line\">      )  </span><br><span class=\"line\">    .and()  </span><br><span class=\"line\">    .rememberMe().key(UUID.randomUUID().toString()).tokenValiditySeconds(<span class=\"number\">1209600</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(AuthenticationManagerBuilder auth)</span> <span class=\"keyword\">throws</span> Exception &#123;  </span><br><span class=\"line\">        auth.inMemoryAuthentication().withUser(<span class=\"string\">&quot;user&quot;</span>).password(<span class=\"string\">&quot;&#123;noop&#125;passwd&quot;</span>).roles(<span class=\"string\">&quot;USER&quot;</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行项目，然后访问 <code>localhost:20000/admin</code>  需要登录</p>\n",
            "tags": [
                "java",
                "日常记录"
            ]
        },
        {
            "id": "https://fairyeye.github.io/2024/02/22/security/",
            "url": "https://fairyeye.github.io/2024/02/22/security/",
            "title": "security",
            "date_published": "2024-02-22T11:26:20.691Z",
            "content_html": "<h2 id=\"1\"><a class=\"anchor\" href=\"#1\">#</a> 1.</h2>\n<p>引入依赖：<br />\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>一些必要的配置：</p>\n<p>新建一个配置类  <code>WebSecurityConfig</code>  继承 <code>WebSecurityConfigurerAdapter</code>  重写 <code>configure</code>  方法。（<strong>重要</strong>）</p>\n<ul>\n<li>是 SpringSecurity 的核心</li>\n</ul>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebSecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebSecurityConfigurerAdapter</span> &#123;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;  </span><br><span class=\"line\">        <span class=\"comment\">// 开启登录  </span></span><br><span class=\"line\">        http.formLogin();  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>新建一个 controller 用来测试登录</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhanghuapeng  </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2024/1/28  </span></span><br><span class=\"line\"><span class=\"comment\"> */</span><span class=\"meta\">@RestController</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">     * 获取当前登录用户信息  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/user-info&quot;)</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Authentication <span class=\"title function_\">getUserInfo</span><span class=\"params\">(Authentication authentication)</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> authentication;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br />\n 启动项目：终端会有这么一段日志<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Using generated security password: f429b724-db54-4a56-ae82-7ebb63f22d69</span><br></pre></td></tr></table></figure><br />\n 表示：没有设置用户信息，给出了一个默认用户及密码，默认用户 <code>user</code></p>\n<p>登录之后，默认会跳转到 Index 页面，但是目前没有这个页面，所以会报错。<br />\n暂不处理。</p>\n<p>访问： <code>http://localhost:8080/user-info</code> <br />\n 返回结果：<br />\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;credentials&quot;</span><span class=\"punctuation\">:</span><span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;details&quot;</span><span class=\"punctuation\">:</span><span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;authenticated&quot;</span><span class=\"punctuation\">:</span><span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;authorities&quot;</span><span class=\"punctuation\">:</span><span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;principal&quot;</span><span class=\"punctuation\">:</span><span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;not login!&quot;</span><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>可以通过 <code>http://localhost:8080/logount</code>  退出登录</p>\n<p>之后在访问 user-info 接口，发现不在包含用户信息</p>\n<h2 id=\"2\"><a class=\"anchor\" href=\"#2\">#</a> 2.</h2>\n<p>实际使用中 没有登录的用户是不能访问接口的</p>\n<p>修改 <code>WebSecurityConfig</code> <br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration  </span><br><span class=\"line\">public class WebSecurityConfig extends WebSecurityConfigurerAdapter &#123;  </span><br><span class=\"line\">    @Override  </span><br><span class=\"line\">    protected void configure(HttpSecurity http) throws Exception &#123;  </span><br><span class=\"line\">        // 开启登录  </span><br><span class=\"line\">        http.formLogin();  </span><br><span class=\"line\">        // 设置访问权限  任何请求均需要认证（登录成功）才能访问  </span><br><span class=\"line\">http.authorizeRequests().anyRequest().authenticated();    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>重启项目<br />\n此时，访问： <code>http://localhost:8080/user-info</code> <br />\n 发现会直接跳转到登录页面</p>\n<h2 id=\"增加一些细节\"><a class=\"anchor\" href=\"#增加一些细节\">#</a> 增加一些细节</h2>\n<h3 id=\"依赖\"><a class=\"anchor\" href=\"#依赖\">#</a> 依赖</h3>\n<p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Web --&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span>            <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span>                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span>        <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Undertow --&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Security --&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Test --&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"comment\">&lt;!--lombok--&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"comment\">&lt;!--mybatis--&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>runtime<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span>    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 添加jwt的依赖 --&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.auth0<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>java-jwt<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.11.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"comment\">&lt;!--Redis--&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"配置\"><a class=\"anchor\" href=\"#配置\">#</a> 配置</h3>\n<p><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span>  </span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"attr\">spring:</span>  </span><br><span class=\"line\">  <span class=\"attr\">output:</span>  </span><br><span class=\"line\">    <span class=\"attr\">ansi:</span>  </span><br><span class=\"line\">      <span class=\"attr\">enabled:</span> <span class=\"string\">always</span>   <span class=\"comment\"># 强制启用 ansi 输出  </span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span>  </span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span>  </span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://127.0.0.1:3306/security_study?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span>  </span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span>  </span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">12345678</span>  </span><br><span class=\"line\">  <span class=\"attr\">redis:</span>  </span><br><span class=\"line\">      <span class=\"attr\">host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>  </span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">6379</span>  </span><br><span class=\"line\">      <span class=\"attr\">database:</span> <span class=\"number\">1</span>  </span><br><span class=\"line\"><span class=\"attr\">jwt:</span>  </span><br><span class=\"line\">    <span class=\"attr\">secretKey:</span> <span class=\"string\">a3e4cd2d191a017bf49dbdf49a4c62b1fb292c5b112d6a51bdc4e2ea5052e816</span>  </span><br><span class=\"line\">    <span class=\"attr\">expiration:</span> <span class=\"number\">3600</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"attr\">logging:</span>  </span><br><span class=\"line\">  <span class=\"attr\">pattern:</span>  </span><br><span class=\"line\">    <span class=\"comment\"># 控制台日志格式  </span></span><br><span class=\"line\">    <span class=\"attr\">console:</span> <span class=\"string\">&quot;%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr(%5p) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; : %msg%n&quot;</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"attr\">mybatis:</span>  </span><br><span class=\"line\">  <span class=\"attr\">type-aliases-package:</span> <span class=\"string\">com.li.entity</span>  </span><br><span class=\"line\">  <span class=\"attr\">configuration:</span>  </span><br><span class=\"line\">    <span class=\"attr\">map-underscore-to-camel-case:</span> <span class=\"literal\">true</span>  </span><br><span class=\"line\">    <span class=\"attr\">log-impl:</span> <span class=\"string\">org.apache.ibatis.logging.stdout.StdOutImpl</span>  </span><br><span class=\"line\">  <span class=\"attr\">mapper-locations:</span> <span class=\"string\">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>\n<p>在 <code>com.li</code>  新建 <code>utils</code>  包，新建 <code>JwtUtils</code> <br />\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>  </span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JwtUtils</span> &#123;  </span><br><span class=\"line\">    <span class=\"comment\">//算法密钥  </span></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;jwt.secretKey&#125;&quot;)</span>  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String jwtSecretKey;  </span><br><span class=\"line\">    <span class=\"comment\">// 过期时间  </span></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;jwt.expiration&#125;&quot;)</span>  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">long</span> expiration;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">     * 创建jwt  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> userInfo 用户信息  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> authList 用户权限列表  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 返回jwt（JSON WEB TOKEN）  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">createToken</span><span class=\"params\">(String userInfo, List&lt;String&gt; authList)</span> &#123;  </span><br><span class=\"line\">        <span class=\"comment\">//创建时间  </span></span><br><span class=\"line\">        <span class=\"type\">Date</span> <span class=\"variable\">currentTime</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();  </span><br><span class=\"line\">        <span class=\"comment\">//过期时间，5分钟后过期  </span></span><br><span class=\"line\">        <span class=\"type\">Date</span> <span class=\"variable\">expireTime</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(currentTime.getTime() + expiration);  </span><br><span class=\"line\">        <span class=\"comment\">//jwt 的header信息  </span></span><br><span class=\"line\">        Map&lt;String, Object&gt; headerClaims = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();  </span><br><span class=\"line\">        headerClaims.put(<span class=\"string\">&quot;type&quot;</span>, <span class=\"string\">&quot;JWT&quot;</span>);  </span><br><span class=\"line\">        headerClaims.put(<span class=\"string\">&quot;alg&quot;</span>, <span class=\"string\">&quot;HS256&quot;</span>);  </span><br><span class=\"line\">        <span class=\"comment\">//创建jwt  </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> JWT.create()  </span><br><span class=\"line\">                .withHeader(headerClaims) <span class=\"comment\">// 头部  </span></span><br><span class=\"line\">                .withIssuedAt(currentTime) <span class=\"comment\">//已注册声明：签发日期，发行日期  </span></span><br><span class=\"line\">                .withExpiresAt(expireTime) <span class=\"comment\">//已注册声明 过期时间  </span></span><br><span class=\"line\">                .withIssuer(<span class=\"string\">&quot;thomas&quot;</span>)  <span class=\"comment\">//已注册声明，签发人  </span></span><br><span class=\"line\">                .withClaim(<span class=\"string\">&quot;userInfo&quot;</span>, userInfo) <span class=\"comment\">//私有声明，可以自己定义  </span></span><br><span class=\"line\">                .withClaim(<span class=\"string\">&quot;authList&quot;</span>, authList) <span class=\"comment\">//私有声明，可以自定义  </span></span><br><span class=\"line\">                .sign(Algorithm.HMAC256(jwtSecretKey)); <span class=\"comment\">// 签名，使用HS256算法签名，并使用密钥  </span></span><br><span class=\"line\"><span class=\"comment\">//        HS256是一种对称算法，这意味着只有一个密钥，在双方之间共享。 使用相同的密钥生成签名并对其进行验证。 应特别注意钥匙是否保密。  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">     * 验证jwt的签名，简称验签  </span></span><br><span class=\"line\"><span class=\"comment\">     *  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> token 需要验签的jwt  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 验签结果  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">verifyToken</span><span class=\"params\">(String token)</span> &#123;  </span><br><span class=\"line\">        <span class=\"comment\">//获取验签类对象  </span></span><br><span class=\"line\">        <span class=\"type\">JWTVerifier</span> <span class=\"variable\">jwtVerifier</span> <span class=\"operator\">=</span> JWT.require(Algorithm.HMAC256(jwtSecretKey)).build();  </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">            <span class=\"comment\">//验签，如果不报错，则说明jwt是合法的，而且也没有过期  </span></span><br><span class=\"line\">            <span class=\"type\">DecodedJWT</span> <span class=\"variable\">decodedJWT</span> <span class=\"operator\">=</span> jwtVerifier.verify(token);  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (JWTVerificationException e) &#123;  </span><br><span class=\"line\">            <span class=\"comment\">//如果报错说明jwt 为非法的，或者已过期（已过期也属于非法的）  </span></span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;验签失败：&#123;&#125;&quot;</span>, token);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">     * 获取用户id  </span></span><br><span class=\"line\"><span class=\"comment\">     *     * <span class=\"doctag\">@param</span> token jwt  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 用户id  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>    <span class=\"keyword\">public</span> String <span class=\"title function_\">getUserInfo</span><span class=\"params\">(String token)</span> &#123;  </span><br><span class=\"line\">        <span class=\"comment\">//创建jwt验签对象  </span></span><br><span class=\"line\">        <span class=\"type\">JWTVerifier</span> <span class=\"variable\">jwtVerifier</span> <span class=\"operator\">=</span> JWT.require(Algorithm.HMAC256(jwtSecretKey)).build();  </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">            <span class=\"comment\">//验签  </span></span><br><span class=\"line\">            <span class=\"type\">DecodedJWT</span> <span class=\"variable\">decodedJWT</span> <span class=\"operator\">=</span> jwtVerifier.verify(token);  </span><br><span class=\"line\">            <span class=\"comment\">//获取payload中userInfo的值，并返回  </span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> decodedJWT.getClaim(<span class=\"string\">&quot;userInfo&quot;</span>).asString();  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (JWTVerificationException e) &#123;  </span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;getUserInfo error&quot;</span>, e);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">     * 获取用户权限  </span></span><br><span class=\"line\"><span class=\"comment\">     *  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> token  </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span>  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">getUserAuth</span><span class=\"params\">(String token)</span> &#123;  </span><br><span class=\"line\">        <span class=\"comment\">//创建jwt验签对象  </span></span><br><span class=\"line\">        <span class=\"type\">JWTVerifier</span> <span class=\"variable\">jwtVerifier</span> <span class=\"operator\">=</span> JWT.require(Algorithm.HMAC256(jwtSecretKey)).build();  </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">            <span class=\"comment\">//验签  </span></span><br><span class=\"line\">            <span class=\"type\">DecodedJWT</span> <span class=\"variable\">decodedJWT</span> <span class=\"operator\">=</span> jwtVerifier.verify(token);  </span><br><span class=\"line\">            <span class=\"comment\">//获取payload中的自定义数据authList（权限列表），并返回  </span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> decodedJWT.getClaim(<span class=\"string\">&quot;authList&quot;</span>).asList(String.class);  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (JWTVerificationException e) &#123;  </span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;getUserAuth error&quot;</span>, e);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>在 <code>com.li</code>  新建 <code>filter</code>  包，新建 <code>SaySomethingJWTFilter</code> <br />\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhanghuapeng  </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2024/2/22  </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@desc</span> 一次性请求过滤器  </span></span><br><span class=\"line\"><span class=\"comment\"> */</span>  </span><br><span class=\"line\"><span class=\"meta\">@Component</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SaySomethingJWTFilter</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">OncePerRequestFilter</span> &#123;  </span><br><span class=\"line\">    <span class=\"meta\">@Resource</span>  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> ObjectMapper objectMapper;  </span><br><span class=\"line\">    <span class=\"meta\">@Resource</span>  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> StringRedisTemplate stringRedisTemplate;  </span><br><span class=\"line\">    <span class=\"meta\">@Resource</span>  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> JwtUtils jwtUtils;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilterInternal</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;  </span><br><span class=\"line\">        <span class=\"comment\">//获取请求uri  </span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">requestURI</span> <span class=\"operator\">=</span> request.getRequestURI();  </span><br><span class=\"line\">        <span class=\"comment\">// 如果是登录页面，放行  </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (requestURI.equals(<span class=\"string\">&quot;/login&quot;</span>)) &#123;  </span><br><span class=\"line\">            filterChain.doFilter(request, response);  </span><br><span class=\"line\">            <span class=\"keyword\">return</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"comment\">//获取请求头中的Authorization  </span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">authorization</span> <span class=\"operator\">=</span> request.getHeader(<span class=\"string\">&quot;Authorization&quot;</span>);  </span><br><span class=\"line\">        <span class=\"comment\">//如果Authorization为空，那么不允许用户访问，直接返回  </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.hasText(authorization)) &#123;  </span><br><span class=\"line\">            printFront(response, <span class=\"string\">&quot;没有登录！&quot;</span>);  </span><br><span class=\"line\">            <span class=\"keyword\">return</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">//Authorization 去掉头部的Bearer 信息，获取token值  </span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">jwtToken</span> <span class=\"operator\">=</span> authorization.replace(<span class=\"string\">&quot;Bearer &quot;</span>, <span class=\"string\">&quot;&quot;</span>);  </span><br><span class=\"line\">        <span class=\"comment\">//验签  </span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">verifyTokenResult</span> <span class=\"operator\">=</span> jwtUtils.verifyToken(jwtToken);  </span><br><span class=\"line\">        <span class=\"comment\">//验签不成功  </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!verifyTokenResult) &#123;  </span><br><span class=\"line\">            printFront(response, <span class=\"string\">&quot;jwtToken 已过期&quot;</span>);  </span><br><span class=\"line\">            <span class=\"keyword\">return</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">//从payload中获取userInfo  </span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">userInfo</span> <span class=\"operator\">=</span> jwtUtils.getUserInfo(jwtToken);  </span><br><span class=\"line\">        <span class=\"comment\">//从payload中获取授权列表  </span></span><br><span class=\"line\">        List&lt;String&gt; userAuth = jwtUtils.getUserAuth(jwtToken);  </span><br><span class=\"line\">        <span class=\"comment\">//创建登录用户  </span></span><br><span class=\"line\">        <span class=\"type\">SysUser</span> <span class=\"variable\">sysUser</span> <span class=\"operator\">=</span> objectMapper.readValue(userInfo, SysUser.class);  </span><br><span class=\"line\">        <span class=\"type\">SecurityUser</span> <span class=\"variable\">securityUser</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SecurityUser</span>(sysUser);  </span><br><span class=\"line\">          </span><br><span class=\"line\">        <span class=\"comment\">//设置权限  </span></span><br><span class=\"line\">        List&lt;SimpleGrantedAuthority&gt; authList = userAuth.stream().map(SimpleGrantedAuthority::<span class=\"keyword\">new</span>).collect(Collectors.toList());  </span><br><span class=\"line\">        securityUser.setAuthorities(authList);  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"type\">UsernamePasswordAuthenticationToken</span> <span class=\"variable\">usernamePasswordAuthenticationToke</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UsernamePasswordAuthenticationToken</span>(securityUser  </span><br><span class=\"line\">                , <span class=\"literal\">null</span>, authList);  </span><br><span class=\"line\">        <span class=\"comment\">//通过安全上下文设置认证信息  </span></span><br><span class=\"line\">        SecurityContextHolder.getContext().setAuthentication(usernamePasswordAuthenticationToke);  </span><br><span class=\"line\">        <span class=\"comment\">//继续访问相应的rul等  </span></span><br><span class=\"line\">        filterChain.doFilter(request, response);  </span><br><span class=\"line\">  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printFront</span><span class=\"params\">(HttpServletResponse response, String message)</span> <span class=\"keyword\">throws</span> IOException &#123;  </span><br><span class=\"line\">        response.setCharacterEncoding(<span class=\"string\">&quot;UTF-8&quot;</span>);  </span><br><span class=\"line\">        response.setContentType(<span class=\"string\">&quot;application/json;charset=utf-8&quot;</span>);  </span><br><span class=\"line\">        <span class=\"type\">PrintWriter</span> <span class=\"variable\">writer</span> <span class=\"operator\">=</span> response.getWriter();  </span><br><span class=\"line\">        <span class=\"type\">HttpResult</span> <span class=\"variable\">httpResult</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpResult</span>();  </span><br><span class=\"line\">        httpResult.setCode(-<span class=\"number\">1</span>);  </span><br><span class=\"line\">        httpResult.setMsg(message);  </span><br><span class=\"line\">  </span><br><span class=\"line\">        writer.print(objectMapper.writeValueAsString(httpResult));  </span><br><span class=\"line\">        writer.flush();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>调整 <code>SecurityConfig</code> , 将过滤器添加到配置中<br />\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Resource</span>  </span><br><span class=\"line\"><span class=\"keyword\">private</span> SaySTokenFilter saySTokenFilter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span>  </span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;  </span><br><span class=\"line\">  <span class=\"comment\">// 增加配置</span></span><br><span class=\"line\">    http.addFilterBefore(saySomethingJWTFilter, UsernamePasswordAuthenticationFilter.class);  </span><br><span class=\"line\"><span class=\"comment\">// ...原来的配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</li>\n</ol>\n<h5 id=\"调试\"><a class=\"anchor\" href=\"#调试\">#</a> 调试</h5>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 不携带token访问http://localhost:8080/user-info</span><br><span class=\"line\">返回：&#123;&quot;code&quot;:-1,&quot;msg&quot;:&quot;没有登录！&quot;,&quot;data&quot;:null&#125;</span><br><span class=\"line\"># 携带错误token访问http://localhost:8080/user-info</span><br><span class=\"line\">返回：&#123;&quot;code&quot;:-1,&quot;msg&quot;:&quot;jwtToken 已过期&quot;,&quot;data&quot;:null&#125;</span><br></pre></td></tr></table></figure></p>\n<ol start=\"4\">\n<li>在 <code>com.li.config</code> , 新建 <code>SaySAuthenticationSuccessHandler</code></li>\n</ol>\n<h4 id=\"设置权限\"><a class=\"anchor\" href=\"#设置权限\">#</a> 设置权限</h4>\n<p><strong>在 loadUserByUsername 中获取权限，并设置到 SecurityUser 中</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// com.li.service.impl.UserServiceImpl</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">SecurityUser</span> <span class=\"variable\">securityUser</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SecurityUser</span>(sysUser);  </span><br><span class=\"line\"><span class=\"comment\">// 获取权限信息  </span></span><br><span class=\"line\">List&lt;String&gt; authList = sysMenuDao.queryPermissionByUserId(sysUser.getUserId());  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (!CollectionUtils.isEmpty(authList)) &#123;  </span><br><span class=\"line\">    List&lt;SimpleGrantedAuthority&gt; authorities = authList.stream().map(SimpleGrantedAuthority::<span class=\"keyword\">new</span>).collect(toList());  </span><br><span class=\"line\">    <span class=\"comment\">// 设置权限  </span></span><br><span class=\"line\">    securityUser.setAuthorities(authorities);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">return</span> securityUser;</span><br></pre></td></tr></table></figure></p>\n<p>在 SaySAuthenticationSuccessHandler.onAuthenticationSuccess 中，生成 Token 时，可以将权限信息一起放入 Token 中。</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; authList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();  </span><br><span class=\"line\"><span class=\"comment\">// 获取权限  </span></span><br><span class=\"line\">List&lt;SimpleGrantedAuthority&gt; authorities = (List&lt;SimpleGrantedAuthority&gt;) securityUser.getAuthorities();  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (!CollectionUtils.isEmpty(authorities)) &#123;  </span><br><span class=\"line\">    <span class=\"comment\">// 转成String 用于生成Token  </span></span><br><span class=\"line\">    authList = authorities.stream().map(SimpleGrantedAuthority::getAuthority).collect(Collectors.toList());  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建Token  增加authList参数</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">token</span> <span class=\"operator\">=</span> saySJwtUtils.createToken(userInfo, authList);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"注销处理\"><a class=\"anchor\" href=\"#注销处理\">#</a> 注销处理</h4>\n<p><strong>Jwt 本质上是一个字符串，无法手动将其过期，也就是说，即使手动退出登录，对于 Token 来说，还是一个有效的 Token，可以通过接入 Redis 来解决这一问题</strong></p>\n<ol>\n<li>\n<p>登录成功时，将 Token 写入 Redis<br />\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SaySAuthenticationSuccessHandler</span></span><br><span class=\"line\"><span class=\"comment\">// 设置过期时间  </span></span><br><span class=\"line\"><span class=\"meta\">@Value(&quot;$&#123;jwt.expiration&#125;&quot;)</span>  </span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">long</span> expiration;</span><br><span class=\"line\"><span class=\"comment\">// 引入StringRedisTemplate</span></span><br><span class=\"line\"><span class=\"meta\">@Resource</span>  </span><br><span class=\"line\"><span class=\"keyword\">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在创建Token之后，将Token存到Redis中</span></span><br><span class=\"line\"></span><br><span class=\"line\">onAuthenticationSuccess()&#123;</span><br><span class=\"line\"><span class=\"comment\">// 创建Token  </span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">token</span> <span class=\"operator\">=</span> saySJwtUtils.createToken(userInfo, authList);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写入Redis  </span></span><br><span class=\"line\">stringRedisTemplate.opsForValue().set(<span class=\"string\">&quot;login_token:&quot;</span> + token, objectMapper.writeValueAsString(authentication), expiration, TimeUnit.MILLISECONDS);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>校验 Token 时，先验签，再去 Redis 中判断 Token 是否还存在</p>\n</li>\n</ol>\n<ul>\n<li>如果验签成功，但是 Redis 中不存在，说明 Token 被手动过期了<br />\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doFilterInternal()&#123;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// 从Redis获取token并校验  </span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">tokenInRedis</span> <span class=\"operator\">=</span> stringRedisTemplate.opsForValue().get(<span class=\"string\">&quot;login_token:&quot;</span> + jwtToken);  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (!StringUtils.hasText(tokenInRedis)) &#123;  </span><br><span class=\"line\">    printFront(response, <span class=\"string\">&quot;用户已退出，请重新登录&quot;</span>);  </span><br><span class=\"line\">    <span class=\"keyword\">return</span>;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>在 <code>com.li.config</code> ，新建 <code>SaysLogoutSuccessHandler</code> <br />\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\"> * 退出成功处理器，用户退出成功后，执行此处理器  </span></span><br><span class=\"line\"><span class=\"comment\"> */</span>  </span><br><span class=\"line\"><span class=\"meta\">@Component</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SaysLogoutSuccessHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">LogoutSuccessHandler</span> &#123;  </span><br><span class=\"line\">    <span class=\"comment\">//使用此工具类的对象进行序列化操作  </span></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span>  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> ObjectMapper objectMapper;  </span><br><span class=\"line\">    <span class=\"meta\">@Resource</span>  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> StringRedisTemplate stringRedisTemplate;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onLogoutSuccess</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class=\"keyword\">throws</span> IOException, ServletException &#123;  </span><br><span class=\"line\">        <span class=\"comment\">//从请求头中获取Authorization信息  </span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">authorization</span> <span class=\"operator\">=</span> request.getHeader(<span class=\"string\">&quot;Authorization&quot;</span>);  </span><br><span class=\"line\">        <span class=\"comment\">//如果授权信息为空，返回前端  </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> == authorization) &#123;  </span><br><span class=\"line\">            response.setCharacterEncoding(<span class=\"string\">&quot;UTF-8&quot;</span>);  </span><br><span class=\"line\">            response.setContentType(<span class=\"string\">&quot;application/json;charset=utf-8&quot;</span>);  </span><br><span class=\"line\">            <span class=\"type\">HttpResult</span> <span class=\"variable\">httpResult</span> <span class=\"operator\">=</span> HttpResult.builder().code(-<span class=\"number\">1</span>).msg(<span class=\"string\">&quot;token不能为空&quot;</span>).build();  </span><br><span class=\"line\">            <span class=\"type\">PrintWriter</span> <span class=\"variable\">writer</span> <span class=\"operator\">=</span> response.getWriter();  </span><br><span class=\"line\">            writer.write(objectMapper.writeValueAsString(httpResult));  </span><br><span class=\"line\">            writer.flush();  </span><br><span class=\"line\">            <span class=\"keyword\">return</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"comment\">//如果Authorization信息不为空，去掉头部的Bearer字符串  </span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">token</span> <span class=\"operator\">=</span> authorization.replace(<span class=\"string\">&quot;Bearer &quot;</span>, <span class=\"string\">&quot;&quot;</span>);  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">//redis中删除token，这是关键点  </span></span><br><span class=\"line\">        stringRedisTemplate.delete(<span class=\"string\">&quot;login_token:&quot;</span> + token);  </span><br><span class=\"line\">  </span><br><span class=\"line\">        response.setCharacterEncoding(<span class=\"string\">&quot;UTF-8&quot;</span>);  </span><br><span class=\"line\">        response.setContentType(<span class=\"string\">&quot;application/json;charset=utf-8&quot;</span>);  </span><br><span class=\"line\">        <span class=\"type\">HttpResult</span> <span class=\"variable\">httpResult</span> <span class=\"operator\">=</span> HttpResult.builder().code(<span class=\"number\">200</span>).msg(<span class=\"string\">&quot;退出成功&quot;</span>).build();  </span><br><span class=\"line\">        <span class=\"type\">PrintWriter</span> <span class=\"variable\">writer</span> <span class=\"operator\">=</span> response.getWriter();  </span><br><span class=\"line\">        writer.write(objectMapper.writeValueAsString(httpResult));  </span><br><span class=\"line\">        writer.flush();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>调整 <code>SecurityConfig</code> <br />\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Resource</span>  </span><br><span class=\"line\"><span class=\"keyword\">private</span> SaysLogoutSuccessHandler saysLogoutSuccessHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">configure()&#123;</span><br><span class=\"line\">http.logout().logoutSuccessHandler(saysLogoutSuccessHandler);</span><br><span class=\"line\"><span class=\"comment\">// 禁用跨域请求保护 要不然logout不能访问(目前体现是弹出了确认退出登录的确认框  </span></span><br><span class=\"line\">http.csrf().disable();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider#authenticate</code> <br />\n <code>org.springframework.security.authentication.dao.DaoAuthenticationProvider#retrieveUser</code></p>\n<p><code>org.springframework.security.authentication.dao.DaoAuthenticationProvider#additionalAuthenticationChecks</code></p>\n",
            "tags": []
        },
        {
            "id": "https://fairyeye.github.io/2024/01/19/Leetcode/",
            "url": "https://fairyeye.github.io/2024/01/19/Leetcode/",
            "title": "",
            "date_published": "2024-01-19T01:20:19.000Z",
            "content_html": "<h3 id=\"2171-拿出最少得魔法豆\"><a class=\"anchor\" href=\"#2171-拿出最少得魔法豆\">#</a> 2171 拿出最少得魔法豆</h3>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2024/01/19/2f204f7d3bbeef18.png\" alt=\"\" /></p>\n",
            "tags": []
        },
        {
            "id": "https://fairyeye.github.io/2024/01/03/%E6%95%B0%E7%BB%84%E4%B8%8E%E9%93%BE%E8%A1%A8/",
            "url": "https://fairyeye.github.io/2024/01/03/%E6%95%B0%E7%BB%84%E4%B8%8E%E9%93%BE%E8%A1%A8/",
            "title": "",
            "date_published": "2024-01-03T02:14:03.735Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://fairyeye.github.io/2023/12/25/Algo/",
            "url": "https://fairyeye.github.io/2023/12/25/Algo/",
            "title": "Hello Algo",
            "date_published": "2023-12-25T08:04:09.000Z",
            "content_html": "<p>二分搜索、插入排序、贪心</p>\n<p>迭代、递归</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># n &gt;= 1 时</span><br><span class=\"line\">T(n) = 3+2n &lt;= 3n+2n = 5n</span><br><span class=\"line\">T(n) &lt;= c * f(n)</span><br><span class=\"line\">T(n) = O(f(n))</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"kmp\"><a class=\"anchor\" href=\"#kmp\">#</a> KMP</h3>\n<h4 id=\"求next\"><a class=\"anchor\" href=\"#求next\">#</a> 求 <code>next[]</code></h4>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">next[]：找出一个以0下标(必须0下标)开始，以j-1下标结束的两个相同子串</span><br><span class=\"line\">=&gt;next[j-1] =&gt; k-1</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2023/12/28/114225dc0dc58919.png\" alt=\"\" /></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">哈哈               k        x     j            </span><br><span class=\"line\">下标k       0   1  2  3  4  5  6  7  8  9  10 11 12 13</span><br><span class=\"line\">数组p       a   b  a  b  c  a  b  c  d  a  b  c  d  e</span><br><span class=\"line\">next数组    -1  0  0  1  2  0  1  2  0  0  1  2  0  0</span><br><span class=\"line\"></span><br><span class=\"line\">j++</span><br><span class=\"line\">下标0 = a</span><br><span class=\"line\">当 j = 3:</span><br><span class=\"line\">\t下标j-1=2 -&gt; a     可以找到 a、aba、a  但是aba不满足条件     =&gt;  1</span><br><span class=\"line\">当 j = 4:</span><br><span class=\"line\">\t下标j-1=3 -&gt; b     可以找到 ab、abab   但是abab不满足条件   =&gt;  2</span><br><span class=\"line\">当 j = 5:</span><br><span class=\"line\">\t下标j-1=4 -&gt; c     可以找到 ababc   不满足条件  =&gt;  0</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">哈哈               k        x     j            </span><br><span class=\"line\">下标k       0   1  2  3  4  5  6  7  8  9  10 11 12 13</span><br><span class=\"line\">数组p       a   b  a  b  c  a  b  a  d  a  b  c  d  e</span><br><span class=\"line\">next数组    -1  0  0  1  2  0  1  2  3  0  1  2  0  0</span><br><span class=\"line\"></span><br><span class=\"line\">已知条件：</span><br><span class=\"line\">以0下标(必须0下标)开始，以j-1下标结束的两个相同子串</span><br><span class=\"line\">p[0]..p[k-1] = p[x]..p[j-1]</span><br><span class=\"line\">得出：</span><br><span class=\"line\">=&gt; k-1-0 = j-1-x </span><br><span class=\"line\">=&gt; k = j-x</span><br><span class=\"line\">=&gt; x = j-k</span><br><span class=\"line\">==&gt; p[0]..p[k-1] = p[j-k]..p[j-1]</span><br><span class=\"line\">假设：p[k] = p[j]</span><br><span class=\"line\">=&gt; p[0]..p[k] = p[j-k]..p[j]</span><br><span class=\"line\">所以 next[j] = k  </span><br><span class=\"line\"></span><br><span class=\"line\">k-1 = next[j-1]</span><br><span class=\"line\">p[0]..p[k-1] = p[x]..p[j-1]</span><br><span class=\"line\">假设：p[k] = p[j]</span><br><span class=\"line\">p[0]..p[k-1]p[k] = p[x]..p[j-1]p[j]</span><br><span class=\"line\">p[0]..p[k] = p[j-k]..p[j]</span><br><span class=\"line\">k = next[j]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h3>\n<p>优点：</p>\n<ul>\n<li>空间效率高</li>\n<li>支持随机访问</li>\n<li>缓存局部性？<br />\n缺点：</li>\n<li>插入与删除效率低</li>\n<li>长度不可变</li>\n<li>空间浪费<br />\n典型应用：</li>\n<li>随机访问</li>\n<li>排序、搜索</li>\n<li>查找表</li>\n<li>机器学习</li>\n<li>数据结构实现</li>\n</ul>\n<h3 id=\"链表\"><a class=\"anchor\" href=\"#链表\">#</a> 链表</h3>\n<h3 id=\"数组-vs-链表\"><a class=\"anchor\" href=\"#数组-vs-链表\">#</a> 数组 vs 链表</h3>\n<ul>\n<li>存储方式</li>\n<li>容量扩展</li>\n<li>内存效率</li>\n<li>访问元素</li>\n<li>添加元素</li>\n<li>删除元素</li>\n</ul>\n",
            "tags": [
                "学习"
            ]
        },
        {
            "id": "https://fairyeye.github.io/2023/10/27/%E6%96%87%E7%AB%A0%E5%90%8D%E7%A7%B0/",
            "url": "https://fairyeye.github.io/2023/10/27/%E6%96%87%E7%AB%A0%E5%90%8D%E7%A7%B0/",
            "title": "测试",
            "date_published": "2023-10-27T03:08:31.251Z",
            "content_html": "<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(Objects.nonNull(prLine)&amp;&amp;Objects.nonNull(prLine.getPurchaseAgentId()))&#123;</span><br><span class=\"line\">    poHeaderDetailDTO.setAgentId(prLine.getPurchaseAgentId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://fairyeye.github.io/2023/10/25/Mac%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/",
            "url": "https://fairyeye.github.io/2023/10/25/Mac%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/",
            "title": "Mac使用记录",
            "date_published": "2023-10-25T03:31:59.000Z",
            "content_html": "<h2 id=\"软件\"><a class=\"anchor\" href=\"#软件\">#</a> 软件</h2>\n<h3 id=\"ttygif\"><a class=\"anchor\" href=\"#ttygif\">#</a> ttygif</h3>\n<ul>\n<li>终端录制工具</li>\n</ul>\n<h4 id=\"安装教程\"><a class=\"anchor\" href=\"#安装教程\">#</a> 安装教程</h4>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install ttygif</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h4>\n<p><figure class=\"highlight bash\"><figcaption><span>命令行提示符 command:(\"[root@localhost] $\":1,9-10||\"[admin@remotehost] #\":4-6)</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ttyrec myrecording</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"sshx\"><a class=\"anchor\" href=\"#sshx\">#</a> sshx</h3>\n<ul>\n<li>终端共享</li>\n</ul>\n<h4 id=\"使用-2\"><a class=\"anchor\" href=\"#使用-2\">#</a> 使用</h4>\n<p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zhanghuapengdeMacBook-Pro :: Downloads/work_space/AA % sshx</span><br><span class=\"line\"></span><br><span class=\"line\">  sshx v0.2.1</span><br><span class=\"line\"></span><br><span class=\"line\">  ➜  Link:  https://sshx.io/s/ZtVval8VO2<span class=\"comment\">#e9o4sruIiflVdh</span></span><br><span class=\"line\">  ➜  Shell: /bin/zsh</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"flutter\"><a class=\"anchor\" href=\"#flutter\">#</a> Flutter</h2>\n<h4 id=\"环境安装\"><a class=\"anchor\" href=\"#环境安装\">#</a> 环境安装：</h4>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmZsdXR0ZXIuZGV2L2dldC1zdGFydGVkL2luc3RhbGwvbWFjb3M=\">官方说明</span></p>\n<h2 id=\"lua\"><a class=\"anchor\" href=\"#lua\">#</a> LUA</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvQWc1RTZEODFkaUU2TS11ZWhXbG9KUQ==\">lua+redis 限流</span></p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2024/01/25/41d94c7e3a65b7e2.png\" alt=\"\" /></p>\n<h2 id=\"cargo\"><a class=\"anchor\" href=\"#cargo\">#</a> Cargo</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2MucnVzdC1sYW5nLm9yZy9jYXJnby9nZXR0aW5nLXN0YXJ0ZWQvaW5zdGFsbGF0aW9uLmh0bWw=\">install cargo</span></p>\n<h2 id=\"破解软件打不开\"><a class=\"anchor\" href=\"#破解软件打不开\">#</a> 破解软件打不开</h2>\n<p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这个好像没生效</span></span><br><span class=\"line\">Mac :: ~ % sudo spctl --global-disable</span><br><span class=\"line\">Password:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将软件拖进来</span></span><br><span class=\"line\">Mac :: ~ % sudo xattr -r -c /Applications/Navicat\\ Premium.app</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"jrebel-激活\"><a class=\"anchor\" href=\"#jrebel-激活\">#</a> Jrebel 激活</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull qierkang/golang-reverseproxy</span><br><span class=\"line\">docker run -d -p 8888:8888 qierkang/golang-reverseproxy</span><br><span class=\"line\"></span><br><span class=\"line\">#licene</span><br><span class=\"line\">http://127.0.0.1:8888/7a14c9f7-8a27-46d6-bb50-2b30c19e766c</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"一行命令下载全网视频\"><a class=\"anchor\" href=\"#一行命令下载全网视频\">#</a> 一行命令下载全网视频</h3>\n<p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip3 install you-get</span><br></pre></td></tr></table></figure><br />\n<strong> 如何下载</strong></p>\n<p><em><strong>1.</strong></em> 可通过如下命令查看该视频的详细信息。<br />\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">you-get -i <span class=\"string\">&#x27;视频url&#x27;</span></span><br></pre></td></tr></table></figure><br />\n<em><strong>2.</strong></em> 下载方式更简单，只需一行命令即可下载了：</p>\n<p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">you-get <span class=\"string\">&#x27;视频url&#x27;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"jan-将人工智能带入您的桌面\"><a class=\"anchor\" href=\"#jan-将人工智能带入您的桌面\">#</a> Jan - 将人工智能带入您的桌面</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"sonoma系统退回到catalina\"><a class=\"anchor\" href=\"#sonoma系统退回到catalina\">#</a> Sonoma 系统退回到 Catalina</h2>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2024/03/18/26d4edbd95ba29b0.png\" alt=\"\" /></p>\n<p>20 款 MacBook Pro，使用 Sonoma 系统感觉有点卡顿，晚上说是新系统对旧 Mac 兼容不是很好，决定退回 Catalina 版本，最后一个 Inter 电脑发布的系统</p>\n<p>准备：U 盘（32G）（没有也行<br />\n时间机器：（没有也行 主打一个凑合<br />\n电脑硬盘：这个得有<br />\n Catalina 系统安装器（去 App Store 下载好<br />\n 0. 先分区</p>\n<ul>\n<li>有 U 盘的情况，直接新建一个系统分区就好（ <code>APFS</code>  格式）</li>\n<li>无 U 盘的情况，先建一个系统分区，再用至少 20G 空间做一个引导系统分区，格式选（Mac OS 日志）</li>\n<li>分区的时候，该抹掉就抹掉，只要别把当前系统抹掉就行</li>\n</ul>\n<ol>\n<li>制作引导系统 （这步记不太清楚了</li>\n</ol>\n<p>有 U 盘的情况下，重启电脑，按 <code>option</code>  键，显示小地球图标（没有图），大概就是下面的这种，<br />\n<img data-src=\"https://s3.bmp.ovh/imgs/2024/03/18/5ad8cd52fe6b475c.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>分区</li>\n<li>安装到分区上</li>\n<li>用 Catalina 系统制作时间机器，保证时间机器分区是 Mac OS 扩展（日志式）</li>\n<li>将 Sonoma 系统数据备份到时间机器</li>\n<li>到 Catalina 系统，用迁移助理将数据迁移过来</li>\n<li>后续看情况删除 Sonoma 系统分区</li>\n</ol>\n",
            "tags": [
                "日常记录"
            ]
        },
        {
            "id": "https://fairyeye.github.io/2023/10/12/Centos/",
            "url": "https://fairyeye.github.io/2023/10/12/Centos/",
            "title": "Centos",
            "date_published": "2023-10-12T08:12:32.910Z",
            "content_html": "<h3 id=\"1frpc内网穿透\"><a class=\"anchor\" href=\"#1frpc内网穿透\">#</a> 1.frpc 内网穿透</h3>\n<h3 id=\"2-青龙\"><a class=\"anchor\" href=\"#2-青龙\">#</a> 2. 青龙</h3>\n<h3 id=\"3xdd-plus\"><a class=\"anchor\" href=\"#3xdd-plus\">#</a> 3.xdd-plus</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucXFtYXRlLmNuLzY1Mi5odG1s\">https://www.qqmate.cn/652.html</span><br />\n1. 进入 xdd 目录找到 device.json 文件<br />\n 2. 双击打开，修改： “protocol”:0, 改为 &quot;protocol&quot;:2,</p>\n",
            "tags": []
        },
        {
            "id": "https://fairyeye.github.io/2023/09/25/231104/",
            "url": "https://fairyeye.github.io/2023/09/25/231104/",
            "title": "231104",
            "date_published": "2023-09-25T01:36:59.000Z",
            "content_html": "<h3 id=\"pur-24166\"><a class=\"anchor\" href=\"#pur-24166\">#</a> pur-24166</h3>\n<p>返回消息：<br />\nscux.spuc.lotus_nyo_no_enabled_master_enable_bank<br />\nscux.spuc.lotus_nyo_no_erp_supplier<br />\n 埋点：<br />\nSPUC_SUBMIT_PO</p>\n<h3 id=\"pur-26089\"><a class=\"anchor\" href=\"#pur-26089\">#</a> pur-26089</h3>\n<p>组合业务对象：<br />\nSRM_C_SRM_SODR_PO_HEADER<br />\n 个性化单元：<br />\nSODR.ORDER_TRACKING_LIST.EXPORT</p>\n<h3 id=\"pur-25937\"><a class=\"anchor\" href=\"#pur-25937\">#</a> pur-25937</h3>\n<p>平台供应商多语言待确定</p>\n<p>页面个性化：<br />\nSODR.WORKSPACE_DETAILALL.SEARCH</p>\n<h3 id=\"pur-26467\"><a class=\"anchor\" href=\"#pur-26467\">#</a> pur-26467</h3>\n<p>独立脚本 + API 发布：<br />\nSCUX_LDJT_QUERY_LAST_PURCHASE_PRICE</p>\n<h3 id=\"pur-26322\"><a class=\"anchor\" href=\"#pur-26322\">#</a> pur-26322</h3>\n<p>独立脚本 + API：<br />\nSCUX_WATSONS_UPDATE_ATTACHMENT_WFL<br />\n 适配器：<br />\nSCUX_MTC_PO_HEADER_INFO<br />\nSPUC_ORDER_QUERY_PROCESS_ACTION</p>\n<h3 id=\"pur-26427\"><a class=\"anchor\" href=\"#pur-26427\">#</a> pur-26427</h3>\n<p>配置表：<br />\nscux_srm_carlsberg_contract_amount_change_record<br />\n 适配器：<br />\nSPUC_ORDER_SYNC_IMP_INSERT_PROCESS<br />\nSPUC_BEFORE_ERP_CLOSE_OR_CANCEL_PO</p>\n<p>更新时：判断取消状态和表里的取消状态</p>\n<h3 id=\"pur-26689\"><a class=\"anchor\" href=\"#pur-26689\">#</a> pur-26689</h3>\n<p>独立脚本：<br />\nSCUX_VN_SCM_PO_RETURN_OA<br />\n 适配器：<br />\n重新同步：SPUC_RE_SYNC_ERP</p>\n<p>值集：<br />\nSPUC.SYNC_EXP_TYPE<br />\nSPUC.SYNC_INTERFACE_TYPE</p>\n<h3 id=\"pur-26080\"><a class=\"anchor\" href=\"#pur-26080\">#</a> pur-26080</h3>\n<p>适配器:<br />\nSPUC_SUBMIT_PO<br />\nSPUC_ORDER_APPROVED_EVENT</p>\n<h3 id=\"pur-26150\"><a class=\"anchor\" href=\"#pur-26150\">#</a> pur-26150</h3>\n<pre><code>配置表：\n\tscux_srm_sanning_fee_info\n\tscux_srm_sanning_fee_calculate_type\nAPI:\n\t查询（返回配置表数据，且翻译税率、关联协议：SCUX_SANNING_FEE_INFO_QUERY    /marmot-api/v49ECXUYP60iaTD6VDYCeIrqbnlzgazaL5HYWyv9ScGg\n\t查询2 及币种精度、CNY币种ID、CNY、费用计算类型对应关系 SCUX_SANNING_FEE_OTHER_QUERY\n\t保存 有ID是更新，没有ID是新增  SCUX_SANNING_FEE_INFO_SAVE_OR_UPDATE  /marmot-api/v49ECXUYP60iaTD6VDYCeIpQpEumLeekdKWnTERvKJjibX4rd3PkiakwNOzdMU5JBn8\n\t删除 根据ID删除，支持批量删除   SCUX_SANNING_FEE_INFO_DEL /marmot/v1/20990/marmot-api/v49ECXUYP60iaTD6VDYCeIiab6r6sOKdPfrdSqia2ePicuU\n\t更新预付标识：SCUX_SANNING_FEE_INFO_UPDATE_PAY_FLAG\n\t查询: 给结算用  SCUX_SANNING_FEE_INFO_QUERY_FOR_SETTLE\n\tQB：SCUX_SANNING_FEE_INFO_QUERY_FOR_SETTLE\n独立脚本：\n\tSCUX_SANNING_FEE_INFO_QUERY\n\tSCUX_SANNING_FEE_OTHER_QUERY\n\tSCUX_SANNING_FEE_INFO_SAVE_OR_UPDATE\n\tSCUX_SANNING_FEE_INFO_DEL\n埋点：\n\t保存、提交计算头个性化字段金额：SPUC_ORDER_PRICE_SOURCE_TYPE\n\t整单取消：SPUC_ALL_CANCEL_PO_HEADER\n\t按行取消：SPUC_LINE_CANCEL_PO_LINE\n\t复制：\n\t\tSPUC_ORDER_SAVE_DATA_CONVERSION_AFTER（写入数据\n\t\tSPUC_ORDER_SAVE_DATA_CONVERSION_NEWPRICE_AFTER\n\t\tSCUX_ORDER_PO_COPY_LINE（记录订单行ID\n</code></pre>\n<h3 id=\"pur-27164\"><a class=\"anchor\" href=\"#pur-27164\">#</a> pur-27164</h3>\n<pre><code>\t适配器：\n\t\tSPUC_ORDER_SYNC_IMP_INSERT_PROCESS\n\t\tSPUC_ORDER_SYNC_IMP_UPDATE_PROCESS\n\t配置表：\n\t\tscux_srm_daqo_po_drawing_info\n\tAPI+独立脚本\n\t\t查询：SCUX_DAQO_PO_DRAWING_INFO_QUERY\n\t\t导出：SCUX_DAQO_PO_DRAWING_INFO_EXPORT\n\t\t下载：\n</code></pre>\n<h3 id=\"bug-pur-26901-spuc_order_batch_submit_handle\"><a class=\"anchor\" href=\"#bug-pur-26901-spuc_order_batch_submit_handle\">#</a> BUG pur-26901   SPUC_ORDER_BATCH_SUBMIT_HANDLE</h3>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2023/10/25/4c3f3f9377020435.png\" alt=\"\" /></p>\n<p><span class=\"kbd\">Ctrl</span> + <span class=\"kbd red\">C</span></p>\n",
            "tags": [
                "work",
                "迭代"
            ]
        },
        {
            "id": "https://fairyeye.github.io/2023/06/17/GIT/",
            "url": "https://fairyeye.github.io/2023/06/17/GIT/",
            "title": "Git",
            "date_published": "2023-06-17T14:33:35.000Z",
            "content_html": "<h3 id=\"gitee-go\"><a class=\"anchor\" href=\"#gitee-go\">#</a> Gitee Go</h3>\n<h4 id=\"流水线\"><a class=\"anchor\" href=\"#流水线\">#</a> 流水线</h4>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 官方文档</span><br><span class=\"line\">https://blog.gitee.com/2022/11/23/pipeline/</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"前端ci\"><a class=\"anchor\" href=\"#前端ci\">#</a> 前端 CI</h4>\n<p>手动创建流水线，选择部署分之，需要手动增加部署阶段</p>\n<h5 id=\"添加部署阶段\"><a class=\"anchor\" href=\"#添加部署阶段\">#</a> 添加部署阶段</h5>\n<ol>\n<li>\n<p>点击发布后面的＋    添加新阶段</p>\n</li>\n<li>\n<p>点击部署  点击主机部署</p>\n</li>\n</ol>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2023/06/17/2e1e2d665f8fcd29.png\" alt=\"\" /></p>\n<ol start=\"3\">\n<li>选择执行主机组（如果没有就先去添加主机，选择</li>\n</ol>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2023/06/17/d1715a1b2ec593f8.png\" alt=\"\" /></p>\n<ol start=\"4\">\n<li>填写部署脚本，前端项目把上游构建的包，解压到服务器指定路径即可</li>\n</ol>\n<p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 功能：部署脚本会在部署主机组的每台机器上执行</span></span><br><span class=\"line\"><span class=\"comment\"># 使用场景：先将制品包解压缩到指定目录中，再执行启动脚本deploy.sh，脚本示例地址：https://gitee.com/gitee-go/spring-boot-maven-deploy-case/blob/master/deploy.sh</span></span><br><span class=\"line\"><span class=\"comment\"># mkdir -p /home/admin/app</span></span><br><span class=\"line\"><span class=\"comment\"># tar zxvf ~/gitee_go/deploy/output.tar.gz -C /home/admin/app</span></span><br><span class=\"line\"><span class=\"comment\"># sh /home/admin/app/deploy.sh restart</span></span><br><span class=\"line\"><span class=\"comment\"># 如果你是php之类的无需制品包的制品方式，可以使用 git clone 或者 git pull 将源代码更新到服务器，再执行其他命令</span></span><br><span class=\"line\"><span class=\"comment\"># git clone ***@***.git</span></span><br><span class=\"line\">tar zxvf ~/gitee_go/deploy/output.tar.gz -C /home/ubuntu </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"添加主机\"><a class=\"anchor\" href=\"#添加主机\">#</a> 添加主机</h4>\n<ol>\n<li>点击新建主机组</li>\n</ol>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2023/06/17/e0925018357ec4d5.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>选择新建类型（以腾讯云为例），填写基本信息（以 Linux 为例），点击确认</li>\n</ol>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2023/06/17/09807a134b458ca9.png\" alt=\"\" /></p>\n<ol start=\"3\">\n<li>添加主机</li>\n</ol>\n<p>点击添加 Linux 主机，选择通过命令行逐台添加，</p>\n<p>复制命令到目标腾讯云主机命令行</p>\n<p>刷新页面即可见关联服务器信息</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2023/06/17/ba5c1004444b1e6a.png\" alt=\"\" /></p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2023/06/17/b3943c35c7f70d3b.png\" alt=\"\" /></p>\n<h4 id=\"后端ci\"><a class=\"anchor\" href=\"#后端ci\">#</a> 后端 CI</h4>\n<h5 id=\"部署脚本\"><a class=\"anchor\" href=\"#部署脚本\">#</a> 部署脚本</h5>\n<p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/gitee_go/deploy/</span><br><span class=\"line\"><span class=\"built_in\">ls</span></span><br><span class=\"line\">tar -zxf API.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> target</span><br><span class=\"line\">pid=`ps -ef|grep smart-admin-api-1.0.0|grep -v grep|awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$pid</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">sudo <span class=\"built_in\">kill</span> -15 <span class=\"variable\">$pid</span>  </span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo <span class=\"built_in\">nohup</span> /usr/lib/jvm/jdk1.8.0_341/bin/java -jar smart-admin-api-1.0.0.jar &gt;/home/ubuntu/log.log &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/gitee_go/deploy/</span><br><span class=\"line\"><span class=\"built_in\">ls</span></span><br><span class=\"line\">tar -zxf API.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> target</span><br><span class=\"line\">pid=`ps -ef|grep smart-admin-api-1.0.0|grep -v grep|awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$pid</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">sudo <span class=\"built_in\">kill</span> -15 <span class=\"variable\">$pid</span>  </span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo <span class=\"built_in\">nohup</span> /usr/lib/jvm/jdk1.8.0_341/bin/java -jar smart-admin-api-1.0.0.jar</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; /home/ubuntu/log.log 2&gt;&amp;1 &amp;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"开源项目\"><a class=\"anchor\" href=\"#开源项目\">#</a> 开源项目</h3>\n<h4 id=\"oshi\"><a class=\"anchor\" href=\"#oshi\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29zaGkvb3NoaQ==\">Oshi</span></h4>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获取操作系统和硬件信息的 Java 库。这是一个基于 JNA 实现的获取本机操作系统和硬件信息的库，支持操作系统版本、进程、内存、 CPU 使用率、磁盘和分区、设备、传感器等信息。</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"playedu\"><a class=\"anchor\" href=\"#playedu\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1BsYXlFZHUvUGxheUVkdQ==\">PlayEdu</span></h4>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一款 Java 写的内部培训系统。这是一款基于 SpringBoot+React 开发而成的视频培训系统，它界面清爽、交互流畅，支持上传资源、创建部门、添加学员、指派课程等功能，可用于企业和机构搭建内部培训平台。</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"holer\"><a class=\"anchor\" href=\"#holer\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3dpc2RvbS1wcm9qZWN0cy9ob2xlcg==\">Holer</span></h4>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个将局域网中的应用映射到公网访问的端口映射软件，支持转发基于 TCP 协议的报文。内网穿透工具，包含 Web 后台管理系统。用到的技术如下：</span><br><span class=\"line\"></span><br><span class=\"line\">- 服务端采用 SpringBoot 和 Netty 实现</span><br><span class=\"line\">- 客户端采用 Java Netty 和 Go 语言实现</span><br></pre></td></tr></table></figure><br />\n<img data-src=\"https://s3.bmp.ovh/imgs/2023/09/13/e1c366275bdb16f6.png\" alt=\"\" /></p>\n<h4 id=\"solopo\"><a class=\"anchor\" href=\"#solopo\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaXBheS9Tb2xvUGk=\">SoloPo</span></h4>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个不需要连接电脑、非侵入式的 Android 自动化工具。公测版拥有录制回放、性能测试、一机多控三项主要功能，能为测试开发人员节省宝贵时间。安卓版本多、终端型号多，一个成熟安卓应用的上线需要进行大量测试，而很多测试都是属于重复操作，通过此工具可以极大简化测试人员的工作量</span><br></pre></td></tr></table></figure><br />\n<img data-src=\"https://s3.bmp.ovh/imgs/2023/09/13/f9f815c624347451.png\" alt=\"\" /></p>\n<h4 id=\"hitomi\"><a class=\"anchor\" href=\"#hitomi\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0t1cnRCZXN0b3IvSGl0b21pLURvd25sb2FkZXI=\">Hitomi</span></h4>\n<p><strong>本周 star 增长数：400+</strong>，<strong>主语言：Python</strong></p>\n<p>Hitomi-Downloader 知名下载工具，只需要一个 url 就能下载对应的图片、视频、音频。部分特性：</p>\n<ul>\n<li>\n<p>简洁的用户界面</p>\n</li>\n<li>\n<p>支持下载加速，也支持限速</p>\n</li>\n<li>\n<p>支持单任务由 24 个线程</p>\n</li>\n<li>\n<p>支持多种下载方式</p>\n</li>\n</ul>\n<h4 id=\"python-搞定-uinicegui\"><a class=\"anchor\" href=\"#python-搞定-uinicegui\">#</a> Python 搞定 UI：nicegui</h4>\n<p><strong>本周 star 增长数：850+</strong>，<strong>主语言：Python、JavaScript</strong></p>\n<p><code>New</code>  用 Python 搞定 Web UI，有了它，你可以用 Python 创建按钮、对话框、Markdown 文件、3D 场景。</p>\n<blockquote>\n<p>GitHub 地址→https://github.com/zauberzeug/nicegui</p>\n</blockquote>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2023/09/22/65aeeb9f2a95da35.png\" alt=\"\" /></p>\n<h4 id=\"炫酷的-windows-终端软件fluentterminal\"><a class=\"anchor\" href=\"#炫酷的-windows-终端软件fluentterminal\">#</a> 炫酷的 Windows 终端软件：FluentTerminal</h4>\n<p><strong>主语言：C#</strong></p>\n<p>基于 UWP 的 Windows 终端应用，拥有强大的自定义主题模块，能够轻松定制出风格各异的主题。提供了中文选项，支持多窗口、SSH 和搜索等功能。</p>\n<blockquote>\n<p>HG 评价地址→https://hellogithub.com/repository/352150f3034742cbbf67d301a86973ca</p>\n</blockquote>\n<h4 id=\"12-ai-生图controlnet\"><a class=\"anchor\" href=\"#12-ai-生图controlnet\">#</a> 1.2 AI 生图：ControlNet</h4>\n<p><strong>主语言：Python</strong></p>\n<p><code>New</code>  上周线稿上色的 style2paints 在 ControlNet 面前可能只是个弟弟。ControlNet 是一种通过添加额外条件来控制扩散模型的神经网络结构。为什么说 style2paints 是个弟弟呢？这是 ControlNet 的社生成效果图，从线稿到成品，一句话搞点。</p>\n<blockquote>\n<p>GitHub 地址→https://github.com/lllyasviel/ControlNet</p>\n</blockquote>\n<h4 id=\"1panel\"><a class=\"anchor\" href=\"#1panel\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tLzFQYW5lbC1kZXYvMVBhbmVs\">1Panel</span></h4>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1Panel Log]: 1Panel 服务启动成功!</span><br><span class=\"line\">[1Panel Log]:</span><br><span class=\"line\">[1Panel Log]: =================感谢您的耐心等待，安装已经完成==================</span><br><span class=\"line\">[1Panel Log]:</span><br><span class=\"line\">[1Panel Log]: 请用浏览器访问面板:</span><br><span class=\"line\">[1Panel Log]: 面板地址: http://$LOCAL_IP:29252/821d637d70</span><br><span class=\"line\">[1Panel Log]: 用户名称: e0ae9ef986</span><br><span class=\"line\">[1Panel Log]: 用户密码: zhang...1997</span><br><span class=\"line\">[1Panel Log]:</span><br><span class=\"line\">[1Panel Log]: 项目官网: https://1panel.cn</span><br><span class=\"line\">[1Panel Log]: 项目文档: https://1panel.cn/docs</span><br><span class=\"line\">[1Panel Log]: 代码仓库: https://github.com/1Panel-dev/1Panel</span><br><span class=\"line\">[1Panel Log]:</span><br><span class=\"line\">[1Panel Log]: 如果使用的是云服务器，请至安全组开放 29252 端口</span><br><span class=\"line\">[1Panel Log]:</span><br><span class=\"line\">[1Panel Log]: ================================================================</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"nezha\"><a class=\"anchor\" href=\"#nezha\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25haWJhL25lemhh\">Nezha</span></h3>\n<p>国产的轻量级服务器监控工具。这是一款名为 “哪吒” 的服务器监控面板，它安装简单、开箱即用，支持监控多个服务器的系统状态、SSL 证书状态、报警通知、流量监控、设置定时任务等功能，适用于 Linux、Windows、macOS、OpenWRT 等主流系统。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2023/10/12/87fe9705e1078ecc.png\" alt=\"\" /></p>\n<h3 id=\"git技巧\"><a class=\"anchor\" href=\"#git技巧\">#</a> Git 技巧</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://hellogithub.com/article/9aed28d4d64b4649bb364685ef557ae4</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"22-windows-激活microsoft-activation-scripts\"><a class=\"anchor\" href=\"#22-windows-激活microsoft-activation-scripts\">#</a> 2.2 Windows 激活：Microsoft-Activation-Scripts</h3>\n<p><strong>本周 star 增长数：1,100+</strong></p>\n<p>有了 Microsoft-Activation-Scripts，激活 Windows 和 Office 不再是问题。它注重开源、减少反病毒软件的检测，这个用到 HWID、Ohook、KMS38、在线 KMS 激活方法的工具，一定能帮你解决 Windows 的激活问题。</p>\n<blockquote>\n<p>GitHub <span class=\"exturl\" data-url=\"aHR0cDovL3huLS1naXRodWItaG4yYzY1MDViZWVhLmNvbS9tYXNzZ3JhdmVsL01pY3Jvc29mdC1BY3RpdmF0aW9uLVNjcmlwdHM=\">地址→github.com/massgravel/Microsoft-Activation-Scripts</span></p>\n</blockquote>\n",
            "tags": [
                "use",
                "git"
            ]
        },
        {
            "id": "https://fairyeye.github.io/2023/06/05/GitHub%20Page/",
            "url": "https://fairyeye.github.io/2023/06/05/GitHub%20Page/",
            "title": "GitHub Page",
            "date_published": "2023-06-05T06:10:07.408Z",
            "content_html": "<p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 拉取子模块</span></span><br><span class=\"line\">git submodule init // 初始化子模块</span><br><span class=\"line\">git submodule update // 更新子模块与主仓库中的子模块代码同步</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "hexo"
            ]
        },
        {
            "id": "https://fairyeye.github.io/2023/06/05/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/",
            "url": "https://fairyeye.github.io/2023/06/05/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/",
            "title": "单例模式",
            "date_published": "2023-06-05T05:49:50.605Z",
            "content_html": "<h4 id=\"1-最简单的单例模式\"><a class=\"anchor\" href=\"#1-最简单的单例模式\">#</a> 1. 最简单的单例模式：</h4>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.demo.JUC.thread;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @author huapeng.zhang</span><br><span class=\"line\"> * @version 1.0</span><br><span class=\"line\"> * @date 2020/9/17 18:28</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class SingletomDemo &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static SingletomDemo singletomDemo = null;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private SingletomDemo() &#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + &quot;\\t 我是构造方法SingletomDemo()！&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static SingletomDemo getInstance() &#123;</span><br><span class=\"line\">        if (singletomDemo == null) &#123;</span><br><span class=\"line\">        \t\tsingletomDemo = new SingletomDemo();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return singletomDemo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        // 单线程</span><br><span class=\"line\">        System.out.println(SingletomDemo.getInstance() == SingletomDemo.getInstance());</span><br><span class=\"line\">        System.out.println(SingletomDemo.getInstance() == SingletomDemo.getInstance());</span><br><span class=\"line\">        System.out.println(SingletomDemo.getInstance() == SingletomDemo.getInstance());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>在单线程的情况下，打印结果如下：</p>\n<p><img data-src=\"https://i.loli.net/2020/09/17/J9rb5oynQclfD4d.png\" alt=\"image-20200917191550283\" /></p>\n<p>可以看到，虽然我们一共调用了六次 <code>getInstance()</code> ， 但是只打印了一次构造方法输出内容，也就是只调用了一个构造函数，所获得的对象地址自然是一样的。</p>\n<h4 id=\"2-多线程下的单例模式\"><a class=\"anchor\" href=\"#2-多线程下的单例模式\">#</a> 2. 多线程下的单例模式</h4>\n<p>我们对 <code>main()</code>  方法做一下改造，改造后的代码如下：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">    // 改为多线程后 可能多次调用构造函数</span><br><span class=\"line\">    for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">        new Thread(() -&gt; &#123;</span><br><span class=\"line\">            SingletomDemo.getInstance();</span><br><span class=\"line\">        &#125;, String.valueOf(i)).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>打印结果为：</p>\n<p><img data-src=\"https://i.loli.net/2020/09/17/Q7RWYjayOgoXfH1.png\" alt=\"image-20200917192220270\" /></p>\n<p>多次执行下可以看到打印的次数是不同的。</p>\n<p>可以对 <code>getInstance()</code>  方法添加 <code>synchronized</code>  加锁，保证只生成一个实例。</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static synchronized SingletomDemo getInstance() &#123;</span><br><span class=\"line\">    if (singletomDemo == null) &#123;</span><br><span class=\"line\">    \t\tsingletomDemo = new SingletomDemo();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return singletomDemo;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>再次执行程序发现只打印了一次构造方法输出函数，还有另外一种方法就是 <code>DCL：double check locks双端检测模式</code> 模式也可以达到同样的目的。</p>\n<h4 id=\"3dcl-单例模式\"><a class=\"anchor\" href=\"#3dcl-单例模式\">#</a> 3.DCL + 单例模式</h4>\n<p>我们再次对 <code>getInstance()</code>  方法进行改造，代码如下：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// DCL模式(double check locks双端检测模式)</span><br><span class=\"line\">private static SingletomDemo getInstance() &#123;</span><br><span class=\"line\">    if (singletomDemo == null) &#123;</span><br><span class=\"line\">        synchronized (SingletomDemo.class) &#123;</span><br><span class=\"line\">            if (singletomDemo == null) &#123;</span><br><span class=\"line\">                singletomDemo = new SingletomDemo();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return singletomDemo;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当我们的单例模式写到这种程度的时候，基本可以应对 99% 的情况，但是由于 <code>指令排序</code> 的存在，还是有可能会出现问题。</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">memory = allocate(); //1.分配对象内存空间</span><br><span class=\"line\">instance(memory);    //2.初始化对象</span><br><span class=\"line\">instance = memory;   //3.设置instance指向刚分配的内存地址，此时instance!=null</span><br></pre></td></tr></table></figure></p>\n<p>步骤 2、3 不存在数据依赖，所以由于指令重排的关系，可能会出现：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">memory = allocate(); //1.分配对象内存空间</span><br><span class=\"line\">instance = memory;   //3.设置instance指向刚分配的内存地址，此时instance!=null</span><br><span class=\"line\">instance(memory);    //2.初始化对象</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4volatile-单例模式\"><a class=\"anchor\" href=\"#4volatile-单例模式\">#</a> 4.Volatile + 单例模式</h4>\n<p>我们在声明  <code>singletomDemo</code>  时，加上 <code>Volatile</code>  关键字修饰，就可以达到完美的效果。</p>\n<p>最终代码：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.demo.JUC.thread;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @author huapeng.zhang</span><br><span class=\"line\"> * @version 1.0</span><br><span class=\"line\"> * @date 2020/9/17 18:28</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class SingletomDemo &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static volatile SingletomDemo singletomDemo = null;</span><br><span class=\"line\"></span><br><span class=\"line\">    private SingletomDemo() &#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + &quot;\\t 我是构造方法SingletomDemo()！&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // DCL模式(double check locks双端检测模式)</span><br><span class=\"line\">    private static SingletomDemo getInstance() &#123;</span><br><span class=\"line\">        if (singletomDemo == null) &#123;</span><br><span class=\"line\">            synchronized (SingletomDemo.class) &#123;</span><br><span class=\"line\">                if (singletomDemo == null) &#123;</span><br><span class=\"line\">                    singletomDemo = new SingletomDemo();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return singletomDemo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        // 单线程</span><br><span class=\"line\">//        System.out.println(SingletomDemo.getInstance() == SingletomDemo.getInstance());</span><br><span class=\"line\">//        System.out.println(SingletomDemo.getInstance() == SingletomDemo.getInstance());</span><br><span class=\"line\">//        System.out.println(SingletomDemo.getInstance() == SingletomDemo.getInstance());</span><br><span class=\"line\"></span><br><span class=\"line\">//         改为多线程后 可能多次调用构造函数</span><br><span class=\"line\">//         可以在 getInstance上加SYNC解决问题</span><br><span class=\"line\">        for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">            new Thread(() -&gt; &#123;</span><br><span class=\"line\">                SingletomDemo.getInstance();</span><br><span class=\"line\">            &#125;, String.valueOf(i)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "学习笔记",
                "demo"
            ]
        },
        {
            "id": "https://fairyeye.github.io/2023/06/05/%E5%90%8C%E6%AD%A5%E4%B8%8D%E5%90%8C%E6%9C%8D%E5%8A%A1%E7%9A%84MySQL%E6%95%B0%E6%8D%AE%E8%A1%A8/",
            "url": "https://fairyeye.github.io/2023/06/05/%E5%90%8C%E6%AD%A5%E4%B8%8D%E5%90%8C%E6%9C%8D%E5%8A%A1%E7%9A%84MySQL%E6%95%B0%E6%8D%AE%E8%A1%A8/",
            "title": "MySQL查询",
            "date_published": "2023-06-05T05:49:50.605Z",
            "content_html": "<h4 id=\"1-首先要保证本地的mysql服务支持federated引擎\"><a class=\"anchor\" href=\"#1-首先要保证本地的mysql服务支持federated引擎\">#</a> 1. 首先要保证本地的 MySQL 服务支持 FEDERATED 引擎。</h4>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：SHOW ENGINES;</span><br><span class=\"line\">如下 FEDERATED 行的Support为YES则表示开启了FEDERATED。</span><br><span class=\"line\">如果为 NO 则表示未开启。</span><br><span class=\"line\"></span><br><span class=\"line\">如果 FEDERATED 没有开启的话 要启用。</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://i.loli.net/2020/10/22/7a8G6nUXbLM24wl.png\" alt=\"\" /></p>\n<h4 id=\"2启用-federated\"><a class=\"anchor\" href=\"#2启用-federated\">#</a> 2. 启用 FEDERATED</h4>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在MySQL的配置文件</span><br><span class=\"line\">安装目录下的my.ini或my.cnf </span><br><span class=\"line\">加上 一行  `FEDERATED`</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://i.loli.net/2020/10/22/HhLBosuOdeNDbgQ.png\" alt=\"\" /></p>\n<h4 id=\"3建表\"><a class=\"anchor\" href=\"#3建表\">#</a> 3. 建表</h4>\n<p><strong>建表一般应的是 InnoDB 引擎，这里需要修改一下 改为</strong>  <code>ENGINE=FEDERATED</code></p>\n<p>从原表导出表结构 SQL，然后修改  <code>ENGINE = InnoDB</code> -&gt; <code>ENGINE=FEDERATED CONNECTION='mysql://用户名:密码@IP:PORT/库名/表名'</code></p>\n<p>然后打开这张表，可以看到远程表里的数据已经同步到了这张表。</p>\n",
            "tags": [
                "数据库",
                "utils"
            ]
        },
        {
            "id": "https://fairyeye.github.io/2023/06/05/%E4%BA%8B%E5%8A%A1%E9%97%AE%E9%A2%98/",
            "url": "https://fairyeye.github.io/2023/06/05/%E4%BA%8B%E5%8A%A1%E9%97%AE%E9%A2%98/",
            "title": "Transactional注解",
            "date_published": "2023-06-05T05:49:50.604Z",
            "content_html": "<p>方法 A 中调用 B 后再调用 C, 三个方法中均有插入数据后再查询数据</p>\n<p>B 方法的注解：@Transactional (propagation=Propagation.REQUIRES_NEW) -- 不管是否存在事务，都创建一个新的事务，原来的挂起，新的执行完毕，继续执行老的事务</p>\n<p>C 方法的注解：@Transactional (propagation=Propagation.REQUIRED) -- 如果有事务，那么加入事务，没有的话新建一个</p>\n<p>1、当方法 B 或者 C 报错时，A、B、C 方法都回滚</p>\n<p>2、当方法 A、B、C 异常被捕获时，A、B、C 事务不回滚（a、b、c 均入库）</p>\n<p>3、当方法 BC 执行后，方法 A 报错时，A、C 事务回滚，B 事务不回滚（b 数据入库）</p>\n<p>A 方法向表中添加数据 a，在查询该表能得到数据 a</p>\n<p>B 方法向表中添加数据 b，再查询该表能得到数据 b</p>\n<p>C 方法向表中添加数据 c，再查询该表能得到数据 a，b，c</p>\n<p>带有注解 @Transactional (propagation=Propagation.REQUIRES_NEW) 的方法走完之后，数据就会被提交入库</p>\n<p>另外需要注意方法内部调用 @Transactional (propagation=Propagation.REQUIRES_NEW) 注解不生效，比如 A 和 B 都在同一个方法中，A 调用 B，B 方法是此注解，则不生效。同样，AOP 拦截也拦截不到 B</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public enum Propagation &#123;</span><br><span class=\"line\">    REQUIRED(0),</span><br><span class=\"line\">    SUPPORTS(1),</span><br><span class=\"line\">    MANDATORY(2),</span><br><span class=\"line\">    REQUIRES_NEW(3),</span><br><span class=\"line\">    NOT_SUPPORTED(4),</span><br><span class=\"line\">    NEVER(5),</span><br><span class=\"line\">    NESTED(6);</span><br><span class=\"line\"></span><br><span class=\"line\">    private final int value;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Propagation(int value) &#123;</span><br><span class=\"line\">        this.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int value() &#123;</span><br><span class=\"line\">        return this.value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>七种事物传播类型 默认为： <code>REQUIRED</code></p>\n",
            "tags": [
                "数据库"
            ]
        },
        {
            "id": "https://fairyeye.github.io/2023/06/05/%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/",
            "url": "https://fairyeye.github.io/2023/06/05/%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/",
            "title": "Sql小技巧",
            "date_published": "2023-06-05T05:49:50.604Z",
            "content_html": "<p>MySQL 并不是跳过 offset 行，而是取 offset+N 行，然后返回放弃前 offset 行，返回 N 行。</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 反例（耗时129.570s）</span><br><span class=\"line\">select * from task_result LIMIT 20000000, 10;</span><br><span class=\"line\"></span><br><span class=\"line\"># 正例（耗时5.114s）</span><br><span class=\"line\">SELECT a.* FROM task_result a, (select id from task_result LIMIT 20000000, 10) b where a.id = b.id;</span><br><span class=\"line\"></span><br><span class=\"line\"># 说明</span><br><span class=\"line\">task_result表为生产环境的一个表，总数据量为3400万，id为主键，偏移量达到2000万</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"获取一条数据时的limit-1\"><a class=\"anchor\" href=\"#获取一条数据时的limit-1\">#</a> 获取一条数据时的 Limit 1</h3>\n<p>在很多情况下我们已知数据仅存在一条，此时我们应该告知数据库只用查一条，否则将会转化为全表扫描</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 反例（耗时2424.612s）</span><br><span class=\"line\">select * from task_result where unique_key = &#x27;ebbf420b65d95573db7669f21fa3be3e_861414030800727_48&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\"># 正例（耗时1.036s）</span><br><span class=\"line\">select * from task_result where unique_key = &#x27;ebbf420b65d95573db7669f21fa3be3e_861414030800727_48&#x27; LIMIT 1;</span><br><span class=\"line\"></span><br><span class=\"line\"># 说明</span><br><span class=\"line\">task_result表为生产环境的一个表，总数据量为3400万，where条件非索引字段，数据所在行为第19486条记录</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"批量插入\"><a class=\"anchor\" href=\"#批量插入\">#</a> 批量插入</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 反例</span><br><span class=\"line\">INSERT into person(name,age) values(&#x27;A&#x27;,24)</span><br><span class=\"line\">INSERT into person(name,age) values(&#x27;B&#x27;,24)</span><br><span class=\"line\">INSERT into person(name,age) values(&#x27;C&#x27;,24)</span><br><span class=\"line\"></span><br><span class=\"line\"># 正例</span><br><span class=\"line\">INSERT into person(name,age) values(&#x27;A&#x27;,24),(&#x27;B&#x27;,24),(&#x27;C&#x27;,24);</span><br><span class=\"line\"></span><br><span class=\"line\"># 说明</span><br><span class=\"line\">比较常规，就不多做说明了</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZWExNmRlZGU1MWQ0NTQ3MGI0ZmZjNWI/dXRtX3NvdXJjZT1nb2xkX2Jyb3dzZXJfZXh0ZW5zaW9u\">https://juejin.im/post/5ea16dede51d45470b4ffc5b?utm_source=gold_browser_extension</span></p>\n",
            "tags": [
                "数据库",
                "mysql"
            ]
        },
        {
            "id": "https://fairyeye.github.io/2023/06/05/Springboot%E8%BF%94%E5%9B%9Ehtml/",
            "url": "https://fairyeye.github.io/2023/06/05/Springboot%E8%BF%94%E5%9B%9Ehtml/",
            "title": "Springboot",
            "date_published": "2023-06-05T05:49:50.603Z",
            "content_html": "<h1 id=\"springboot返回html\"><a class=\"anchor\" href=\"#springboot返回html\">#</a> Springboot 返回 html</h1>\n<p>注：Springboot 的版本 2.1.3.RELEASE</p>\n<p><em>List-1</em> application.properties 文件</p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.<span class=\"property\">port</span>=<span class=\"number\">8080</span></span><br><span class=\"line\">#url中，项目的前缀</span><br><span class=\"line\">server.<span class=\"property\">servlet</span>.<span class=\"property\">context</span>-path=/project</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">spring.<span class=\"property\">mvc</span>.<span class=\"property\">view</span>.<span class=\"property\">prefix</span>=/</span><br><span class=\"line\">spring.<span class=\"property\">mvc</span>.<span class=\"property\">view</span>.<span class=\"property\">suffix</span>=.<span class=\"property\">html</span></span><br></pre></td></tr></table></figure></p>\n<p>整体结构如下图 1 所示，html 要放在 static 下，不是 templates 下</p>\n<p><img data-src=\"https://ask.qcloudimg.com/http-save/yehe-5089774/1k8adq8jn7.jpeg?imageView2/2/w/1620\" alt=\"img\" /></p>\n<p>图１</p>\n<p><em>List-2</em> HelloController 的内容如下</p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> lombok.<span class=\"property\">extern</span>.<span class=\"property\">slf4j</span>.<span class=\"property\">Slf4j</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.<span class=\"property\">springframework</span>.<span class=\"property\">stereotype</span>.<span class=\"property\">Controller</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.<span class=\"property\">springframework</span>.<span class=\"property\">web</span>.<span class=\"property\">bind</span>.<span class=\"property\">annotation</span>.<span class=\"property\">RequestMapping</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"title class_\">Slf4</span>j</span><br><span class=\"line\">@<span class=\"title class_\">Controller</span></span><br><span class=\"line\">public <span class=\"keyword\">class</span> <span class=\"title class_\">HelloController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @<span class=\"title class_\">RequestMapping</span>(value = <span class=\"string\">&quot;/hello&quot;</span>)</span><br><span class=\"line\">    public <span class=\"title class_\">String</span> <span class=\"title function_\">index</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        log.<span class=\"title function_\">info</span>(<span class=\"string\">&quot;收到请求&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;html/hello&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><em>List-3</em> 启动 springboot，之后在浏览器中输入</p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#返回index.<span class=\"property\">html</span>的内容</span><br><span class=\"line\"><span class=\"attr\">http</span>:<span class=\"comment\">//localhost:8080/project/</span></span><br><span class=\"line\"></span><br><span class=\"line\">#返回hello.<span class=\"property\">html</span>的内容</span><br><span class=\"line\"><span class=\"attr\">http</span>:<span class=\"comment\">//localhost:8080/project/hello</span></span><br></pre></td></tr></table></figure></p>\n<p>网上很多关于模板的（Thymeleaf 、FreeMarker 等），但是我不需要，我只需要纯的 html。</p>\n<p>index.html 是 springboot 的默认 welcome page。</p>\n<h2 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h2>\n<ol>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9lYjRjMGZjMmRmYzQ=\">https://www.jianshu.com/p/eb4c0fc2dfc4</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctYm9vdC9kb2NzL2N1cnJlbnQvcmVmZXJlbmNlL2h0bWxzaW5nbGUvI2Jvb3QtZmVhdHVyZXMtc3ByaW5nLW12Yy1zdGF0aWMtY29udGVudA==\">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-spring-mvc-static-content</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctYm9vdC9kb2NzL2N1cnJlbnQvcmVmZXJlbmNlL2h0bWxzaW5nbGUvI2Jvb3QtZmVhdHVyZXMtc3ByaW5nLW12Yy13ZWxjb21lLXBhZ2U=\">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-spring-mvc-welcome-page</span></li>\n</ol>\n<p>​     (adsbygoogle = window.adsbygoogle || []).push({});</p>\n",
            "tags": [
                "基础"
            ]
        },
        {
            "id": "https://fairyeye.github.io/2023/06/05/StringToInteger/",
            "url": "https://fairyeye.github.io/2023/06/05/StringToInteger/",
            "title": "StringToInteger",
            "date_published": "2023-06-05T05:49:50.603Z",
            "content_html": "<h1 id=\"string-转-integer\"><a class=\"anchor\" href=\"#string-转-integer\">#</a> String 转 Integer</h1>\n<h2 id=\"1integer的parseint方法\"><a class=\"anchor\" href=\"#1integer的parseint方法\">#</a> 1.Integer 的 parseInt 方法</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String string = &quot;123&quot;;</span><br><span class=\"line\">int value = Integer.parseInt(string);</span><br><span class=\"line\">System.out.println(&quot;stringToInt----------&gt;&quot;+value);</span><br><span class=\"line\"></span><br><span class=\"line\">结果：StringToInt----------&gt;123</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2integer的valueof方法\"><a class=\"anchor\" href=\"#2integer的valueof方法\">#</a> 2.Integer 的 valueOf 方法</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String string = &quot;123&quot;;</span><br><span class=\"line\">Integer value = Integer.valueOf(string);</span><br><span class=\"line\">System.out.println(&quot;stringToInt1----------&gt;&quot;+value);</span><br><span class=\"line\"></span><br><span class=\"line\">结果：StringToInt1----------&gt;123</span><br></pre></td></tr></table></figure></p>\n<p>以上两种方法都是可行的。</p>\n<p>但是会有特殊的情况，比如：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String string = &quot;abc&quot;;</span><br><span class=\"line\">int value = Integer.parseInt(string);</span><br><span class=\"line\">System.out.println(&quot;stringToInt----------&gt;&quot;+value);</span><br><span class=\"line\"></span><br><span class=\"line\">结果：</span><br><span class=\"line\">Exception in thread &quot;main&quot; java.lang.NumberFormatException: For input string: &quot;abc&quot;</span><br><span class=\"line\">\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)</span><br><span class=\"line\">\tat java.lang.Integer.parseInt(Integer.java:580)</span><br><span class=\"line\">\tat java.lang.Integer.parseInt(Integer.java:615)</span><br><span class=\"line\">\tat com.hand.todo.infra.util.StringToInt.stringToInt(StringToInt.java:16)</span><br><span class=\"line\">\tat com.hand.todo.infra.util.StringToInt.main(StringToInt.java:10)</span><br></pre></td></tr></table></figure></p>\n<p>使用 stringToInt1 () 也会返回同样的错误。</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static Integer valueOf(String s) throws NumberFormatException &#123;</span><br><span class=\"line\">    return Integer.valueOf(parseInt(s, 10));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>valueOf () 调用了 parseInt ()，所以返回同样的错误是正常的。</p>\n<p>按照正常的逻辑来说，我们需要对这个错误进行处理，比如：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String string = &quot;abc&quot;;</span><br><span class=\"line\">int value = 0;</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">    value = Integer.parseInt(string);</span><br><span class=\"line\">&#125; catch (NumberFormatException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(&quot;StringToInt----------&gt;&quot;+value);</span><br><span class=\"line\"></span><br><span class=\"line\">结果：</span><br><span class=\"line\">java.lang.NumberFormatException: For input string: &quot;abc&quot;</span><br><span class=\"line\">\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)</span><br><span class=\"line\">\tat java.lang.Integer.parseInt(Integer.java:580)</span><br><span class=\"line\">\tat java.lang.Integer.parseInt(Integer.java:615)</span><br><span class=\"line\">\tat com.hand.todo.infra.util.StringToInt.stringToInt(StringToInt.java:18)</span><br><span class=\"line\">\tat com.hand.todo.infra.util.StringToInt.main(StringToInt.java:10)</span><br><span class=\"line\">StringToInt----------&gt;0</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，虽然依然报错，但是程序还是继续执行了。</p>\n<p>然后回到主题。</p>\n<h2 id=\"3guava-的-ints-结合-java8-的-optional\"><a class=\"anchor\" href=\"#3guava-的-ints-结合-java8-的-optional\">#</a> 3.Guava 的 Ints 结合 Java8 的 Optional</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String string = &quot;abc&quot;;</span><br><span class=\"line\">Integer value = Optional.ofNullable(string)</span><br><span class=\"line\">        .map(Ints::tryParse)</span><br><span class=\"line\">        .orElse(0);</span><br><span class=\"line\"> System.out.println(&quot;StringToInt2----------&gt;&quot; + value);</span><br><span class=\"line\"> </span><br><span class=\"line\"> 结果：StringToInt2----------&gt;0</span><br></pre></td></tr></table></figure></p>\n<p>可以在转换失败的时候为他设置默认值：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String string = &quot;abc&quot;;</span><br><span class=\"line\">Integer value = Optional.ofNullable(string)</span><br><span class=\"line\">        .map(Ints::tryParse)</span><br><span class=\"line\">        .orElse(100);</span><br><span class=\"line\"> System.out.println(&quot;StringToInt2----------&gt;&quot; + value);</span><br><span class=\"line\"> </span><br><span class=\"line\"> 结果：StringToInt2----------&gt;100</span><br></pre></td></tr></table></figure></p>\n<p><strong>写在末尾：之所以写这么详细是因为最开始的时候我很菜，看别人写的文档都很简单，虽然可以解决问题，但是却不解其意，所以写的啰嗦一点，对新手比较友好。</strong></p>\n<p>​\t&lt;/body&gt;</p>\n<p>&lt;/html&gt;</p>\n",
            "tags": [
                "java"
            ]
        },
        {
            "id": "https://fairyeye.github.io/2023/06/05/%E9%9C%80%E8%A6%81%E6%8E%8C%E6%8F%A1%E4%BB%A5%E4%B8%8B%E7%9F%A5%E8%AF%86/",
            "url": "https://fairyeye.github.io/2023/06/05/%E9%9C%80%E8%A6%81%E6%8E%8C%E6%8F%A1%E4%BB%A5%E4%B8%8B%E7%9F%A5%E8%AF%86/",
            "title": "需要掌握以下知识",
            "date_published": "2023-06-05T05:49:50.603Z",
            "content_html": "<ol>\n<li>\n<p>导入数据<br />\n<img data-src=\"https://s3.bmp.ovh/imgs/2023/01/18/7595fe99b5f3116a.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>匹配规则<br />\n<img data-src=\"https://s3.bmp.ovh/imgs/2023/01/18/0cb7d29296c95699.png\" alt=\"\" /><br />\n 3. 生成报告和数据<br />\n<img data-src=\"https://s3.bmp.ovh/imgs/2023/01/18/9f9bd4684069b961.png\" alt=\"\" /></p>\n</li>\n</ol>\n<p>作为一名三年经验的 Java 开发人员，你需要掌握以下知识：</p>\n<ol>\n<li>\n<p>Java 基础知识：掌握 Java 的基本语法、面向对象编程、常用数据结构和算法等，能够熟练使用 Java 语言进行开发。</p>\n</li>\n<li>\n<p>Java Web 开发框架：熟悉 Spring、SpringMVC 和 MyBatis 等主流的 Java Web 开发框架，能够使用这些框架进行 Web 应用程序的开发。</p>\n</li>\n<li>\n<p>数据库知识：熟悉关系型数据库和 NoSQL 数据库的使用，掌握 SQL 语言和数据库设计的基本知识。</p>\n</li>\n<li>\n<p>Web 前端技术：熟悉 HTML、CSS、JavaScript、jQuery 等前端开发技术，能够与前端开发人员协同工作，完成 Web 应用程序的前后端分离开发。</p>\n</li>\n<li>\n<p>网络编程知识：熟悉 TCP/IP 协议、HTTP 协议等网络编程相关的知识，能够使用 Java 进行网络编程开发。</p>\n</li>\n<li>\n<p>分布式系统开发：了解分布式系统的基本概念和原理，熟悉 Spring Cloud、Dubbo 等分布式系统开发框架，能够进行分布式系统的设计和开发。</p>\n</li>\n<li>\n<p>微服务架构：了解微服务架构的基本概念和原理，熟悉 Spring Boot、Spring Cloud 等微服务开发框架，能够进行微服务的设计和开发。</p>\n</li>\n<li>\n<p>工具和技术：掌握 Maven、Git、Jenkins 等常用的工具和技术，能够进行代码管理、构建和部署。</p>\n</li>\n<li>\n<p>技术栈扩展：根据自身的兴趣和职业发展需求，了解其他的 Java 技术栈，例如大数据处理、人工智能、区块链等，不断扩展自己的技术领域。</p>\n</li>\n</ol>\n<p>除了以上技术知识，你还需要具备良好的团队协作能力、学习能力和解决问题的能力，能够快速适应不同的项目需求和开发环境，不断提升自己的技术水平和职业素养。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2023/09/18/2deefcad5a554594.png\" alt=\"\" /></p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2023/09/18/8b2889661b1c45e0.png\" alt=\"\" /></p>\n",
            "tags": [
                "学习"
            ]
        },
        {
            "id": "https://fairyeye.github.io/2023/06/05/Java%208%20Stream/",
            "url": "https://fairyeye.github.io/2023/06/05/Java%208%20Stream/",
            "title": "List stream",
            "date_published": "2023-06-05T05:49:50.602Z",
            "content_html": "<p>通过 <code>workOrederNum</code>  字段排序</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;ProduceOrderDTO&gt; collect = list.stream().sorted(Comparator.comparing(ProduceOrderDTO::getWorkOrderNum)).collect(Collectors.toList());</span><br></pre></td></tr></table></figure></p>\n<p>查出 <code>InstructionPoDTO</code>  中 <code>InstructionDocNum</code>  作为 list</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 筛选出不重复的 instructionDocNum</span></span><br><span class=\"line\">List&lt;String&gt; instructionDocNums = read.stream().map(InstructionPoDTO::getInstructionDocNum).distinct().collect(Collectors.toList());</span><br></pre></td></tr></table></figure></p>\n<p>筛选所有 <code>instructionDocNum = 123</code>  的对象</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;InstructionPoDTO&gt; instructionPoDTOS = read.stream().filter(instructionPoDTO -&gt;</span><br><span class=\"line\">     instructionPoDTO.getInstructionDocNum().equals(<span class=\"string\">&quot;123&quot;</span>)).collect(Collectors.toList());</span><br></pre></td></tr></table></figure></p>\n<p>查询出第一个</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">instructionDocId</span> <span class=\"operator\">=</span> instructionDocs.stream().findFirst().get();</span><br></pre></td></tr></table></figure></p>\n<p>设置 <code>typeCode</code>  为 key， <code>list</code>  的对象为 <code>value</code></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, MtGenType&gt; typesMap = types.stream().collect(Collectors.toMap(t -&gt; t.getTypeCode(), t -&gt; t));</span><br></pre></td></tr></table></figure></p>\n<p>// 通过字段去重</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">instructionSapStockDTOS.stream().collect(Collectors.collectingAndThen(Collectors.toCollection(()-&gt; new TreeSet&lt;&gt;(Comparator.comparing(o -&gt; o.getMaterial()+&quot;;&quot;+o.getPlant()+&quot;;&quot;+o.getStorage()+&quot;;&quot;+o.getBatch()+&quot;;&quot;+o.getSpecialStock()))), ArrayList::new));</span><br></pre></td></tr></table></figure></p>\n<p>GROUP BY</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, List&lt;WmsIqcRecord&gt;&gt; map = records.stream().collect(Collectors.groupingBy(iqcRecord -&gt; &#123;</span><br><span class=\"line\">                    if (StringUtils.equals(&quot;TO_DO&quot;, iqcRecord.getStatus())) &#123;</span><br><span class=\"line\">                        switch (iqcRecord.getDealMethod()) &#123;</span><br><span class=\"line\">                            case &quot;RELEASE&quot;:</span><br><span class=\"line\">                                return &quot;TO_RELEASE&quot;;</span><br><span class=\"line\">                            case &quot;FREEZE&quot;:</span><br><span class=\"line\">                                return &quot;TO_FREEZE&quot;;</span><br><span class=\"line\">                            case &quot;RETURN&quot;:</span><br><span class=\"line\">                                return &quot;TO_RETURN&quot;;</span><br><span class=\"line\">                            default:</span><br><span class=\"line\">                                return &quot;TO_DO&quot;;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; else if (StringUtils.equals(&quot;DONE&quot;, iqcRecord.getStatus())) &#123;</span><br><span class=\"line\">                        switch (iqcRecord.getDealMethod()) &#123;</span><br><span class=\"line\">                            case &quot;RELEASE&quot;:</span><br><span class=\"line\">                                return &quot;RELEASE_DONE&quot;;</span><br><span class=\"line\">                            case &quot;FREEZE&quot;:</span><br><span class=\"line\">                                return &quot;FREEZE_DONE&quot;;</span><br><span class=\"line\">                            case &quot;RETURN&quot;:</span><br><span class=\"line\">                                return &quot;RETURN_DONE&quot;;</span><br><span class=\"line\">                            default:</span><br><span class=\"line\">                                return &quot;DONE&quot;;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        return &quot;DEAL&quot;;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;));</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//        List&lt;LocalDate&gt; collect = localDates.stream().sorted((var1, var2) -&gt; &#123;</span><br><span class=\"line\">//            if (var1.isBefore(var2)) &#123;</span><br><span class=\"line\">//                return -1;</span><br><span class=\"line\">//            &#125;</span><br><span class=\"line\">//            return 1;</span><br><span class=\"line\">//        &#125;).collect(Collectors.toList());</span><br><span class=\"line\">//        System.out.println(localDates.stream().sorted().collect(Collectors.toList()));</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "Java"
            ]
        }
    ]
}