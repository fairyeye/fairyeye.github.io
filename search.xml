<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>内部类问题</title>
    <url>/2020/04/14/14/</url>
    <content><![CDATA[<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">错误描述信息：</span><br><span class="line">org.fairy.eye.domin.entity.User is not an enclosing class</span><br></pre></td></tr></table></figure></p>
<p>​		在 new 一个内部类的对象时，idea 会生成如下的代码。</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Info 是User的内部类</span><br><span class="line">User.Info info = new User.Info();</span><br></pre></td></tr></table></figure></p>
<p>​		然后会提示报错  <code>org.fairy.eye.domin.entity.User is not an enclosing class</code></p>
<p>​		如果内部类没有用  <code>static</code>  修饰的话，是不能这样 new 的。</p>
<p>​		需要有外部类实例对象来支持。</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User user = new User();</span><br><span class="line">User.Info info = new user.Info();</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>dairy</tag>
      </tags>
  </entry>
  <entry>
    <title>GIT代码无法合并+本地构建成功服务器构建失败</title>
    <url>/2020/04/13/13/</url>
    <content><![CDATA[<h4 id="1git相关"><a class="anchor" href="#1git相关">#</a> 1.GIT 相关</h4>
<h5 id="场景"><a class="anchor" href="#场景">#</a> 场景：</h5>
<p>​		GIT 版本出了点问题，无法正常合并代码</p>
<h5 id="具体描述"><a class="anchor" href="#具体描述">#</a> 具体描述：</h5>
<p>​		由于误操作，导致我的本地分支和 dev 分支不同，在 GIT 上对比的时候显示无差别，但是实际上最近一次的提交是没有合并的。</p>
<p>​		无奈之下，我选择回滚代码。</p>
<h5 id="具体操作"><a class="anchor" href="#具体操作">#</a> 具体操作：</h5>
<p><strong>第一种方法： <code>注意：这种方法会把之后的代码完全覆盖掉，不建议使用，除非这个分支只有你自己操作，或者你回滚的版本之后没有别的人提交</code> </strong></p>
<ol>
<li>
<p>首先要找到你要回滚的版本号。</p>
<p>​	在 idea 中操作：右键项目 -&gt; Git -&gt; Show History -&gt; 右键提交的版本 -&gt; Copy Revision Number。</p>
<p>​	在 GIT 中操作：找到提交的历史，SHA 值，即为版本号。</p>
</li>
<li>
<p>Git Bush 命令行 /idea TerMinal 命令行</p>
<p>​	 <code>git reset --hard 版本号</code></p>
</li>
</ol>
<p><strong>第二种方法：</strong></p>
<ol>
<li>找到版本号，同上。</li>
<li>右键项目 -&gt; Git -&gt; Repository -&gt; Reset HEAD</li>
<li>在 To Commit 中输入版本号</li>
</ol>
<p><img data-src="C:%5CUsers%5Chuapeng.zhang%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200414092630073.png" alt="回滚代码" /></p>
<h5 id="最后"><a class="anchor" href="#最后">#</a> 最后：</h5>
<p>​		<strong>记得一定要提交代码，即使看起来没有要 push 的东西，否则 git pull 之后等于没回滚。</strong></p>
<h4 id="2构建相关"><a class="anchor" href="#2构建相关">#</a> 2. 构建相关</h4>
<h5 id="场景-2"><a class="anchor" href="#场景-2">#</a> 场景：</h5>
<p>​		回滚代码之后，本地可以成功构建，但服务器端无法正常构建。</p>
<h5 id="具体描述-2"><a class="anchor" href="#具体描述-2">#</a> 具体描述：</h5>
<p>​		服务器端构建一直失败，好像是拉取到了错误版本的代码。</p>
<h5 id="具体操作-2"><a class="anchor" href="#具体操作-2">#</a> 具体操作：</h5>
<p>​		暴脾气的我本来打算把项目删了重新拉一个下来，后来忍住了，在服务器端回滚了一下代码，然后手动构建了一下，居然成功了，完结。</p>
<h5 id="最后-2"><a class="anchor" href="#最后-2">#</a> 最后：</h5>
<p>​		虽然没什么有用的东西，不过思路还是有的。</p>
<p>​		首先你要确认本地构建的代码是否和服务器完全相同、服务器构建的时候是否 pull 了最新的代码...</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">随机限定皮肤礼:0.2%;</span><br><span class="line">碎月令:0.2%;</span><br><span class="line">随机传说皮肤:0.5%;</span><br><span class="line">随机皮肤:13.5%;</span><br><span class="line">剑意(8~68个):58.5%;</span><br><span class="line">皮肤碎片x8:15%;</span><br><span class="line">锦鲤纳福亲密度道具x8:12.1%;</span><br><span class="line"></span><br><span class="line">限定-288个、传说-120个、史诗-60个、勇者-40个、伴生-20个。</span><br><span class="line"></span><br><span class="line">其中，随机限定皮肤礼的奖励概率分布为:李白-碎月剑心:1%;甄姬-幽恒:33%;后羿-辉光之辰:33%;猪八戒-猪悟能:33%;</span><br><span class="line">随机皮肤的奖励概率分布为:史诗皮肤:10%，勇者皮肤:30%，伴生皮肤:60%;具体包含皮肤可见活动首页-【奖池】内信息;</span><br><span class="line">剑意的奖励概率分布为:剑意x8:37.6%;剑意x18:51.3%;剑意x28:9.4%</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">A礼盒:0.2%; 1%：0个剑意 99%：288个剑意</span><br><span class="line">B礼盒:0.2%; 498个剑意</span><br><span class="line">C礼盒:0.5%;   120个剑意</span><br><span class="line">D礼盒:13.5%;   10%：60个剑意，30%：40个剑意，60%：20个剑意</span><br><span class="line">E礼盒(8~68个):58.5%;   37.6%：8个;51.3%:18个剑意;9.4%:28个剑意；12%:68个剑意</span><br><span class="line">F礼盒（皮肤碎片）0个:15%;</span><br><span class="line">G礼盒0个:12.1%;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>dairy</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo</title>
    <url>/2020/04/15/15/</url>
    <content><![CDATA[<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># hexo shoka</span><br><span class="line">https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/config/#%E6%96%87%E7%AB%A0%E8%AF%84%E8%AE%BA</span><br><span class="line"></span><br><span class="line"># 隐藏文章</span><br><span class="line">https://www.cnblogs.com/yangstar/articles/16690342.html</span><br></pre></td></tr></table></figure></p>
<p><img data-src="https://s3.bmp.ovh/imgs/2023/06/14/2a82a49784a22cbf.png" alt="" /></p>
]]></content>
      <tags>
        <tag>hexo,theme,shoka</tag>
      </tags>
  </entry>
  <entry>
    <title>231104</title>
    <url>/2023/09/25/231104/</url>
    <content><![CDATA[<h3 id="pur-24166"><a class="anchor" href="#pur-24166">#</a> pur-24166</h3>
<p>返回消息：<br />
scux.spuc.lotus_nyo_no_enabled_master_enable_bank<br />
scux.spuc.lotus_nyo_no_erp_supplier<br />
 埋点：<br />
SPUC_SUBMIT_PO</p>
<h3 id="pur-26089"><a class="anchor" href="#pur-26089">#</a> pur-26089</h3>
<p>组合业务对象：<br />
SRM_C_SRM_SODR_PO_HEADER<br />
 个性化单元：<br />
SODR.ORDER_TRACKING_LIST.EXPORT</p>
<h3 id="pur-25937"><a class="anchor" href="#pur-25937">#</a> pur-25937</h3>
<p>平台供应商多语言待确定</p>
<p>页面个性化：<br />
SODR.WORKSPACE_DETAILALL.SEARCH</p>
<h3 id="pur-26467"><a class="anchor" href="#pur-26467">#</a> pur-26467</h3>
<p>独立脚本 + API 发布：<br />
SCUX_LDJT_QUERY_LAST_PURCHASE_PRICE</p>
<h3 id="pur-26322"><a class="anchor" href="#pur-26322">#</a> pur-26322</h3>
<p>独立脚本 + API：<br />
SCUX_WATSONS_UPDATE_ATTACHMENT_WFL<br />
 适配器：<br />
SCUX_MTC_PO_HEADER_INFO<br />
SPUC_ORDER_QUERY_PROCESS_ACTION</p>
<h3 id="pur-26427"><a class="anchor" href="#pur-26427">#</a> pur-26427</h3>
<p>配置表：<br />
scux_srm_carlsberg_contract_amount_change_record<br />
 适配器：<br />
SPUC_ORDER_SYNC_IMP_INSERT_PROCESS<br />
SPUC_BEFORE_ERP_CLOSE_OR_CANCEL_PO</p>
<p>更新时：判断取消状态和表里的取消状态</p>
<h3 id="pur-26689"><a class="anchor" href="#pur-26689">#</a> pur-26689</h3>
<p>独立脚本：<br />
SCUX_VN_SCM_PO_RETURN_OA<br />
 适配器：<br />
重新同步：SPUC_RE_SYNC_ERP</p>
<p>值集：<br />
SPUC.SYNC_EXP_TYPE<br />
SPUC.SYNC_INTERFACE_TYPE</p>
<h3 id="pur-26080"><a class="anchor" href="#pur-26080">#</a> pur-26080</h3>
<p>适配器:<br />
SPUC_SUBMIT_PO<br />
SPUC_ORDER_APPROVED_EVENT</p>
<h3 id="pur-26150"><a class="anchor" href="#pur-26150">#</a> pur-26150</h3>
<pre><code>配置表：
	scux_srm_sanning_fee_info
	scux_srm_sanning_fee_calculate_type
API:
	查询（返回配置表数据，且翻译税率、关联协议：SCUX_SANNING_FEE_INFO_QUERY    /marmot-api/v49ECXUYP60iaTD6VDYCeIrqbnlzgazaL5HYWyv9ScGg
	查询2 及币种精度、CNY币种ID、CNY、费用计算类型对应关系 SCUX_SANNING_FEE_OTHER_QUERY
	保存 有ID是更新，没有ID是新增  SCUX_SANNING_FEE_INFO_SAVE_OR_UPDATE  /marmot-api/v49ECXUYP60iaTD6VDYCeIpQpEumLeekdKWnTERvKJjibX4rd3PkiakwNOzdMU5JBn8
	删除 根据ID删除，支持批量删除   SCUX_SANNING_FEE_INFO_DEL /marmot/v1/20990/marmot-api/v49ECXUYP60iaTD6VDYCeIiab6r6sOKdPfrdSqia2ePicuU
	更新预付标识：SCUX_SANNING_FEE_INFO_UPDATE_PAY_FLAG
	查询: 给结算用  SCUX_SANNING_FEE_INFO_QUERY_FOR_SETTLE
	QB：SCUX_SANNING_FEE_INFO_QUERY_FOR_SETTLE
独立脚本：
	SCUX_SANNING_FEE_INFO_QUERY
	SCUX_SANNING_FEE_OTHER_QUERY
	SCUX_SANNING_FEE_INFO_SAVE_OR_UPDATE
	SCUX_SANNING_FEE_INFO_DEL
埋点：
	保存、提交计算头个性化字段金额：SPUC_ORDER_PRICE_SOURCE_TYPE
	整单取消：SPUC_ALL_CANCEL_PO_HEADER
	按行取消：SPUC_LINE_CANCEL_PO_LINE
	复制：
		SPUC_ORDER_SAVE_DATA_CONVERSION_AFTER（写入数据
		SPUC_ORDER_SAVE_DATA_CONVERSION_NEWPRICE_AFTER
		SCUX_ORDER_PO_COPY_LINE（记录订单行ID
</code></pre>
<h3 id="pur-27164"><a class="anchor" href="#pur-27164">#</a> pur-27164</h3>
<pre><code>	适配器：
		SPUC_ORDER_SYNC_IMP_INSERT_PROCESS
		SPUC_ORDER_SYNC_IMP_UPDATE_PROCESS
	配置表：
		scux_srm_daqo_po_drawing_info
	API+独立脚本
		查询：SCUX_DAQO_PO_DRAWING_INFO_QUERY
		导出：SCUX_DAQO_PO_DRAWING_INFO_EXPORT
		下载：
</code></pre>
<h3 id="bug-pur-26901-spuc_order_batch_submit_handle"><a class="anchor" href="#bug-pur-26901-spuc_order_batch_submit_handle">#</a> BUG pur-26901   SPUC_ORDER_BATCH_SUBMIT_HANDLE</h3>
<p><img data-src="https://s3.bmp.ovh/imgs/2023/10/25/4c3f3f9377020435.png" alt="" /></p>
<p><span class="kbd">Ctrl</span> + <span class="kbd red">C</span></p>
]]></content>
      <tags>
        <tag>work</tag>
        <tag>迭代</tag>
      </tags>
  </entry>
  <entry>
    <title>Delete/Truncate/Drop</title>
    <url>/2023/06/05/Delete%20&amp;%20Truncate/</url>
    <content><![CDATA[<p>假如把一张表比作一间教室，数据比作学生。</p>
<p><code>drop</code>  就是把这件教师炸掉了，教室都没了，更不用说数据了。</p>
<p><code>truncate</code>  就是把学生开除了，离开了，再也没有了。</p>
<p><code>delete</code>  就是学生出去了，虽然他们可能不会回来了，但是位置还是要留着。</p>
<h4 id="drop"><a class="anchor" href="#drop">#</a> Drop</h4>
<p>直接删掉表，这个没什么好说的。</p>
<p>包括表结构，表数据，全部删除，占用的空间也会释放。</p>
<h4 id="truncate"><a class="anchor" href="#truncate">#</a> Truncate</h4>
<p>截断表，会释放空间。</p>
<h4 id="delete"><a class="anchor" href="#delete">#</a> Delete</h4>
<p>删除数据</p>
]]></content>
      <tags>
        <tag>dairy</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos</title>
    <url>/2023/10/12/Centos/</url>
    <content><![CDATA[<h3 id="1frpc内网穿透"><a class="anchor" href="#1frpc内网穿透">#</a> 1.frpc 内网穿透</h3>
<h3 id="2-青龙"><a class="anchor" href="#2-青龙">#</a> 2. 青龙</h3>
<h3 id="3xdd-plus"><a class="anchor" href="#3xdd-plus">#</a> 3.xdd-plus</h3>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucXFtYXRlLmNuLzY1Mi5odG1s">https://www.qqmate.cn/652.html</span><br />
1. 进入 xdd 目录找到 device.json 文件<br />
 2. 双击打开，修改： “protocol”:0, 改为 &quot;protocol&quot;:2,</p>
<h2 id="frpc"><a class="anchor" href="#frpc">#</a> FRPC</h2>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 在`frpc.exe`所在的文件夹中，右键点击空白处，选择“新建” -&gt; “快捷方式”。</span><br><span class="line">2. 在创建快捷方式向导中，浏览并选择`frpc.exe`文件，然后点击“下一步”。</span><br><span class="line">3. 给快捷方式命名，然后点击“完成”。</span><br><span class="line">4. 找到刚刚创建的快捷方式，右键点击它，选择“属性”。</span><br><span class="line">5. 在“快捷方式”标签页下，找到“目标”字段。默认情况下，它应该只包含`&quot;C:\Path\To\frpc.exe&quot;`（假设`frpc.exe`在`C:\Path\To`目录下）。</span><br><span class="line">6. 在“目标”字段的末尾，添加一个空格，然后输入`-c frpc.toml`，确保整个命令看起来像这样：`&quot;C:\Path\To\frpc.exe&quot; -c frpc.toml`。</span><br><span class="line">7. 点击“应用”和“确定”保存更改。</span><br><span class="line">8. 将这个修改过的快捷方式拖放到“启动”文件夹中。这样，每次您登录Windows时，`frpc.exe`都会以`frpc.toml`作为配置文件运行。</span><br><span class="line"></span><br><span class="line">请注意，这种方法不会在后台静默运行`frpc.exe`，它会在用户登录时打开一个命令行窗口。如果您想要`frpc.exe`在后台运行而不显示命令行窗口，您应该考虑使用任务计划程序或将其安装为服务。</span><br></pre></td></tr></table></figure></p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. **使用任务计划程序**:</span><br><span class="line">    </span><br><span class="line">    - 打开“任务计划程序”（可以在开始菜单中搜索“任务计划程序”来找到它）。</span><br><span class="line">    - 创建一个新的基本任务，设置触发器按照您的需要启动任务（例如，计算机启动时）。</span><br><span class="line">    - 在操作步骤中，选择“启动程序”，然后浏览并选择`frpc.exe`，并在“添加参数（可选）”中输入`-c frpc.toml`。</span><br><span class="line">2. **使用Windows服务**:</span><br><span class="line">    </span><br><span class="line">    - 使用第三方工具如[nssm](https://nssm.cc/)（Non-Sucking Service Manager）将`frpc.exe`安装为一个服务。</span><br><span class="line">    - 下载并解压`nssm.exe`。</span><br><span class="line">    - 打开命令提示符或PowerShell，导航到`nssm.exe`所在的文件夹。</span><br><span class="line">    - 运行命令`nssm install &lt;ServiceName&gt;`来创建新的服务，然后`nssm set &lt;ServiceName&gt; AppPath &lt;PathTofrpc.exe&gt;`设置应用路径，接着`nssm set &lt;ServiceName&gt; AppParameters -c frpc.toml`设置参数。</span><br><span class="line">    - 最后，启动服务使用`nssm start &lt;ServiceName&gt;`。</span><br><span class="line">3. **使用批处理文件**:</span><br><span class="line">    </span><br><span class="line">    - 创建一个批处理文件（`.bat`），在其中写入`frpc.exe -c frpc.toml`。</span><br><span class="line">    - 将批处理文件放置在`frpc.exe`相同的文件夹中。</span><br><span class="line">    - 您可以双击运行此批处理文件，或者将其添加到启动文件夹以在用户登录时自动运行。</span><br></pre></td></tr></table></figure></p>
<h2 id="端口"><a class="anchor" href="#端口">#</a> 端口</h2>
<h5 id="3001"><a class="anchor" href="#3001">#</a> 3001</h5>
<p><code>账号：li  gz123456</code></p>
<h2 id=""><a class="anchor" href="#">#</a> </h2>
<p>开机启动 frpc 全部服务</p>
<p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Frp Multiple Client Services</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/root/frpc/frpc/start_all_frpc.sh</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5s</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p>
<p>start_all_frpc.sh</p>
<p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">/root/frpc/frpc -c /root/frpc/frpc/frpc.toml &amp;</span><br><span class="line">/root/frpc/frpc -c /root/frpc/frpc/frpc-29252.toml &amp;</span><br><span class="line">/root/frpc/frpc -c /root/frpc/frpc/frpc-3001.toml &amp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">wait</span></span><br></pre></td></tr></table></figure></p>
<h2 id="nginx"><a class="anchor" href="#nginx">#</a> Nginx</h2>
<h4 id="安装"><a class="anchor" href="#安装">#</a> 安装</h4>
<p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo yum install nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果报错：没有可用软件包 nginx</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo vi /etc/yum.repos.d/nginx.repo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[nginx-stable]</span><br><span class="line">name=nginx stable repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=<span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h4 id="使用"><a class="anchor" href="#使用">#</a> 使用</h4>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl localhost可以</span><br><span class="line">curl ip 不可以</span><br><span class="line"></span><br><span class="line">修改配置文件</span><br><span class="line"></span><br><span class="line">/etc/nginx/config.d/default.conf</span><br></pre></td></tr></table></figure></p>
<h2 id="github-page"><a class="anchor" href="#github-page">#</a> GitHub Page</h2>
<h4 id="nginx配置"><a class="anchor" href="#nginx配置">#</a> NGINX 配置</h4>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">listen       80;</span><br><span class="line">server_name  10.213.42.79;</span><br><span class="line"></span><br><span class="line">#access_log  /var/log/nginx/host.access.log  main;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">    root   /usr/share/nginx/fairyeye.github.io;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>分之： <code>master</code> <br />
 位置： <code>/usr/share/nginx/fairyeye.github.io</code></p>
<ul class="task-list">
<li>
<p>[/] 未实现部分</p>
</li>
<li class="task-list-item">
<p><input type="checkbox" id="cbx_0" disabled="true" /><label for="cbx_0"> 自动拉代码</label></p>
</li>
<li class="task-list-item">
<p><input type="checkbox" id="cbx_1" disabled="true" /><label for="cbx_1"> 本地每天部署一遍</label></p>
</li>
<li class="task-list-item">
<p><input type="checkbox" id="cbx_2" disabled="true" /><label for="cbx_2"> 更新图片地址</label></p>
</li>
</ul>
<h2 id="windows开机启动虚拟机"><a class="anchor" href="#windows开机启动虚拟机">#</a> Windows 开机启动虚拟机</h2>
<p>在虚拟机安装目录新建 <code>start_vm.bat</code> ，</p>
<p>ps：如果 vmx 文件包含中文，保存编码选择 GB 开头的格式</p>
<p><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line">.\vmrun.exe <span class="built_in">start</span>  &quot;D:\Centos\CentOS <span class="number">7</span> <span class="number">64</span>位.vmx&quot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/06/05/FileUtils/</url>
    <content><![CDATA[<hr />
<h2 id="title-工具类date-2020-04-20-110050categories-工具类"><a class="anchor" href="#title-工具类date-2020-04-20-110050categories-工具类">#</a> title: 工具类<br />
 date: 2020-04-20 11:00:50<br />
categories: &quot;工具类&quot;</h2>
<h3 id="数组转文件"><a class="anchor" href="#数组转文件">#</a> 数组转文件</h3>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bfile</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 根据byte数组，生成文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getFile</span><span class="params">(<span class="type">byte</span>[] bfile, String filePath,String fileName)</span> &#123;</span><br><span class="line">    <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">        <span class="keyword">if</span>(!dir.exists()&amp;&amp;dir.isDirectory())&#123;<span class="comment">//判断文件目录是否存在</span></span><br><span class="line">            dir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        file = <span class="keyword">new</span> <span class="title class_">File</span>(filePath+<span class="string">&quot;\\&quot;</span>+fileName);</span><br><span class="line">        fos = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">        bos = <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fos);</span><br><span class="line">        bos.write(bfile);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (bos != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fos != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>Git</title>
    <url>/2023/06/17/GIT/</url>
    <content><![CDATA[<h3 id="gitee-go"><a class="anchor" href="#gitee-go">#</a> Gitee Go</h3>
<h4 id="流水线"><a class="anchor" href="#流水线">#</a> 流水线</h4>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 官方文档</span><br><span class="line">https://blog.gitee.com/2022/11/23/pipeline/</span><br></pre></td></tr></table></figure></p>
<h4 id="前端ci"><a class="anchor" href="#前端ci">#</a> 前端 CI</h4>
<p>手动创建流水线，选择部署分之，需要手动增加部署阶段</p>
<h5 id="添加部署阶段"><a class="anchor" href="#添加部署阶段">#</a> 添加部署阶段</h5>
<ol>
<li>
<p>点击发布后面的＋    添加新阶段</p>
</li>
<li>
<p>点击部署  点击主机部署</p>
</li>
</ol>
<p><img data-src="https://s3.bmp.ovh/imgs/2023/06/17/2e1e2d665f8fcd29.png" alt="" /></p>
<ol start="3">
<li>选择执行主机组（如果没有就先去添加主机，选择</li>
</ol>
<p><img data-src="https://s3.bmp.ovh/imgs/2023/06/17/d1715a1b2ec593f8.png" alt="" /></p>
<ol start="4">
<li>填写部署脚本，前端项目把上游构建的包，解压到服务器指定路径即可</li>
</ol>
<p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 功能：部署脚本会在部署主机组的每台机器上执行</span></span><br><span class="line"><span class="comment"># 使用场景：先将制品包解压缩到指定目录中，再执行启动脚本deploy.sh，脚本示例地址：https://gitee.com/gitee-go/spring-boot-maven-deploy-case/blob/master/deploy.sh</span></span><br><span class="line"><span class="comment"># mkdir -p /home/admin/app</span></span><br><span class="line"><span class="comment"># tar zxvf ~/gitee_go/deploy/output.tar.gz -C /home/admin/app</span></span><br><span class="line"><span class="comment"># sh /home/admin/app/deploy.sh restart</span></span><br><span class="line"><span class="comment"># 如果你是php之类的无需制品包的制品方式，可以使用 git clone 或者 git pull 将源代码更新到服务器，再执行其他命令</span></span><br><span class="line"><span class="comment"># git clone ***@***.git</span></span><br><span class="line">tar zxvf ~/gitee_go/deploy/output.tar.gz -C /home/ubuntu </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h4 id="添加主机"><a class="anchor" href="#添加主机">#</a> 添加主机</h4>
<ol>
<li>点击新建主机组</li>
</ol>
<p><img data-src="https://s3.bmp.ovh/imgs/2023/06/17/e0925018357ec4d5.png" alt="" /></p>
<ol start="2">
<li>选择新建类型（以腾讯云为例），填写基本信息（以 Linux 为例），点击确认</li>
</ol>
<p><img data-src="https://s3.bmp.ovh/imgs/2023/06/17/09807a134b458ca9.png" alt="" /></p>
<ol start="3">
<li>添加主机</li>
</ol>
<p>点击添加 Linux 主机，选择通过命令行逐台添加，</p>
<p>复制命令到目标腾讯云主机命令行</p>
<p>刷新页面即可见关联服务器信息</p>
<p><img data-src="https://s3.bmp.ovh/imgs/2023/06/17/ba5c1004444b1e6a.png" alt="" /></p>
<p><img data-src="https://s3.bmp.ovh/imgs/2023/06/17/b3943c35c7f70d3b.png" alt="" /></p>
<h4 id="后端ci"><a class="anchor" href="#后端ci">#</a> 后端 CI</h4>
<h5 id="部署脚本"><a class="anchor" href="#部署脚本">#</a> 部署脚本</h5>
<p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/gitee_go/deploy/</span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line">tar -zxf API.tar.gz</span><br><span class="line"><span class="built_in">cd</span> target</span><br><span class="line">pid=`ps -ef|grep smart-admin-api-1.0.0|grep -v grep|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$pid</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">sudo <span class="built_in">kill</span> -15 <span class="variable">$pid</span>  </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">sudo <span class="built_in">nohup</span> /usr/lib/jvm/jdk1.8.0_341/bin/java -jar smart-admin-api-1.0.0.jar &gt;/home/ubuntu/log.log &amp;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/gitee_go/deploy/</span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line">tar -zxf API.tar.gz</span><br><span class="line"><span class="built_in">cd</span> target</span><br><span class="line">pid=`ps -ef|grep smart-admin-api-1.0.0|grep -v grep|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$pid</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">sudo <span class="built_in">kill</span> -15 <span class="variable">$pid</span>  </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">sudo <span class="built_in">nohup</span> /usr/lib/jvm/jdk1.8.0_341/bin/java -jar smart-admin-api-1.0.0.jar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; /home/ubuntu/log.log 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h3 id="开源项目"><a class="anchor" href="#开源项目">#</a> 开源项目</h3>
<h4 id="omakub精美的-ubuntu-配置方案"><a class="anchor" href="#omakub精美的-ubuntu-配置方案">#</a> omakub：精美的 Ubuntu 配置方案。</h4>
<p>该项目可以将全新的 Ubuntu 24.04 系统配置成美观、功能齐全、适合 Web 开发的系统。只需简单的一条命令，即可拥有配置好的 GNOME 桌面环境、窗口管理工具、Alacritty 终端、Neovim 和 VSCode 编辑器等应用，还会将 Chrome 设置成默认浏览器。</p>
<p><img data-src="https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNNHACLhrT0cZJ0t608OhI2GWqg5Bc66ZrtqTLuGkxpEYw2bs1ib2YcGFevbjsxMvWOCAribDibZXWniaw/640?wx_fmt=png&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" /></p>
<blockquote>
<p>地址：<span class="exturl" data-url="aHR0cDovL2dpdGh1Yi5jb20vYmFzZWNhbXAvb21ha3Vi">github.com/basecamp/omakub</span></p>
</blockquote>
<h4 id="oshi"><a class="anchor" href="#oshi">#</a> <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29zaGkvb3NoaQ==">Oshi</span></h4>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">获取操作系统和硬件信息的 Java 库。这是一个基于 JNA 实现的获取本机操作系统和硬件信息的库，支持操作系统版本、进程、内存、 CPU 使用率、磁盘和分区、设备、传感器等信息。</span><br></pre></td></tr></table></figure></p>
<h4 id="playedu"><a class="anchor" href="#playedu">#</a> <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1BsYXlFZHUvUGxheUVkdQ==">PlayEdu</span></h4>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一款 Java 写的内部培训系统。这是一款基于 SpringBoot+React 开发而成的视频培训系统，它界面清爽、交互流畅，支持上传资源、创建部门、添加学员、指派课程等功能，可用于企业和机构搭建内部培训平台。</span><br></pre></td></tr></table></figure></p>
<h4 id="holer"><a class="anchor" href="#holer">#</a> <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dpc2RvbS1wcm9qZWN0cy9ob2xlcg==">Holer</span></h4>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一个将局域网中的应用映射到公网访问的端口映射软件，支持转发基于 TCP 协议的报文。内网穿透工具，包含 Web 后台管理系统。用到的技术如下：</span><br><span class="line"></span><br><span class="line">- 服务端采用 SpringBoot 和 Netty 实现</span><br><span class="line">- 客户端采用 Java Netty 和 Go 语言实现</span><br></pre></td></tr></table></figure><br />
<img data-src="https://s3.bmp.ovh/imgs/2023/09/13/e1c366275bdb16f6.png" alt="" /></p>
<h4 id="solopo"><a class="anchor" href="#solopo">#</a> <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaXBheS9Tb2xvUGk=">SoloPo</span></h4>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一个不需要连接电脑、非侵入式的 Android 自动化工具。公测版拥有录制回放、性能测试、一机多控三项主要功能，能为测试开发人员节省宝贵时间。安卓版本多、终端型号多，一个成熟安卓应用的上线需要进行大量测试，而很多测试都是属于重复操作，通过此工具可以极大简化测试人员的工作量</span><br></pre></td></tr></table></figure><br />
<img data-src="https://s3.bmp.ovh/imgs/2023/09/13/f9f815c624347451.png" alt="" /></p>
<h4 id="hitomi"><a class="anchor" href="#hitomi">#</a> <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0t1cnRCZXN0b3IvSGl0b21pLURvd25sb2FkZXI=">Hitomi</span></h4>
<p><strong>本周 star 增长数：400+</strong>，<strong>主语言：Python</strong></p>
<p>Hitomi-Downloader 知名下载工具，只需要一个 url 就能下载对应的图片、视频、音频。部分特性：</p>
<ul>
<li>
<p>简洁的用户界面</p>
</li>
<li>
<p>支持下载加速，也支持限速</p>
</li>
<li>
<p>支持单任务由 24 个线程</p>
</li>
<li>
<p>支持多种下载方式</p>
</li>
</ul>
<h4 id="python-搞定-uinicegui"><a class="anchor" href="#python-搞定-uinicegui">#</a> Python 搞定 UI：nicegui</h4>
<p><strong>本周 star 增长数：850+</strong>，<strong>主语言：Python、JavaScript</strong></p>
<p><code>New</code>  用 Python 搞定 Web UI，有了它，你可以用 Python 创建按钮、对话框、Markdown 文件、3D 场景。</p>
<blockquote>
<p>GitHub 地址→https://github.com/zauberzeug/nicegui</p>
</blockquote>
<p><img data-src="https://s3.bmp.ovh/imgs/2023/09/22/65aeeb9f2a95da35.png" alt="" /></p>
<h4 id="炫酷的-windows-终端软件fluentterminal"><a class="anchor" href="#炫酷的-windows-终端软件fluentterminal">#</a> 炫酷的 Windows 终端软件：FluentTerminal</h4>
<p><strong>主语言：C#</strong></p>
<p>基于 UWP 的 Windows 终端应用，拥有强大的自定义主题模块，能够轻松定制出风格各异的主题。提供了中文选项，支持多窗口、SSH 和搜索等功能。</p>
<blockquote>
<p>HG 评价地址→https://hellogithub.com/repository/352150f3034742cbbf67d301a86973ca</p>
</blockquote>
<h4 id="12-ai-生图controlnet"><a class="anchor" href="#12-ai-生图controlnet">#</a> 1.2 AI 生图：ControlNet</h4>
<p><strong>主语言：Python</strong></p>
<p><code>New</code>  上周线稿上色的 style2paints 在 ControlNet 面前可能只是个弟弟。ControlNet 是一种通过添加额外条件来控制扩散模型的神经网络结构。为什么说 style2paints 是个弟弟呢？这是 ControlNet 的社生成效果图，从线稿到成品，一句话搞点。</p>
<blockquote>
<p>GitHub 地址→https://github.com/lllyasviel/ControlNet</p>
</blockquote>
<h4 id="1panel"><a class="anchor" href="#1panel">#</a> <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzFQYW5lbC1kZXYvMVBhbmVs">1Panel</span></h4>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[1Panel Log]: 1Panel 服务启动成功!</span><br><span class="line">[1Panel Log]:</span><br><span class="line">[1Panel Log]: =================感谢您的耐心等待，安装已经完成==================</span><br><span class="line">[1Panel Log]:</span><br><span class="line">[1Panel Log]: 请用浏览器访问面板:</span><br><span class="line">[1Panel Log]: 面板地址: http://$LOCAL_IP:29252/821d637d70</span><br><span class="line">[1Panel Log]: 用户名称: e0ae9ef986</span><br><span class="line">[1Panel Log]: 用户密码: zhang...1997</span><br><span class="line">[1Panel Log]:</span><br><span class="line">[1Panel Log]: 项目官网: https://1panel.cn</span><br><span class="line">[1Panel Log]: 项目文档: https://1panel.cn/docs</span><br><span class="line">[1Panel Log]: 代码仓库: https://github.com/1Panel-dev/1Panel</span><br><span class="line">[1Panel Log]:</span><br><span class="line">[1Panel Log]: 如果使用的是云服务器，请至安全组开放 29252 端口</span><br><span class="line">[1Panel Log]:</span><br><span class="line">[1Panel Log]: ================================================================</span><br></pre></td></tr></table></figure></p>
<h4 id="nezha"><a class="anchor" href="#nezha">#</a> <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25haWJhL25lemhh">Nezha</span></h4>
<p>国产的轻量级服务器监控工具。这是一款名为 “哪吒” 的服务器监控面板，它安装简单、开箱即用，支持监控多个服务器的系统状态、SSL 证书状态、报警通知、流量监控、设置定时任务等功能，适用于 Linux、Windows、macOS、OpenWRT 等主流系统。</p>
<p><img data-src="https://s3.bmp.ovh/imgs/2023/10/12/87fe9705e1078ecc.png" alt="" /></p>
<h4 id="deskreen将任何屏幕变成你的扩展显示器"><a class="anchor" href="#deskreen将任何屏幕变成你的扩展显示器">#</a> Deskreen：将任何屏幕变成你的扩展显示器</h4>
<p>我们经常需要在多个设备之间切换工作，但有时候，如果能将手机或平板变成电脑的第二屏幕，那将大大提高工作效率。</p>
<p>Deskreen，一个开源项目，正是为此而生！这是一个简单而强大的工具，<strong>它允许你将任何带有网络浏览器的设备变成电脑的第二屏幕。</strong></p>
<p>无论是为了扩展你的工作空间，还是为了在大屏幕上展示你的演示文稿，Deskreen 都能轻松实现。</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">开源地址：https://github.com/pavlobu/deskreen</span><br></pre></td></tr></table></figure></p>
<h4 id="etcher"><a class="anchor" href="#etcher">#</a> <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JhbGVuYS1pby9ldGNoZXI=">Etcher</span></h4>
<p>简单易用的 USB/SD 启动盘制作工具。该项目可以将操作系统镜像烧录进 SD 卡或 USB 设备，可用于制作可启动、便携式的操作系统。它拥有友好的操作界面，仅需 3 步就能完成 USB 启动盘制作，适用于 Linux、macOS 和 Windows 10 及更高版本。</p>
<p><img data-src="https://img.hellogithub.com/i/fWOuYpyAv4TVn0j_1715044602.png" alt="etcher" /></p>
<h4 id="moneyprinterturbo"><a class="anchor" href="#moneyprinterturbo">#</a> MoneyPrinterTurbo：</h4>
<p>一键生成短视频的 AI 工具。该项目是基于大模型服务的 AI 视频生成工具，只需要提供一个主题或关键字，就可以自动生成高清的短视频。它拥有简单易用的 Web 界面，支持批量生成、设置视频时长和横 / 竖屏尺寸等功能。来自 @jolahua 的分享</p>
<p><img data-src="https://mmbiz.qpic.cn/mmbiz_jpg/xBgIbW1vdNN1km98o6YnFZUWnr5GgkXLouuzgRL6B31s7Cml6iammZaXRia7tmadAyicQ2N30F7IbB2kmDgbXwRgg/640?wx_fmt=jpeg&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" /></p>
<blockquote>
<p>地址：<span class="exturl" data-url="aHR0cDovL2dpdGh1Yi5jb20vaGFycnkwNzAzL01vbmV5UHJpbnRlclR1cmJv">github.com/harry0703/MoneyPrinterTurbo</span></p>
</blockquote>
<h4 id="omost"><a class="anchor" href="#omost">#</a> Omost</h4>
<p>：极简提示词的文生图工具。该项目基于 LLM 的编程能力帮用户自动完善文生图的提示词，可以根据用户输入的简短提示词生成高质量的图片，还支持图片局部修改等功能，比如将图片中的龙变成恐龙，极大地降低了编写文生图的门槛，无需复杂的提示词即可生成满意的图片。</p>
<p><img data-src="https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNN1km98o6YnFZUWnr5GgkXLGCiaHdCxvkicicwrooTMpYbYIu9s8q5hzqWRcOz9kicuHXibHpkeiaYEG2PA/640?wx_fmt=png&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" /></p>
<blockquote>
<p>地址：<span class="exturl" data-url="aHR0cDovL2dpdGh1Yi5jb20vbGxseWFzdmllbC9PbW9zdA==">github.com/lllyasviel/Omost</span></p>
</blockquote>
<h4 id="scrapegraph-ai"><a class="anchor" href="#scrapegraph-ai">#</a> Scrapegraph-ai</h4>
<p>：基于 AI 的 Python 爬虫。这是一个由 AI 驱动的 Python 爬虫库，它借助 LLM 的能力，可以根据提示词自动抓取目标网站的数据。</p>
<p><code>smart_scraper_graph = SmartScraperGraph(       prompt=&quot;List me all the projects with their descriptions&quot;,       source=&quot;目标网站&quot;,       config=graph_config   )      result = smart_scraper_graph.run()   print(result)   </code></p>
<blockquote>
<p>地址：<span class="exturl" data-url="aHR0cDovL2dpdGh1Yi5jb20vVmluY2lHaXQwMC9TY3JhcGVncmFwaC1haQ==">github.com/VinciGit00/Scrapegraph-ai</span></p>
</blockquote>
<h4 id="22-全平台通用的换源工具chsrc"><a class="anchor" href="#22-全平台通用的换源工具chsrc">#</a> 2.2 全平台通用的换源工具：chsrc</h4>
<p><img data-src="https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNPOhVtJmAeAhSWNbpRZiaYYr4hlmr7EP4u9SwNwoiajgOBCupEI188sMH4lg7D0hDVVHguZrReHfHfQ/640?wx_fmt=png&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" /></p>
<p><strong>主语言：C</strong></p>
<p>该项目能够为常见的 Linux 发行版、编程语言和软件切换至国内镜像源，操作简单仅需一条命令。它采用 C 语言编写，具有高效和轻量级的特点，支持测速、多平台以及项目级换源等功能，适用于优化下载速度或解决源受限的场景。</p>
<blockquote>
<p><span class="exturl" data-url="aHR0cDovL3huLS1oZWxsb2dpdGh1Yi13NjZmczUyNmVnM29jdXo1Y3JiemIuY29tL3JlcG9zaXRvcnkvNzY2NmJhOTFlMDFlNGE1OWJlNTgwOWIwMmQ5ZThmZjY=">项目详情→hellogithub.com/repository/7666ba91e01e4a59be5809b02d9e8ff6</span></p>
</blockquote>
<h4 id="31-免费的可视化-web-页面构建平台grapesjs"><a class="anchor" href="#31-免费的可视化-web-页面构建平台grapesjs">#</a> 3.1 免费的可视化 Web 页面构建平台：GrapesJS</h4>
<p><img data-src="https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNM0SdfZZBicTn5DWTZgHx0ae1PnTfOx0QvPticBlnJAfI1ZOr1GBiaJqUPhoO9XqtZ5KXWQ0wEXSBZpg/640?wx_fmt=png&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" /></p>
<p><strong>主语言：TypeScript</strong></p>
<p>该项目通过直观的可视化界面，让用户能够通过拖拽的方式，快速设计和构建网站的 HTML 模板。它所见即所得、移动端适配，适用于官网、新闻和 CMS 等类型的网站。</p>
<blockquote>
<p><span class="exturl" data-url="aHR0cDovL3huLS1oZWxsb2dpdGh1Yi13NjZmczUyNmVnM29jdXo1Y3JiemIuY29tL3JlcG9zaXRvcnkvNTcyZTMxZjVmYzc1NDFlZmIxOWMxNmQzMzE3OTZlZGY=">项目详情→hellogithub.com/repository/572e31f5fc7541efb19c16d331796edf</span></p>
</blockquote>
<h4 id="15-轻量级的-ai-证件照制作工具hivisionidphotos"><a class="anchor" href="#15-轻量级的-ai-证件照制作工具hivisionidphotos">#</a> 1.5 轻量级的 AI 证件照制作工具：HivisionIDPhotos</h4>
<p><img data-src="https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOAQ2JbRhibxP6B2lFu0NIwksC40TA1kdW1q8bM1koyGYOQkI2NoooWDLFcp0vsUG18Vc5pqErLoTQ/640?wx_fmt=png&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" /></p>
<p><strong>主语言：Python</strong>，<strong>Star：1.9k</strong>，<strong>周增长：1.5k</strong></p>
<p>这是一款简单易用的 AI 证件照制作工具，能够生成标准证件照和六寸排版照。它提供了简洁的 Web 界面和 API 服务，即使在没有 GPU 的电脑上也能够运行，支持抠图、尺寸调整和自定义底色等功能。</p>
<blockquote>
<p>GitHub <span class="exturl" data-url="aHR0cDovL3huLS1naXRodWItaG4yYzY1MDViZWVhLmNvbS9aZXlpLUxpbi9IaXZpc2lvbklEUGhvdG9z">地址→github.com/Zeyi-Lin/HivisionIDPhotos</span></p>
</blockquote>
<h3 id="git技巧"><a class="anchor" href="#git技巧">#</a> Git 技巧</h3>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://hellogithub.com/article/9aed28d4d64b4649bb364685ef557ae4</span><br></pre></td></tr></table></figure></p>
<h3 id="22-windows-激活microsoft-activation-scripts"><a class="anchor" href="#22-windows-激活microsoft-activation-scripts">#</a> 2.2 Windows 激活：Microsoft-Activation-Scripts</h3>
<p><strong>本周 star 增长数：1,100+</strong></p>
<p>有了 Microsoft-Activation-Scripts，激活 Windows 和 Office 不再是问题。它注重开源、减少反病毒软件的检测，这个用到 HWID、Ohook、KMS38、在线 KMS 激活方法的工具，一定能帮你解决 Windows 的激活问题。</p>
<blockquote>
<p>GitHub <span class="exturl" data-url="aHR0cDovL3huLS1naXRodWItaG4yYzY1MDViZWVhLmNvbS9tYXNzZ3JhdmVsL01pY3Jvc29mdC1BY3RpdmF0aW9uLVNjcmlwdHM=">地址→github.com/massgravel/Microsoft-Activation-Scripts</span></p>
</blockquote>
<p>17、<strong>source-code-hunter</strong>：Spring 全家桶源码解读。该项目提供了一系列互联网主流框架和中间件的源码讲解，包括 Spring 全家桶、Mybatis、Netty、Dubbo 等框架。</p>
<blockquote>
<p>地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Rvb2NzL3NvdXJjZS1jb2RlLWh1bnRlcg==">https://github.com/doocs/source-code-hunter</span></p>
</blockquote>
<h3 id="21-免费的-ai-图像升级器upscaler"><a class="anchor" href="#21-免费的-ai-图像升级器upscaler">#</a> 2.1 免费的 AI 图像升级器：Upscaler</h3>
<p><img data-src="https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNPydvTukojzHTnhQlLXGLsJ4t0OiaCFCQYqtp5SXDiclDBw2xQ0MIAtnHCFSwUJeT33Hq40VnjuV9RA/640?wx_fmt=png&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" /></p>
<p><strong>主语言：TypeScript</strong>，<strong>Star：25k</strong>，<strong>周增长：1k</strong></p>
<p>这是一款通过 AI 算法提高图像分辨率（超级分辨率，简称超分）的桌面工具，它免费、开源、无需联网、开箱即用，安装包大概 200+MB，需要有 GPU 的机器才能运行，适用于 Windows、Linux 和 macOS 系统。</p>
<blockquote>
<p>GitHub <span class="exturl" data-url="aHR0cDovL3huLS1naXRodWItaG4yYzY1MDViZWVhLmNvbS91cHNjYXlsL3Vwc2NheWw=">地址→github.com/upscayl/upscayl</span></p>
</blockquote>
<h3 id="21-在线的数据库设计工具drawdb"><a class="anchor" href="#21-在线的数据库设计工具drawdb">#</a> 2.1 在线的数据库设计工具：DrawDB</h3>
<p><img data-src="https://mmbiz.qpic.cn/mmbiz_gif/xBgIbW1vdNNpuPH55ddPkSnH9H4wHVSG5YudMeeSnXGSEw2HhFD6yPXgWyedmSQ7wO3hWIqSZEeialYhgoianlsA/640?wx_fmt=gif&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="图片" /></p>
<p><strong>主语言：JavaScript</strong>，<strong>Star：4.7k</strong>，<strong>周增长：3.8k</strong></p>
<p>这个开源项目是一个免费、简单、强大的数据库实体关系（DBER）在线编辑器，无需注册即可直接在浏览器中使用。它提供了直观、可视化的操作界面，用户通过点击即可构建数据库表和导出建表语句，还可以导入建表语句，实现可视化编辑、错误检查等。支持 MySQL、PostgreSQL、SQLite、MariaDB、SQL Server 共 5 种常用的关系数据库。</p>
<blockquote>
<p>GitHub <span class="exturl" data-url="aHR0cDovL3huLS1naXRodWItaG4yYzY1MDViZWVhLmNvbS9kcmF3ZGItaW8vZHJhd2Ri">地址→github.com/drawdb-io/drawdb</span></p>
</blockquote>
<p>5、WingetUI：带界面的 Windows 包管理器。该项目是一个为 Windows 常用的命令行包管理工具设计的用户界面，如 Winget、Scoop、Pip、NPM、.NET Tool 等。它的界面友好、设计美观、支持中文，通过它你可以轻松下载、安装、更新和卸载包管理器上发布的任何软件以及其它日常应用，如浏览器、PDF 阅读器等。</p>
<p><img data-src="https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNN21ibUI7LydiadUd7XaCRrFkxbJX9TVeXSVphhvpywb7IRHMbJVW9Mf29bXj2iaFp6jDLg4xnjEhZJA/640?wx_fmt=png&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" /></p>
<blockquote>
<p>地址：<span class="exturl" data-url="aHR0cDovL2dpdGh1Yi5jb20vbWFydGljbGltZW50L1dpbmdldFVJ">github.com/marticliment/WingetUI</span></p>
</blockquote>
<p>9、freeze：生成代码图片的终端工具。该项目可以将代码片段和终端输出，转换成 PNG、SVG 和 WebP 格式的图片，它采用 Go 语言开发，特点是安装简单和易于使用，支持一条命令生成图片，也可以通过交互模式生成定制的图片。</p>
<p><code># macOS or Linux   brew install charmbracelet/tap/freeze      # Arch Linux (btw)   pacman -S freeze      # Nix   nix-env -iA nixpkgs.charm-freeze   </code></p>
<p><img data-src="https://mmbiz.qpic.cn/mmbiz_gif/xBgIbW1vdNN21ibUI7LydiadUd7XaCRrFkvHXibe5VF36piaofqXtfe19mDWWw7bPowMChlhic3vmdzXEJfWIzvPLIQ/640?wx_fmt=gif&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="图片" /></p>
<blockquote>
<p>地址：<span class="exturl" data-url="aHR0cDovL2dpdGh1Yi5jb20vY2hhcm1icmFjZWxldC9mcmVlemU=">github.com/charmbracelet/freeze</span></p>
</blockquote>
<h3 id="java-项目"><a class="anchor" href="#java-项目">#</a> Java 项目</h3>
<p>12、CompreFace：免费、开源的人脸识别系统。该项目提供了用于人脸识别、检测、验证、头部姿势检测、性别和年龄识别的 REST API 服务，不用懂机器学习就能轻松集成到任何系统中。它后端采用 Java 编写，人脸识别是基于 FaceNet 和 InsightFace 实现，同时支持 Docker 部署。</p>
<p><img data-src="https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNN21ibUI7LydiadUd7XaCRrFklgLXIgse7X1bUGibNltiaiaeILsfG4HqCUpCD2Ylpx30dLDdjufpWNMXg/640?wx_fmt=png&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" /></p>
<blockquote>
<p>地址：<span class="exturl" data-url="aHR0cDovL2dpdGh1Yi5jb20vZXhhZGVsLWluYy9Db21wcmVGYWNl">github.com/exadel-inc/CompreFace</span></p>
</blockquote>
<p>13、fdroidclient：免费、开源的 Android 应用商店。该项目是 F-Droid 的 Android 客户端，专门收集各类开源安卓软件（FOSS）的应用商店。它里面大部分是免费且无广告的应用，如遇到资源加载慢的情况，可通过设置镜像源解决。</p>
<p><img data-src="https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNN21ibUI7LydiadUd7XaCRrFkZibGRXYunyDJoORM0r5hho5QWH12xlRBCgeuE8vR7SkMGHjtkj8yINw/640?wx_fmt=png&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" /></p>
<blockquote>
<p>地址：<span class="exturl" data-url="aHR0cDovL2dpdGh1Yi5jb20vZi1kcm9pZC9mZHJvaWRjbGllbnQ=">github.com/f-droid/fdroidclient</span></p>
</blockquote>
<p>18、tailwind-landing-page-template：免费、开源的落地页模板。该项目是基于 TailwindCSS、React 和 Next.js 构建的落地页模板，它界面美观、代码简单、设计在线，适用于快速制作公司主页、活动落地页等。</p>
<p><code>git clone 项目   yarn install   yarn dev   # http://localhost:3000   </code></p>
<p><img data-src="https://mmbiz.qpic.cn/mmbiz_gif/xBgIbW1vdNN21ibUI7LydiadUd7XaCRrFkvXzGZmE2MMYSWkczoFgbz7e8Oh0m56R53r2LZF1HCFOicR2LMmAibSrw/640?wx_fmt=gif&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="图片" /></p>
<blockquote>
<p>地址：<span class="exturl" data-url="aHR0cDovL2dpdGh1Yi5jb20vY3J1aXAvdGFpbHdpbmQtbGFuZGluZy1wYWdlLXRlbXBsYXRl">github.com/cruip/tailwind-landing-page-template</span></p>
</blockquote>
<p>22、python-miio：用于控制小米智能家电的 Python 库。该项目提供了一个 Python 库和命令行工具，可以用来控制使用小米的 miIO 和 MIoT 协议的设备。借助它用户可以轻松地与小米智能设备进行通信和远程控制，包括扫地机器人、灯泡、空气净化器等，非常适合喜欢 DIY 智能家居系统的开发者。</p>
<blockquote>
<p>地址：<span class="exturl" data-url="aHR0cDovL2dpdGh1Yi5jb20vcnl0aWxhaHRpL3B5dGhvbi1taWlv">github.com/rytilahti/python-miio</span></p>
</blockquote>
<p>23、undetected-chromedriver：绕过反爬检测的 Python 库。这是一个经过优化的 Selenium WebDriver 补丁，专门用于防止浏览器自动化过程中，触发反机器人机制。它能够隐藏浏览器特征（指纹），使用起来十分方便，就像一个 Python 的第三方库一样。</p>
<p><code>import undetected_chromedriver as uc   driver = uc.Chrome(headless=True,use_subprocess=False)   driver.get('https://nowsecure.nl')   driver.save_screenshot('nowsecure.png')   </code></p>
<p><img data-src="https://mmbiz.qpic.cn/mmbiz_gif/xBgIbW1vdNN21ibUI7LydiadUd7XaCRrFk1FIGdy5Ya4F82sGRNjmzMqysdiarqXicPOxZYqfpPGp5licTuAWMvHC1Q/640?wx_fmt=gif&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="图片" /></p>
<blockquote>
<p>地址：<span class="exturl" data-url="aHR0cDovL2dpdGh1Yi5jb20vdWx0cmFmdW5rYW1zdGVyZGFtL3VuZGV0ZWN0ZWQtY2hyb21lZHJpdmVy">github.com/ultrafunkamsterdam/undetected-chromedriver</span></p>
</blockquote>
<p>29、reminders-menubar：极简的 macOS 菜单栏提醒工具。这是一款使用 SwiftUI 开发的小工具，能够在 macOS 菜单栏查看 / 提醒待办事项。它体积小、交互简单、界面清爽，支持开机启动、多语言（包括中文）、菜单栏显示计数、快捷键等功能。</p>
<p><img data-src="https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNN21ibUI7LydiadUd7XaCRrFkWbYLJNXibzGw3vLsTAbLHKys7s4VJM9Zucicr9oF0jDwQ0nfOyVNMy4A/640?wx_fmt=png&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" /></p>
<blockquote>
<p>地址：<span class="exturl" data-url="aHR0cDovL2dpdGh1Yi5jb20vRGFtYXNjZW5vUmFmYWVsL3JlbWluZGVycy1tZW51YmFy">github.com/DamascenoRafael/reminders-menubar</span></p>
</blockquote>
<h3 id=""><a class="anchor" href="#">#</a> </h3>
<p>32、ServiceLogos：超可爱的 Logo 集合。这里是用来存放 Sawaratsuki 制作的各种 logo 的仓库，这些 logo 制作精美、画风可爱，包括编程语言、框架、工具和各大社交媒体的商标™️。</p>
<p><img data-src="https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNN21ibUI7LydiadUd7XaCRrFkg5uv5yRia0J7MzVJUiccurARChJuSmJYKWiaqk490eO8kOewpuhAia5pHA/640?wx_fmt=png&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" /></p>
<blockquote>
<p>地址：<span class="exturl" data-url="aHR0cDovL2dpdGh1Yi5jb20vU0FXQVJBVFNVS0kvU2VydmljZUxvZ29z">github.com/SAWARATSUKI/ServiceLogos</span></p>
</blockquote>
<p>35、how-to-learn-robotics：机器人学自学指南。这本指南专为非科班的小伙伴而设计，旨在指导他们如何学习机器人学。它包含了必备知识、入门教材推荐、实践项目以及进阶方法等内容，帮助读者逐步成长为一名优秀的机器人工程师。</p>
<blockquote>
<p>地址：<span class="exturl" data-url="aHR0cDovL2dpdGh1Yi5jb20vcXFmbHkvaG93LXRvLWxlYXJuLXJvYm90aWNz">github.com/qqfly/how-to-learn-robotics</span></p>
</blockquote>
<h3 id="22-免费-开源的落地页模板tailwind-landing-page-template"><a class="anchor" href="#22-免费-开源的落地页模板tailwind-landing-page-template">#</a> 2.2 免费、开源的落地页模板：tailwind-landing-page-template</h3>
<p><img data-src="https://mmbiz.qpic.cn/mmbiz_gif/xBgIbW1vdNNopDgmYXxHEOsNjAbajpFicNWJrrkoveg9zDmqS0hrrf7fNngdGjOMymnZcPPtwUAUNhGNtCnVHtg/640?wx_fmt=gif&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="图片" /></p>
<p><strong>主语言：TypeScript</strong></p>
<p>该项目是基于 TailwindCSS、React 和 Next.js 构建的落地页模板，它界面美观、代码简单、设计在线，适用于快速制作公司主页、活动落地页等。</p>
<blockquote>
<p><span class="exturl" data-url="aHR0cDovL3huLS1oZWxsb2dpdGh1Yi13NjZmczUyNmVnM29jdXo1Y3JiemIuY29tL3JlcG9zaXRvcnkvOWYyMDVmYWQ2NGIyNDE2MDljZTNmZWVjNDU2YWI4MTg=">项目详情→hellogithub.com/repository/9f205fad64b241609ce3feec456ab818</span></p>
</blockquote>
<h3 id="c-项目"><a class="anchor" href="#c-项目">#</a> C# 项目</h3>
<p>3、RunCat_for_windows：在 Windows 任务栏飞奔的 “小猫”。这是一个用 C# 写的小工具，它会在 Windows 任务栏显示一只奔跑的小猫动画，CPU 使用率越高它跑得越快。</p>
<p><img data-src="https://mmbiz.qpic.cn/mmbiz_gif/xBgIbW1vdNNEZCicibZu6NibpUibZkOcDy0ICLfJm011mOVMNibjTO2BKrDnXCgibjQROB5SGS5ibTiat02POkf5HUibicxA/640?wx_fmt=gif&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="图片" /></p>
<blockquote>
<p>地址：<span class="exturl" data-url="aHR0cDovL2dpdGh1Yi5jb20vS3lvbWUyMi9SdW5DYXRfZm9yX3dpbmRvd3M=">github.com/Kyome22/RunCat_for_windows</span></p>
</blockquote>
<p>9、mactop：专为苹果芯片打造的 Mac 性能监控工具。该项目用不到 1k 行的 Go 代码，实现了一个类似 top 命令的工具。它可以实时显示 Apple M 系列芯片的性能指标，包括 CPU、GPU 使用率、内存、网络和硬盘等信息。</p>
<p><img data-src="https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNNEZCicibZu6NibpUibZkOcDy0IQghM8WzLANkVqeJLMA5ELVO8enFQBRo2PzXbsSq760LRepj74zzOMg/640?wx_fmt=png&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" /></p>
<blockquote>
<p>地址：<span class="exturl" data-url="aHR0cDovL2dpdGh1Yi5jb20vY29udGV4dC1sYWJzL21hY3RvcA==">github.com/context-labs/mactop</span></p>
</blockquote>
<p>11、superfile：非常漂亮的终端文件管理器。这是一个现代终端文件管理器，为命令行文件操作提供了一个直观且漂亮的界面。它默认采用 Vim 风格的快捷键操作，还支持插件和主题自定义。</p>
<p><img data-src="https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNNEZCicibZu6NibpUibZkOcDy0IxjDDtDYbYermMXiaHDBicsfmicDhVhOWR50ys7k5Qzia4kWwRgRibOnfTKg/640?wx_fmt=png&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" /></p>
<blockquote>
<p>地址：<span class="exturl" data-url="aHR0cDovL2dpdGh1Yi5jb20veW9ydWtvdC9zdXBlcmZpbGU=">github.com/yorukot/superfile</span></p>
</blockquote>
<p>2、chsrc：全平台通用的换源工具。该项目能够为常见的 Linux 发行版、编程语言和软件切换至国内镜像源，操作简单仅需一条命令。它采用 C 语言编写，具有高效和轻量级的特点，支持测速、多平台以及项目级换源等功能，适用于优化下载速度或解决源受限的场景。来自 @ccmywish 的分享</p>
<p><img data-src="https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOTjhAHG3PgHxdZU0es1tDHZoVqIM0vSQj3ocHOR3xczuRWRDNyIJoHibBhadLaJl1nEnzFTb2tCyA/640?wx_fmt=png&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" /></p>
<blockquote>
<p>地址：<span class="exturl" data-url="aHR0cDovL2dpdGh1Yi5jb20vUnVieU1ldHJpYy9jaHNyYw==">github.com/RubyMetric/chsrc</span></p>
</blockquote>
<p>6、lnav：强大的终端日志文件查看工具。这是一款用于查看和分析日志文件的轻量级工具。它无需配置、开箱即用，可自动识别日志格式并解压文件，支持同时处理多个文件和目录、实时更新、文本高亮、正则与 SQL 过滤日志等功能，特别适合在服务器和开发环境中使用。来自 @DeShuiYu 的分享</p>
<p><img data-src="https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOTjhAHG3PgHxdZU0es1tDH1xLFIZT7lCVaROvmQdHYlHbZFv0YlFCogjSPv7g3SNib0xmWHBelgJQ/640?wx_fmt=png&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" /></p>
<blockquote>
<p>地址：<span class="exturl" data-url="aHR0cDovL2dpdGh1Yi5jb20vdHN0YWNrL2xuYXY=">github.com/tstack/lnav</span></p>
</blockquote>
<p>7、shadPS4：开源的 PS4 模拟器。这是用 C++ 编写的 PlayStation 4（PS4）模拟器，支持在 Windows、Linux 和 macOS 系统上玩 PS4 游戏。虽然项目仍处于早期开发阶段，能运行的游戏有限，但最新版已经能够成功运行《血源诅咒》和《黑暗之魂 II》等游戏。</p>
<p><img data-src="https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNOTjhAHG3PgHxdZU0es1tDH182TnOW81kW8UAfmVEShP3jgU8sAxFnbh2yVowy3PEhfuqD9SNbkqw/640?wx_fmt=png&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" /></p>
<blockquote>
<p>地址：<span class="exturl" data-url="aHR0cDovL2dpdGh1Yi5jb20vc2hhZHBzNC1lbXUvc2hhZFBTNA==">github.com/shadps4-emu/shadPS4</span></p>
</blockquote>
<h5 id="登录页面html"><a class="anchor" href="#登录页面html">#</a> 登录页面 HTML</h5>
<p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpreU9UWTBNVGMyTXc9PSZhbXA7bWlkPTIyNDc0ODQ2MTUmYW1wO2lkeD0xJmFtcDtzbj1lYTdmMGE4M2Q1OWNiZWNkOGQzNWJjYzg1OTNkZjk2NSZhbXA7Y2hrc209YzM3OWJmYjFjOWU0N2NkNWY2Y2I5ZjJmMTU0OWIxNGM3ZTZhZTlkNWRmMTQ4ODY5MDcwZDQyZGYxMGE5NGZmNWZjNzMxYmM1ZWEyYiZhbXA7c2NlbmU9MTMyJmFtcDtleHB0eXBlPXRpbWVsaW5lX3JlY29tbWVuZF9hcnRpY2xlX2V4dGVuZHJlYWRfZXh0ZW5kcmVhZF9pbnRlcmVzdCZhbXA7c2hvd19yZWxhdGVkX2FydGljbGU9MSZhbXA7c3Vic2NlbmU9MTMyJmFtcDtzY2VuZT0xMzIjd2VjaGF0X3JlZGlyZWN0">https://mp.weixin.qq.com/s?__biz=MzkyOTY0MTc2Mw==&amp;mid=2247484615&amp;idx=1&amp;sn=ea7f0a83d59cbecd8d35bcc8593df965&amp;chksm=c379bfb1c9e47cd5f6cb9f2f1549b14c7e6ae9d5df148869070d42df10a94ff5fc731bc5ea2b&amp;scene=132&amp;exptype=timeline_recommend_article_extendread_extendread_interest&amp;show_related_article=1&amp;subscene=132&amp;scene=132#wechat_redirect</span></p>
<h2 id="在master分之发生变化的时候pull一下代码"><a class="anchor" href="#在master分之发生变化的时候pull一下代码">#</a> 在 Master 分之发生变化的时候，pull 一下代码</h2>
<p>要在 Git 仓库的 master 分支发生变化时自动执行 <code>git pull</code>  操作，可以设置一个 Git hook 来触发这个动作。具体步骤如下：</p>
<ol>
<li>
<p><strong>安装 Git：</strong> 确保系统上已经安装了 Git。如果没有安装，可以运行以下命令：</p>
<p><code>sudo yum install git</code></p>
</li>
<li>
<p><strong>克隆仓库：</strong> 如果您还没有克隆仓库，请先克隆它：</p>
<p><code>git clone https://github.com/username/repository.git /path/to/your/local/repo cd /path/to/your/local/repo</code></p>
</li>
<li>
<p><strong>设置 Git hook：</strong> Git hooks 是一些脚本，在 Git 仓库中的特定事件发生时执行。我们可以使用 <code>post-merge</code>  和 <code>post-receive</code>  hooks 来实现这个功能。</p>
<ol>
<li>
<p><strong>创建一个钩子脚本：</strong></p>
<p><code>vi /path/to/your/local/repo/.git/hooks/post-merge</code></p>
<p>添加以下内容：</p>
</li>
</ol>
</li>
</ol>
<p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line"><span class="comment"># 切换到仓库目录 </span></span><br><span class="line"><span class="built_in">cd</span> /path/to/your/local/repo  <span class="comment"># 执行 git pull </span></span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure></p>
<p>保存并关闭文件。</p>
<p><strong>注意：</strong> 确保替换 <code>/path/to/your/local/repo</code>  为您的实际仓库路径。</p>
<ol start="2">
<li><strong>为钩子脚本添加执行权限：</strong></li>
</ol>
<p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x /path/to/your/local/repo/.git/hooks/post-merge</span><br></pre></td></tr></table></figure></p>
<h2 id="github-hooks"><a class="anchor" href="#github-hooks">#</a> Github Hooks</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MjQ5MjgxMTE3MTY5NjE0OTA0">GitHooks </span></p>
<p><img data-src="https://s3.bmp.ovh/imgs/2024/06/12/d328d835ab6947bb.png" alt="" /></p>
]]></content>
      <categories>
        <category>use</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub Page</title>
    <url>/2023/06/05/GitHub%20Page/</url>
    <content><![CDATA[<p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 拉取子模块</span></span><br><span class="line">git submodule init // 初始化子模块</span><br><span class="line">git submodule update // 更新子模块与主仓库中的子模块代码同步</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Go笔记</title>
    <url>/2020/04/20/Go%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当标识符（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：Group1，那么使用这种形式的标识符的对象就可以被外部包的代码所使用（客户端程序需要先导入这个包），这被称为导出（像面向对象语言中的 public）；标识符如果以小写字母开头，则对包外是不可见的，但是他们在整个包的内部是可见并且可用的（像面向对象语言中的 protected ）。</span></span><br></pre></td></tr></table></figure></p>
<p>报错： <code>The 'main' file has the non-main package or does not contain the 'main' function</code></p>
<p>main 函数需要再 main 包下</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>IDEA</title>
    <url>/2020/04/20/IDEA/</url>
    <content><![CDATA[<h4 id="1-maven-设置"><a class="anchor" href="#1-maven-设置">#</a> 1. Maven 设置</h4>
<p><img data-src="https://i.loli.net/2021/07/07/nvqeJDmrtAf1w5U.png" alt="image-20210707213050448" /></p>
<p><img data-src="https://i.loli.net/2021/07/07/967olUfIFqMOsyC.png" alt="image-20210707213232536" /></p>
<p>多 module 下，启动程序报错：</p>
<p>执行下，就可以了</p>
<p><img data-src="https://i.loli.net/2021/06/10/U8DZTSa1jw7ELBM.png" alt="image-20210610165645928" /></p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
  </entry>
  <entry>
    <title>List stream</title>
    <url>/2023/06/05/Java%208%20Stream/</url>
    <content><![CDATA[<p>通过 <code>workOrederNum</code>  字段排序</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;ProduceOrderDTO&gt; collect = list.stream().sorted(Comparator.comparing(ProduceOrderDTO::getWorkOrderNum)).collect(Collectors.toList());</span><br></pre></td></tr></table></figure></p>
<p>查出 <code>InstructionPoDTO</code>  中 <code>InstructionDocNum</code>  作为 list</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 筛选出不重复的 instructionDocNum</span></span><br><span class="line">List&lt;String&gt; instructionDocNums = read.stream().map(InstructionPoDTO::getInstructionDocNum).distinct().collect(Collectors.toList());</span><br></pre></td></tr></table></figure></p>
<p>筛选所有 <code>instructionDocNum = 123</code>  的对象</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;InstructionPoDTO&gt; instructionPoDTOS = read.stream().filter(instructionPoDTO -&gt;</span><br><span class="line">     instructionPoDTO.getInstructionDocNum().equals(<span class="string">&quot;123&quot;</span>)).collect(Collectors.toList());</span><br></pre></td></tr></table></figure></p>
<p>查询出第一个</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">instructionDocId</span> <span class="operator">=</span> instructionDocs.stream().findFirst().get();</span><br></pre></td></tr></table></figure></p>
<p>设置 <code>typeCode</code>  为 key， <code>list</code>  的对象为 <code>value</code></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, MtGenType&gt; typesMap = types.stream().collect(Collectors.toMap(t -&gt; t.getTypeCode(), t -&gt; t));</span><br></pre></td></tr></table></figure></p>
<p>// 通过字段去重</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">instructionSapStockDTOS.stream().collect(Collectors.collectingAndThen(Collectors.toCollection(()-&gt; new TreeSet&lt;&gt;(Comparator.comparing(o -&gt; o.getMaterial()+&quot;;&quot;+o.getPlant()+&quot;;&quot;+o.getStorage()+&quot;;&quot;+o.getBatch()+&quot;;&quot;+o.getSpecialStock()))), ArrayList::new));</span><br></pre></td></tr></table></figure></p>
<p>GROUP BY</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Map&lt;String, List&lt;WmsIqcRecord&gt;&gt; map = records.stream().collect(Collectors.groupingBy(iqcRecord -&gt; &#123;</span><br><span class="line">                    if (StringUtils.equals(&quot;TO_DO&quot;, iqcRecord.getStatus())) &#123;</span><br><span class="line">                        switch (iqcRecord.getDealMethod()) &#123;</span><br><span class="line">                            case &quot;RELEASE&quot;:</span><br><span class="line">                                return &quot;TO_RELEASE&quot;;</span><br><span class="line">                            case &quot;FREEZE&quot;:</span><br><span class="line">                                return &quot;TO_FREEZE&quot;;</span><br><span class="line">                            case &quot;RETURN&quot;:</span><br><span class="line">                                return &quot;TO_RETURN&quot;;</span><br><span class="line">                            default:</span><br><span class="line">                                return &quot;TO_DO&quot;;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; else if (StringUtils.equals(&quot;DONE&quot;, iqcRecord.getStatus())) &#123;</span><br><span class="line">                        switch (iqcRecord.getDealMethod()) &#123;</span><br><span class="line">                            case &quot;RELEASE&quot;:</span><br><span class="line">                                return &quot;RELEASE_DONE&quot;;</span><br><span class="line">                            case &quot;FREEZE&quot;:</span><br><span class="line">                                return &quot;FREEZE_DONE&quot;;</span><br><span class="line">                            case &quot;RETURN&quot;:</span><br><span class="line">                                return &quot;RETURN_DONE&quot;;</span><br><span class="line">                            default:</span><br><span class="line">                                return &quot;DONE&quot;;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        return &quot;DEAL&quot;;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;));</span><br></pre></td></tr></table></figure></p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//        List&lt;LocalDate&gt; collect = localDates.stream().sorted((var1, var2) -&gt; &#123;</span><br><span class="line">//            if (var1.isBefore(var2)) &#123;</span><br><span class="line">//                return -1;</span><br><span class="line">//            &#125;</span><br><span class="line">//            return 1;</span><br><span class="line">//        &#125;).collect(Collectors.toList());</span><br><span class="line">//        System.out.println(localDates.stream().sorted().collect(Collectors.toList()));</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Jmeter</title>
    <url>/2023/06/05/Jmeter%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p><img data-src="https://i.loli.net/2021/08/18/7YTjKofu9SMPDWU.png" alt="image-20210818195517502" /></p>
<p><img data-src="https://i.loli.net/2021/08/18/hqIAWMJTpGnS4tB.png" alt="image-20210818195538542" /></p>
<p><img data-src="https://i.loli.net/2021/08/18/B73hXaVCULHQ4KN.png" alt="image-20210818200759281" /></p>
]]></content>
      <tags>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>Navicat数据库导出链接密码解析</title>
    <url>/2023/06/05/Mac%20%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<p>参考：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhcnJpc19sZWxlL2FydGljbGUvZGV0YWlscy8xMjM1ODgxMjc=">https://blog.csdn.net/harris_lele/article/details/123588127</span></p>
<p>导出来，然后用 php 解析密码即可；</p>
<p>在线运行 php：</p>
<p><code>https://www.toolfk.com/tools/online-runphp.html</code></p>
<p>运行代码：</p>
<p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NavicatPassword</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$version</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$aesKey</span> = <span class="string">&#x27;libcckeylibcckey&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$aesIv</span> = <span class="string">&#x27;libcciv libcciv &#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$blowString</span> = <span class="string">&#x27;3DC5CA39&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$blowKey</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$blowIv</span> = <span class="literal">null</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$version</span> = <span class="number">12</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;version = <span class="variable">$version</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;blowKey = <span class="title function_ invoke__">sha1</span>(<span class="string">&#x27;3DC5CA39&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;blowIv = <span class="title function_ invoke__">hex2bin</span>(<span class="string">&#x27;d9c7c3c8870d64bd&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">encrypt</span>(<span class="params"><span class="variable">$string</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = <span class="literal">FALSE</span>;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable language_">$this</span>-&gt;version) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                <span class="variable">$result</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">encryptEleven</span>(<span class="variable">$string</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                <span class="variable">$result</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">encryptTwelve</span>(<span class="variable">$string</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">encryptEleven</span>(<span class="params"><span class="variable">$string</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$round</span> = <span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">floor</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$string</span>) / <span class="number">8</span>));</span><br><span class="line">        <span class="variable">$leftLength</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$string</span>) % <span class="number">8</span>;</span><br><span class="line">        <span class="variable">$result</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable">$currentVector</span> = <span class="variable language_">$this</span>-&gt;blowIv;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$round</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$temp</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">encryptBlock</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">xorBytes</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$string</span>, <span class="number">8</span> * <span class="variable">$i</span>, <span class="number">8</span>), <span class="variable">$currentVector</span>));</span><br><span class="line">            <span class="variable">$currentVector</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">xorBytes</span>(<span class="variable">$currentVector</span>, <span class="variable">$temp</span>);</span><br><span class="line">            <span class="variable">$result</span> .= <span class="variable">$temp</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$leftLength</span>) &#123;</span><br><span class="line">            <span class="variable">$currentVector</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">encryptBlock</span>(<span class="variable">$currentVector</span>);</span><br><span class="line">            <span class="variable">$result</span> .= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">xorBytes</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$string</span>, <span class="number">8</span> * <span class="variable">$i</span>, <span class="variable">$leftLength</span>), <span class="variable">$currentVector</span>);</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">strtoupper</span>(<span class="title function_ invoke__">bin2hex</span>(<span class="variable">$result</span>));</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">encryptBlock</span>(<span class="params"><span class="variable">$block</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">openssl_encrypt</span>(<span class="variable">$block</span>, <span class="string">&#x27;BF-ECB&#x27;</span>, <span class="variable">$this</span>-&gt;blowKey, OPENSSL_RAW_DATA|OPENSSL_NO_PADDING);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">decryptBlock</span>(<span class="params"><span class="variable">$block</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">openssl_decrypt</span>(<span class="variable">$block</span>, <span class="string">&#x27;BF-ECB&#x27;</span>, <span class="variable">$this</span>-&gt;blowKey, OPENSSL_RAW_DATA|OPENSSL_NO_PADDING);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">xorBytes</span>(<span class="params"><span class="variable">$str1</span>, <span class="variable">$str2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$str1</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$result</span> .= <span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$str1</span>[<span class="variable">$i</span>]) ^ <span class="title function_ invoke__">ord</span>(<span class="variable">$str2</span>[<span class="variable">$i</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">encryptTwelve</span>(<span class="params"><span class="variable">$string</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = <span class="title function_ invoke__">openssl_encrypt</span>(<span class="variable">$string</span>, <span class="string">&#x27;AES-128-CBC&#x27;</span>, <span class="variable">$this</span>-&gt;aesKey, OPENSSL_RAW_DATA, <span class="variable">$this</span>-&gt;aesIv);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">strtoupper</span>(<span class="title function_ invoke__">bin2hex</span>(<span class="variable">$result</span>));</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">decrypt</span>(<span class="params"><span class="variable">$string</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = <span class="literal">FALSE</span>;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable language_">$this</span>-&gt;version) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                <span class="variable">$result</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">decryptEleven</span>(<span class="variable">$string</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                <span class="variable">$result</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">decryptTwelve</span>(<span class="variable">$string</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">decryptEleven</span>(<span class="params"><span class="variable">$upperString</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$string</span> = <span class="title function_ invoke__">hex2bin</span>(<span class="title function_ invoke__">strtolower</span>(<span class="variable">$upperString</span>));</span><br><span class="line">         </span><br><span class="line">        <span class="variable">$round</span> = <span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">floor</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$string</span>) / <span class="number">8</span>));</span><br><span class="line">        <span class="variable">$leftLength</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$string</span>) % <span class="number">8</span>;</span><br><span class="line">        <span class="variable">$result</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable">$currentVector</span> = <span class="variable language_">$this</span>-&gt;blowIv;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$round</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$encryptedBlock</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$string</span>, <span class="number">8</span> * <span class="variable">$i</span>, <span class="number">8</span>);</span><br><span class="line">            <span class="variable">$temp</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">xorBytes</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">decryptBlock</span>(<span class="variable">$encryptedBlock</span>), <span class="variable">$currentVector</span>);</span><br><span class="line">            <span class="variable">$currentVector</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">xorBytes</span>(<span class="variable">$currentVector</span>, <span class="variable">$encryptedBlock</span>);</span><br><span class="line">            <span class="variable">$result</span> .= <span class="variable">$temp</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$leftLength</span>) &#123;</span><br><span class="line">            <span class="variable">$currentVector</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">encryptBlock</span>(<span class="variable">$currentVector</span>);</span><br><span class="line">            <span class="variable">$result</span> .= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">xorBytes</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$string</span>, <span class="number">8</span> * <span class="variable">$i</span>, <span class="variable">$leftLength</span>), <span class="variable">$currentVector</span>);</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">decryptTwelve</span>(<span class="params"><span class="variable">$upperString</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$string</span> = <span class="title function_ invoke__">hex2bin</span>(<span class="title function_ invoke__">strtolower</span>(<span class="variable">$upperString</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">openssl_decrypt</span>(<span class="variable">$string</span>, <span class="string">&#x27;AES-128-CBC&#x27;</span>, <span class="variable">$this</span>-&gt;aesKey, OPENSSL_RAW_DATA, <span class="variable">$this</span>-&gt;aesIv);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//需要指定版本两种，11或12</span></span><br><span class="line"><span class="comment">//$navicatPassword = new NavicatPassword(11);</span></span><br><span class="line"><span class="variable">$navicatPassword</span> = <span class="keyword">new</span> <span class="title class_">NavicatPassword</span>(<span class="number">12</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//解密</span></span><br><span class="line"><span class="comment">//$decode = $navicatPassword-&gt;decrypt(&#x27;15057D7BA390&#x27;);</span></span><br><span class="line"><span class="variable">$decode</span> = <span class="variable">$navicatPassword</span>-&gt;<span class="title function_ invoke__">decrypt</span>(<span class="string">&#x27;75008D0AE102C19EE3767E201AC9E4D2&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$decode</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>实用</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/2023/06/05/MySQL/</url>
    <content><![CDATA[<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	swid.OPERATION,</span><br><span class="line">	swid.DELIVERY_METHOD,</span><br><span class="line">	GROUP_CONCAT( DISTINCT( swid.WORK_ORDER_ID ) ) WORK_ORDER_ID </span><br><span class="line">FROM</span><br><span class="line">	SSME_WO_ISSUE_DETAIL swid </span><br><span class="line">WHERE</span><br><span class="line">	swid.TENANT_ID = 4 </span><br><span class="line">	AND swid.WORK_ORDER_ID IN ( &#x27;42717.1&#x27;,&#x27;42719.1&#x27; ) </span><br><span class="line">GROUP BY</span><br><span class="line">	swid.OPERATION,</span><br><span class="line">	swid.DELIVERY_METHOD</span><br></pre></td></tr></table></figure></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbWlucWlsaWFuZy9wLzE2NTc3MTAyLmh0bWw=">https://www.cnblogs.com/minqiliang/p/16577102.html</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3oxNTcxMTE4Nzc4Ny9hcnRpY2xlL2RldGFpbHMvMTI0OTg2MzA5">https://blog.csdn.net/z15711187787/article/details/124986309</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk5NDU3NS9hcnRpY2xlL2RldGFpbHMvMTIzMDcxOTA5P3NwbT0xMDAxLjIxMDEuMzAwMS42NjYxLjEmYW1wO3V0bV9tZWRpdW09ZGlzdHJpYnV0ZS5wY19yZWxldmFudF90MC5ub25lLXRhc2stYmxvZy0yJTdFZGVmYXVsdCU3RUNUUkxJU1QlN0VSYXRlLTEtMTIzMDcxOTA5LWJsb2ctMTIzODIxMTg2LnQwX2VkdV9taXgmYW1wO2RlcHRoXzEtdXRtX3NvdXJjZT1kaXN0cmlidXRlLnBjX3JlbGV2YW50X3QwLm5vbmUtdGFzay1ibG9nLTIlN0VkZWZhdWx0JTdFQ1RSTElTVCU3RVJhdGUtMS0xMjMwNzE5MDktYmxvZy0xMjM4MjExODYudDBfZWR1X21peCZhbXA7dXRtX3JlbGV2YW50X2luZGV4PTE=">https://blog.csdn.net/weixin_45994575/article/details/123071909?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-123071909-blog-123821186.t0_edu_mix&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-123071909-blog-123821186.t0_edu_mix&amp;utm_relevant_index=1</span></p>
<p>部署记录</p>
<h4 id="jdbctemplete批处理"><a class="anchor" href="#jdbctemplete批处理">#</a> JDBCTemplete 批处理</h4>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// sql语句</span><br><span class="line">String sql = &quot;INSERT INTO ssme_iqc_change(TENANT_ID, KID) VALUE (?, ?);&quot;;</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; kids = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">// BatchPreparedStatementSetter 通过循环取出数据填充到SQL中</span><br><span class="line">jdbcTemplate.batchUpdate(sql, new BatchPreparedStatementSetter() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void setValues(PreparedStatement ps, int i) throws SQLException &#123;</span><br><span class="line">                ps.setLong(1, 4L);</span><br><span class="line">                ps.setString(2, kids.get(i));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public int getBatchSize() &#123;</span><br><span class="line">                return kids.size();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p>
<h4 id="mysql数据删除恢复"><a class="anchor" href="#mysql数据删除恢复">#</a> MySQL 数据删除恢复</h4>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 数据库中运行</span><br><span class="line"># 判断binlog是否开启</span><br><span class="line">show variables like &#x27;%log_bin%&#x27;;</span><br><span class="line"></span><br><span class="line"># 找到数据库data位置</span><br><span class="line">show variables like &#x27;datadir&#x27;;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>data 目录下数据  找到当天的 binlog<br />
<img data-src="https://s3.uuu.ovh/imgs/2022/11/28/9c0f7495a6838922.png" alt="" /></li>
</ul>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 转换为SQL 只转换操作时间内的数据即可</span><br><span class="line">root@VM-4-10-ubuntu:/var/lib/mysql# mysqlbinlog --base64-output=decode-rows -v --database=smart-admin-dev --start-datetime=&quot;2022-11-28 10:50:00&quot; --stop-datetime=&quot;2022-11-28 11:00:00&quot; binlog.000018 &gt; 000018.sql</span><br></pre></td></tr></table></figure></p>
<ul>
<li>000018.sql<br />
<img data-src="https://s3.uuu.ovh/imgs/2022/11/28/09e65127e32811f6.png" alt="" /></li>
</ul>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 将SQL转换为insert语句</span><br><span class="line">root@VM-4-10-ubuntu:/var/lib/mysql# cat 000018.sql | sed -n &#x27;/###/p&#x27; | sed &#x27;s/### //g;s/\/\*.*/,/g;s/DELETE FROM/;INSERT INTO/g;s/WHERE/SELECT/g;&#x27; |sed -r &#x27;s/(@17.*),/\1;/g&#x27; | sed &#x27;s/@1=//g&#x27;| sed &#x27;s/@[1-9]=/,/g&#x27; | sed &#x27;s/@[1-9][0-9]=/,/g&#x27; &gt; 000018OK.sql</span><br></pre></td></tr></table></figure></p>
<ul>
<li>000018OK.sql<br />
<img data-src="https://s3.uuu.ovh/imgs/2022/11/28/070cfb64cc8045dc.png" alt="" /></li>
</ul>
<p>最后将数据导入数据库即可。</p>
<h3 id="group"><a class="anchor" href="#group">#</a> Group</h3>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 修改 group_concat 长度限制</span><br><span class="line">SET GLOBAL group_concat_max_len=102400;</span><br><span class="line">SET SESSION group_concat_max_len=102400;</span><br></pre></td></tr></table></figure></p>
<h3 id="mapper空指针"><a class="anchor" href="#mapper空指针">#</a> Mapper 空指针</h3>
<p>count sql resultType 为对象，导致报错</p>
<h3 id="waiting-for-table-metadata-lock"><a class="anchor" href="#waiting-for-table-metadata-lock">#</a> Waiting for table metadata lock</h3>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppYW5sb25nNzI3L2FydGljbGUvZGV0YWlscy8xMTE4NzcyMjY=">https://blog.csdn.net/jianlong727/article/details/111877226</span></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>Nacos</title>
    <url>/2023/06/05/Nacos/</url>
    <content><![CDATA[<h3 id="配置中心"><a class="anchor" href="#配置中心">#</a> 配置中心</h3>
<h5 id="1添加依赖"><a class="anchor" href="#1添加依赖">#</a> 1. 添加依赖</h5>
<p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos-config-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h5 id="2启动类注解-nacospropertysource"><a class="anchor" href="#2启动类注解-nacospropertysource">#</a> 2. 启动类注解 @NacosPropertySource</h5>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>  </span><br><span class="line"><span class="comment">// dataId 对应配置管理-配置列表-dataId</span></span><br><span class="line"><span class="meta">@NacosPropertySource(dataId = &quot;nacosDemo&quot;, autoRefreshed = true)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NacosDemoApplication</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        SpringApplication.run(NacosDemoApplication.class, args);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="3配置nacos地址"><a class="anchor" href="#3配置nacos地址">#</a> 3. 配置 nacos 地址</h5>
<p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span>  </span><br><span class="line">    <span class="attr">application:</span>  </span><br><span class="line">        <span class="attr">name:</span> <span class="string">nacos-demo</span></span><br></pre></td></tr></table></figure></p>
<h5 id="4使用配置"><a class="anchor" href="#4使用配置">#</a> 4. 使用配置</h5>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheController</span> &#123;  </span><br><span class="line">  </span><br><span class="line">   <span class="meta">@NacosValue(value = &quot;$&#123;useLocalCache:false&#125;&quot;, autoRefreshed = true)</span>  </span><br><span class="line">   <span class="keyword">private</span> <span class="type">boolean</span> useLocalCache;  </span><br><span class="line">  </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">template</span> <span class="operator">=</span> <span class="string">&quot;useLocalCache is %s!&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">   <span class="meta">@GetMapping(&quot;/cache&quot;)</span>  </span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">cache</span><span class="params">()</span> &#123;  </span><br><span class="line">      <span class="comment">// 默认返回false</span></span><br><span class="line">      <span class="keyword">return</span> String.format(template, useLocalCache);  </span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 此时返回结果 ：useLocalCache is false!</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>增加配置并发布</li>
</ul>
<p><img data-src="https://s3.uuu.ovh/imgs/2022/11/30/d17d85b8702c1cc8.png" alt="" /></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回结果 ：useLocalCache is true!</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
  </entry>
  <entry>
    <title>Springboot</title>
    <url>/2023/06/05/Springboot%E8%BF%94%E5%9B%9Ehtml/</url>
    <content><![CDATA[<h1 id="springboot返回html"><a class="anchor" href="#springboot返回html">#</a> Springboot 返回 html</h1>
<p>注：Springboot 的版本 2.1.3.RELEASE</p>
<p><em>List-1</em> application.properties 文件</p>
<p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">server.<span class="property">port</span>=<span class="number">8080</span></span><br><span class="line">#url中，项目的前缀</span><br><span class="line">server.<span class="property">servlet</span>.<span class="property">context</span>-path=/project</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">spring.<span class="property">mvc</span>.<span class="property">view</span>.<span class="property">prefix</span>=/</span><br><span class="line">spring.<span class="property">mvc</span>.<span class="property">view</span>.<span class="property">suffix</span>=.<span class="property">html</span></span><br></pre></td></tr></table></figure></p>
<p>整体结构如下图 1 所示，html 要放在 static 下，不是 templates 下</p>
<p><img data-src="https://ask.qcloudimg.com/http-save/yehe-5089774/1k8adq8jn7.jpeg?imageView2/2/w/1620" alt="img" /></p>
<p>图１</p>
<p><em>List-2</em> HelloController 的内容如下</p>
<p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.<span class="property">extern</span>.<span class="property">slf4j</span>.<span class="property">Slf4j</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">springframework</span>.<span class="property">stereotype</span>.<span class="property">Controller</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">springframework</span>.<span class="property">web</span>.<span class="property">bind</span>.<span class="property">annotation</span>.<span class="property">RequestMapping</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Slf4</span>j</span><br><span class="line">@<span class="title class_">Controller</span></span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">RequestMapping</span>(value = <span class="string">&quot;/hello&quot;</span>)</span><br><span class="line">    public <span class="title class_">String</span> <span class="title function_">index</span>(<span class="params"></span>) &#123;</span><br><span class="line">        log.<span class="title function_">info</span>(<span class="string">&quot;收到请求&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;html/hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><em>List-3</em> 启动 springboot，之后在浏览器中输入</p>
<p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#返回index.<span class="property">html</span>的内容</span><br><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:8080/project/</span></span><br><span class="line"></span><br><span class="line">#返回hello.<span class="property">html</span>的内容</span><br><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:8080/project/hello</span></span><br></pre></td></tr></table></figure></p>
<p>网上很多关于模板的（Thymeleaf 、FreeMarker 等），但是我不需要，我只需要纯的 html。</p>
<p>index.html 是 springboot 的默认 welcome page。</p>
<h2 id="reference"><a class="anchor" href="#reference">#</a> Reference</h2>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9lYjRjMGZjMmRmYzQ=">https://www.jianshu.com/p/eb4c0fc2dfc4</span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctYm9vdC9kb2NzL2N1cnJlbnQvcmVmZXJlbmNlL2h0bWxzaW5nbGUvI2Jvb3QtZmVhdHVyZXMtc3ByaW5nLW12Yy1zdGF0aWMtY29udGVudA==">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-spring-mvc-static-content</span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctYm9vdC9kb2NzL2N1cnJlbnQvcmVmZXJlbmNlL2h0bWxzaW5nbGUvI2Jvb3QtZmVhdHVyZXMtc3ByaW5nLW12Yy13ZWxjb21lLXBhZ2U=">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-spring-mvc-welcome-page</span></li>
</ol>
<p>​     (adsbygoogle = window.adsbygoogle || []).push({});</p>
]]></content>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis笔记</title>
    <url>/2021/12/10/Redis/</url>
    <content><![CDATA[<p><img data-src="https://s2.loli.net/2021/12/10/Flr6LcyMp7aXzZG.png" alt="image-20211210103722039" /></p>
<p><img data-src="https://s2.loli.net/2021/12/10/SdJVDNcHnpkoReQ.png" alt="image-20211210103735160" /></p>
<p><img data-src="https://s2.loli.net/2021/12/10/KTlw579PQLcaq4r.png" alt="image-20211210103752696" /></p>
<p>// 201 个线程 应该扣减 201 -&gt; 库存不足</p>
<p><img data-src="https://s2.loli.net/2021/12/10/NlMoYyiBnv8rqXD.png" alt="image-20211210104539695" /></p>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>StringToInteger</title>
    <url>/2023/06/05/StringToInteger/</url>
    <content><![CDATA[<h1 id="string-转-integer"><a class="anchor" href="#string-转-integer">#</a> String 转 Integer</h1>
<h2 id="1integer的parseint方法"><a class="anchor" href="#1integer的parseint方法">#</a> 1.Integer 的 parseInt 方法</h2>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String string = &quot;123&quot;;</span><br><span class="line">int value = Integer.parseInt(string);</span><br><span class="line">System.out.println(&quot;stringToInt----------&gt;&quot;+value);</span><br><span class="line"></span><br><span class="line">结果：StringToInt----------&gt;123</span><br></pre></td></tr></table></figure></p>
<h2 id="2integer的valueof方法"><a class="anchor" href="#2integer的valueof方法">#</a> 2.Integer 的 valueOf 方法</h2>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String string = &quot;123&quot;;</span><br><span class="line">Integer value = Integer.valueOf(string);</span><br><span class="line">System.out.println(&quot;stringToInt1----------&gt;&quot;+value);</span><br><span class="line"></span><br><span class="line">结果：StringToInt1----------&gt;123</span><br></pre></td></tr></table></figure></p>
<p>以上两种方法都是可行的。</p>
<p>但是会有特殊的情况，比如：</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String string = &quot;abc&quot;;</span><br><span class="line">int value = Integer.parseInt(string);</span><br><span class="line">System.out.println(&quot;stringToInt----------&gt;&quot;+value);</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.NumberFormatException: For input string: &quot;abc&quot;</span><br><span class="line">	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)</span><br><span class="line">	at java.lang.Integer.parseInt(Integer.java:580)</span><br><span class="line">	at java.lang.Integer.parseInt(Integer.java:615)</span><br><span class="line">	at com.hand.todo.infra.util.StringToInt.stringToInt(StringToInt.java:16)</span><br><span class="line">	at com.hand.todo.infra.util.StringToInt.main(StringToInt.java:10)</span><br></pre></td></tr></table></figure></p>
<p>使用 stringToInt1 () 也会返回同样的错误。</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static Integer valueOf(String s) throws NumberFormatException &#123;</span><br><span class="line">    return Integer.valueOf(parseInt(s, 10));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>valueOf () 调用了 parseInt ()，所以返回同样的错误是正常的。</p>
<p>按照正常的逻辑来说，我们需要对这个错误进行处理，比如：</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String string = &quot;abc&quot;;</span><br><span class="line">int value = 0;</span><br><span class="line">try &#123;</span><br><span class="line">    value = Integer.parseInt(string);</span><br><span class="line">&#125; catch (NumberFormatException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;StringToInt----------&gt;&quot;+value);</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">java.lang.NumberFormatException: For input string: &quot;abc&quot;</span><br><span class="line">	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)</span><br><span class="line">	at java.lang.Integer.parseInt(Integer.java:580)</span><br><span class="line">	at java.lang.Integer.parseInt(Integer.java:615)</span><br><span class="line">	at com.hand.todo.infra.util.StringToInt.stringToInt(StringToInt.java:18)</span><br><span class="line">	at com.hand.todo.infra.util.StringToInt.main(StringToInt.java:10)</span><br><span class="line">StringToInt----------&gt;0</span><br></pre></td></tr></table></figure></p>
<p>可以看到，虽然依然报错，但是程序还是继续执行了。</p>
<p>然后回到主题。</p>
<h2 id="3guava-的-ints-结合-java8-的-optional"><a class="anchor" href="#3guava-的-ints-结合-java8-的-optional">#</a> 3.Guava 的 Ints 结合 Java8 的 Optional</h2>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String string = &quot;abc&quot;;</span><br><span class="line">Integer value = Optional.ofNullable(string)</span><br><span class="line">        .map(Ints::tryParse)</span><br><span class="line">        .orElse(0);</span><br><span class="line"> System.out.println(&quot;StringToInt2----------&gt;&quot; + value);</span><br><span class="line"> </span><br><span class="line"> 结果：StringToInt2----------&gt;0</span><br></pre></td></tr></table></figure></p>
<p>可以在转换失败的时候为他设置默认值：</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String string = &quot;abc&quot;;</span><br><span class="line">Integer value = Optional.ofNullable(string)</span><br><span class="line">        .map(Ints::tryParse)</span><br><span class="line">        .orElse(100);</span><br><span class="line"> System.out.println(&quot;StringToInt2----------&gt;&quot; + value);</span><br><span class="line"> </span><br><span class="line"> 结果：StringToInt2----------&gt;100</span><br></pre></td></tr></table></figure></p>
<p><strong>写在末尾：之所以写这么详细是因为最开始的时候我很菜，看别人写的文档都很简单，虽然可以解决问题，但是却不解其意，所以写的啰嗦一点，对新手比较友好。</strong></p>
<p>​	&lt;/body&gt;</p>
<p>&lt;/html&gt;</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu</title>
    <url>/2023/06/05/Ubuntu/</url>
    <content><![CDATA[<h3 id="netdata"><a class="anchor" href="#netdata">#</a> NETDATA</h3>
<h4 id="1-安装编译环境"><a class="anchor" href="#1-安装编译环境">#</a> 1. 安装编译环境</h4>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install zlib1g-dev gcc make git autoconf autogen automake pkg-config uuid-dev</span><br></pre></td></tr></table></figure></p>
<h4 id="2-克隆项目"><a class="anchor" href="#2-克隆项目">#</a> 2. 克隆项目</h4>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/firehol/netdata.git --depth=1</span><br></pre></td></tr></table></figure></p>
<h4 id="3-安装netdata"><a class="anchor" href="#3-安装netdata">#</a> 3. 安装 netdata</h4>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.cnblogs.com/beile/p/12875395.html</span><br><span class="line"></span><br><span class="line">官方：https://learn.netdata.cloud/docs/agent/packaging/installer/methods/offline</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">./netdata-installer.sh</span><br></pre></td></tr></table></figure></p>
<p>然后访问  <code>IP:19999</code></p>
<p><img data-src="https://i.loli.net/2020/09/23/Zp2AJqzlKPSaW7E.png" alt="" /></p>
<h3 id="nginx"><a class="anchor" href="#nginx">#</a> NGINX</h3>
<h4 id="1-安装nginx"><a class="anchor" href="#1-安装nginx">#</a> 1. 安装 Nginx</h4>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo su</span><br><span class="line">apt-get install nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果是Centos</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>浏览器地址栏输入  <code>IP</code>  看到如下页面表示已经安装好了 Nginx，如果有域名，输入域名也是同样的效果（前提是已经给域名添加了解析）</p>
<p><img data-src="https://i.loli.net/2020/09/23/45jPeQEu2TCoOyb.png" alt="" /></p>
<h4 id="2nginx-转发端口"><a class="anchor" href="#2nginx-转发端口">#</a> 2.Nginx 转发端口</h4>
<p>我已经在服务器上安装了 <code>netdata</code>  服务，端口为 <code>19999</code> , 但是通过 <code>Nginx</code>  访问服务器时默认是 <code>80</code>  端口，所以需要做一些配置，在我们输入域名的时候访问不同的端口。</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># nginx.conf里包含	include /etc/nginx/conf.d/*.conf; 所以可以在/etc/nginx/conf.d 文件夹下新增一个配置文件</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name IP;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">      client_max_body_size   3000m;</span><br><span class="line">      proxy_next_upstream http_502 http_504 error timeout invalid_header;</span><br><span class="line"></span><br><span class="line">      proxy_set_header   Host $host;</span><br><span class="line">      proxy_set_header   X-Real-IP $remote_addr;</span><br><span class="line">      proxy_set_header   X-Real-PORT $remote_port;</span><br><span class="line">      proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">      proxy_pass http://127.0.0.1:19999;</span><br><span class="line">      proxy_redirect default;</span><br><span class="line">      proxy_connect_timeout 3000;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样 当我们在浏览器地址栏输入 域名时 就会自动跳转到 <code>netdata</code>  的主页</p>
<h4 id="3-反向代理负载均衡"><a class="anchor" href="#3-反向代理负载均衡">#</a> 3. 反向代理 + 负载均衡 =&gt;</h4>
<p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 实际服务</span></span><br><span class="line">upstream web_servers &#123;</span><br><span class="line">	server 192.168.139.128:9001;</span><br><span class="line">	server 192.168.139.128:9002;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">	<span class="comment"># 代理端口</span></span><br><span class="line">	listen 10086;</span><br><span class="line">	server_name 192.168.139.128;</span><br><span class="line"></span><br><span class="line">	location / &#123;</span><br><span class="line">		proxy_pass http://web_servers;</span><br><span class="line">		proxy_set_header Host <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以部署两个服务 9001、9002 发布时，等上一个成功发布后，启动第二个。</span></span><br><span class="line"><span class="comment"># 未验证</span></span><br><span class="line"><span class="comment"># 加上systemclt管理Java服务</span></span><br><span class="line"><span class="comment"># 负载均衡的方式：https://mp.weixin.qq.com/s/yJyEwPkLD0V9G0451gbZYg</span></span><br><span class="line"><span class="comment"># 1.轮询；2.权重；3.ip_hash；4.fair；5.url_hash</span></span><br></pre></td></tr></table></figure></p>
<h3 id="时区"><a class="anchor" href="#时区">#</a> 时区</h3>
<pre><code>- https://blog.csdn.net/weixin_44109450/article/details/124259338
- 
</code></pre>
<h3 id="github"><a class="anchor" href="#github">#</a> Github</h3>
<pre><code>sudo vim /etc/hosts
140.82.112.4 github.com  
199.232.69.194 github.global.ssl.fastly.net
</code></pre>
<h3 id="内网穿透"><a class="anchor" href="#内网穿透">#</a> 内网穿透</h3>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. https://doc.natfrp.com/#/frpc/service/systemd</span><br><span class="line">2. </span><br></pre></td></tr></table></figure></p>
<h3 id="item2"><a class="anchor" href="#item2">#</a> Item2</h3>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://zhuanlan.zhihu.com/p/550022490</span><br></pre></td></tr></table></figure></p>
<h3 id="青龙"><a class="anchor" href="#青龙">#</a> 青龙</h3>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 进入青龙容器</span><br><span class="line">docker exec -it qinglong bash</span><br></pre></td></tr></table></figure></p>
<h3 id="使用systemctl管理服务"><a class="anchor" href="#使用systemctl管理服务">#</a> 使用 systemctl 管理服务</h3>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.jianshu.com/p/2deb0b79cb10</span><br><span class="line"></span><br><span class="line"># 路径</span><br><span class="line">/etc/systemd/system</span><br><span class="line"></span><br><span class="line"># 日志</span><br><span class="line">journalctl -u 服务名</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h3 id="arthas"><a class="anchor" href="#arthas">#</a> Arthas</h3>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://arthas.aliyun.com/doc/quick-start.html#_2-%E5%90%AF%E5%8A%A8-arthas</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[arthas@588425]$ watch net.lab1024.smartadmin.module.business.project.service.ProjectBaiscService queryProjects returnObj</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 2 , method count: 2) cost in 170 ms, listenerId: 1</span><br><span class="line">method=net.lab1024.smartadmin.module.business.project.service.ProjectBaiscService.queryProjects location=AtExit</span><br><span class="line">ts=2022-11-28 20:11:49; [cost=37.212667ms] result=@ResponseDTO[</span><br><span class="line">    code=@Integer[1],</span><br><span class="line">    msg=@String[操作成功!],</span><br><span class="line">    success=@Boolean[true],</span><br><span class="line">    data=@ArrayList[isEmpty=false;size=13],</span><br><span class="line">]</span><br><span class="line">method=net.lab1024.smartadmin.module.business.project.service.ProjectBaiscService$$EnhancerBySpringCGLIB$$2f00139f.queryProjects location=AtExit</span><br><span class="line">ts=2022-11-28 20:11:49; [cost=94.21994ms] result=@ResponseDTO[</span><br><span class="line">    code=@Integer[1],</span><br><span class="line">    msg=@String[操作成功!],</span><br><span class="line">    success=@Boolean[true],</span><br><span class="line">    data=@ArrayList[isEmpty=false;size=13],</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h3 id="prometheus"><a class="anchor" href="#prometheus">#</a> Prometheus</h3>
<p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># prometheus</span></span><br><span class="line">wget https://github.com/prometheus/prometheus/releases/download/v2.40.4/prometheus-2.40.4.linux-amd64.tar.gz</span><br><span class="line">tar -zxvf prometheus-2.40.4.linux-amd64.tar.gz</span><br><span class="line">sudo <span class="built_in">mv</span> prometheus-2.40.4.linux-amd64 /usr/local/prometheus</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vim /usr/lib/systemd/system/prometheus.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=prometheus</span><br><span class="line">After=network.target </span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=prometheus</span><br><span class="line">Group=prometheus</span><br><span class="line">WorkingDirectory=/usr/local/prometheus</span><br><span class="line">ExecStart=/usr/local/prometheus/prometheus</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动并开启自启</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> --now prometheus									</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h5 id=""><a class="anchor" href="#">#</a> </h5>
<p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/gitee_go/deoloy</span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line">tar -zxf output.tar.gz</span><br><span class="line"><span class="built_in">cd</span> target</span><br><span class="line">pid=`ps -ef|grep xxx|grep -v grep|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$pid</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">kill</span> -15 <span class="variable">$pid</span>  </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">nohup</span> java -jar xxx.jar --server.port=8090 &amp;</span><br><span class="line"><span class="comment"># Ubuntu sh脚本不支持for循环  这里会报错</span></span><br><span class="line"><span class="keyword">for</span>((i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++));</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  new_pid=`ps -ef|grep xxx|grep -v grep|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line">  <span class="keyword">if</span> [ ! <span class="variable">$new_pid</span> ]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;starting......&#x27;</span></span><br><span class="line">   <span class="built_in">sleep</span> 10</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;Deploy Success&quot;</span></span><br><span class="line">   <span class="built_in">break</span>;</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;alias python=/usr/bin/python3&quot;</span> &gt;&gt; ~/.bash_profile</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>系统集成</tag>
      </tags>
  </entry>
  <entry>
    <title>WHEN YOU HAVE A NEW PC</title>
    <url>/2023/06/05/WHEN%20YOU%20HAVE%20A%20NEW%20PC/</url>
    <content><![CDATA[<h3 id="center-when-you-have-a-new-pccenter"><a class="anchor" href="#center-when-you-have-a-new-pccenter">#</a> &lt;center&gt; WHEN YOU HAVE A NEW PC&lt;/center&gt;</h3>
<h4 id="java环境配置"><a class="anchor" href="#java环境配置">#</a> Java 环境配置</h4>
<h5 id="1-安装"><a class="anchor" href="#1-安装">#</a> 1. 安装</h5>
<p>​	提前新建两个文件夹，jdk，jre，默认路径也可以</p>
<p>​	安装 <code>jdk-8u111-windows-x64.exe</code></p>
<p>​	设置 jdk、jre 的路径</p>
<h5 id="2-配置环境变量"><a class="anchor" href="#2-配置环境变量">#</a> 2. 配置环境变量</h5>
<p>​	右键此电脑 -&gt; 属性 -&gt; 高级系统设置 -&gt; 环境变量 -&gt;  <strong>系统变量 (S)</strong></p>
<p>​	只有系统变量才是全局的。</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">新建	CLASSPATH	.;</span><br><span class="line">新建	JAVA_HOME	jdk路径</span><br><span class="line">修改	path		添加 %JAVA_HOME%\bin;</span><br><span class="line"></span><br><span class="line">测试	java -version</span><br><span class="line">	 javac -version	</span><br></pre></td></tr></table></figure></p>
<h4 id="maven环境配置"><a class="anchor" href="#maven环境配置">#</a> Maven 环境配置</h4>
<ol>
<li>解压 <code>apache-maven-3.3.9.rar</code>  到指定的目录。</li>
<li>修改配置文件（压缩包已修改过）。</li>
</ol>
<h4 id="git-工具"><a class="anchor" href="#git-工具">#</a> GIT 工具</h4>
<h5 id="1-配置用户信息"><a class="anchor" href="#1-配置用户信息">#</a> 1. 配置用户信息</h5>
<p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用户级</span></span><br><span class="line">git config --global user.name <span class="string">&quot;fairy&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;fairy@gmail.com&quot;</span></span><br><span class="line"><span class="comment"># 仓库级 local可以省略</span></span><br><span class="line">git config --<span class="built_in">local</span> user.name <span class="string">&quot;张华朋26190&quot;</span></span><br><span class="line">git config --<span class="built_in">local</span> user.email <span class="string">&quot;huapeng.zhang@going-link.com&quot;</span></span><br><span class="line"><span class="comment"># 使配置不生效</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> user.name</span><br></pre></td></tr></table></figure></p>
<h5 id="2-生成key"><a class="anchor" href="#2-生成key">#</a> 2. 生成 key</h5>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &#x27;email&#x27; // Email可选，会在key中生成你的邮箱信息  一直回车就行</span><br></pre></td></tr></table></figure></p>
<p>​	生成的 key 文件   <code>C:\Users\你的用户名\.ssh\id_rsa.pub</code></p>
<p>​	用文本编辑器打开，复制到 GIT 上。</p>
<h5 id="3-上传项目到git"><a class="anchor" href="#3-上传项目到git">#</a> 3. 上传项目到 GIT</h5>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd 项目文件加夹</span><br><span class="line">git init</span><br><span class="line">git remote add origin git@github.com:fairyeye/StudyJava.git</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;Initial commit&quot;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></p>
<h4 id="mysql-安装"><a class="anchor" href="#mysql-安装">#</a> MySQL 安装</h4>
<p>安装 <code>https://www.runoob.com/mysql/mysql-install.html</code></p>
<p>修改初始密码</p>
<p>MySQL 版本 5.7.6 版本以前用户可以使用如下命令：</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SET PASSWORD = PASSWORD(&#x27;your pwd&#x27;); </span><br></pre></td></tr></table></figure><br />
MySQL 版本 5.7.6 版本开始的用户可以使用如下命令：<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER USER USER() IDENTIFIED BY &#x27;your pwd&#x27;;</span><br></pre></td></tr></table></figure></p>
<p>登录报错  <code>https://www.cnblogs.com/lifan1998/p/9177731.html</code></p>
<h4 id="去图标"><a class="anchor" href="#去图标">#</a> 去图标</h4>
<p>​	管理员运行   <code>去图标.bat</code>  文件。</p>
<h4 id="谷歌访问助手"><a class="anchor" href="#谷歌访问助手">#</a> 谷歌访问助手</h4>
<p>​	谷歌浏览器 -&gt; 更多工具 -&gt; 扩展程序 -&gt; 开发者模式 (打开) 。</p>
<p>​	拖动  <code>谷歌访问助手.crx</code>  到谷歌浏览器中。</p>
<h4 id="软件安装清单"><a class="anchor" href="#软件安装清单">#</a> 软件安装清单</h4>
<ul>
<li>
<p>IDEA：</p>
</li>
<li>
<p>Chrome：</p>
</li>
<li>
<p>uTools：</p>
</li>
<li>
<p>Typora：</p>
</li>
<li>
<p>Another Redis Desktop Manager：很好看的 Redis 客户端</p>
</li>
<li>
<p>XShell：好看 好用</p>
</li>
<li>
<p>tabby-terminal：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0V1Z2VueS90YWJieS9yZWxlYXNlcy90YWcvdjEuMC4xNjQ=">https://github.com/Eugeny/tabby/releases/tag/v1.0.164</span></p>
</li>
<li>
<p>Shadowsocks：小飞机</p>
</li>
<li>
<p>Windows Termial:Windows 终端</p>
</li>
<li>
<ul>
<li>nvm: Windows 切换 node 版本</li>
</ul>
</li>
<li>
<p>n：Mac 切换 node 版本</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RqL24=">https://github.com/tj/n</span></li>
<li>npm install -g n</li>
</ul>
</li>
<li>
<p>pyenv：切换 python 版本</p>
<ul>
<li>Invoke-WebRequest -UseBasicParsing -Uri &quot;<span class="exturl" data-url="aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3B5ZW52LXdpbi9weWVudi13aW4vbWFzdGVyL3B5ZW52LXdpbi9pbnN0YWxsLXB5ZW52LXdpbi5wczE=">https://raw.githubusercontent.com/pyenv-win/pyenv-win/master/pyenv-win/install-pyenv-win.ps1</span>&quot; -OutFile &quot;./install-pyenv-win.ps1&quot;; &amp;&quot;./install-pyenv-win.ps1&quot;</li>
</ul>
</li>
<li>
<p>Redis 图形化页面： <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RpbnktY3JhZnQvdGlueS1yZG0vcmVsZWFzZXM=">Tiny RDM</span></p>
</li>
</ul>
<p>以下是如何在 Linux 或 macOS 上创建和使用虚拟环境的步骤：</p>
<ol>
<li>
<p>打开终端。</p>
</li>
<li>
<p>使用 <code>python3 -m venv path/to/venv</code>  命令创建一个新的虚拟环境，其中 <code>path/to/venv</code>  是你想要创建虚拟环境的目录。例如，你可以在家目录下创建一个名为 <code>myenv</code>  的虚拟环境，使用命令 <code>python3 -m venv ~/myenv</code> 。</p>
</li>
<li>
<p>激活虚拟环境。在 Linux 或 macOS 上，你可以使用以下命令激活虚拟环境：</p>
<p>复制</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source ~/myenv/bin/activate</span><br></pre></td></tr></table></figure></p>
<p>激活后，你的命令行提示符会改变，通常前面会加上虚拟环境的名字，比如 <code>(myenv)</code> 。</p>
</li>
<li>
<p>在虚拟环境中，你可以使用 <code>pip</code>  安装、升级或删除包，而不会影响到系统级别的 Python 环境。例如，你可以使用以下命令安装一个包：</p>
<p>复制</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install package-name</span><br></pre></td></tr></table></figure></p>
</li>
<li>
<p>当你完成工作后，你可以通过运行 <code>deactivate</code>  命令来停用虚拟环境。</p>
</li>
</ol>
<p>请注意，如果你的系统上没有安装 <code>python3</code> ，或者你的 Python 版本不同，你可能需要根据你的实际情况调整上述命令。如果你使用的是 Windows 系统，步骤会有所不同，通常你会使用 <code>path\to\venv\Scripts\activate</code>  来激活虚拟环境</p>
<h2 id="mac"><a class="anchor" href="#mac">#</a> Mac</h2>
<h3 id="终端"><a class="anchor" href="#终端">#</a> 终端：</h3>
<h5 id="oh-my-zsh"><a class="anchor" href="#oh-my-zsh">#</a> oh my zsh</h5>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://zhuanlan.zhihu.com/p/550022490</span><br><span class="line">https://blog.csdn.net/weixin_42326144/article/details/121957795</span><br></pre></td></tr></table></figure></p>
<h2 id="idea"><a class="anchor" href="#idea">#</a> IDEA</h2>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在 IntelliJ IDEA 中，要确保项目中的中文字符以 UTF-8 编码保存，可以按照以下步骤操作：</span><br><span class="line"></span><br><span class="line">1. **打开项目设置**：在 IntelliJ IDEA 中，点击菜单栏中的 &quot;File&quot; -&gt; &quot;Settings&quot;（或者直接使用快捷键 `Ctrl + Alt + S`）来打开项目设置。</span><br><span class="line">    </span><br><span class="line">2. **设置文件编码**：在设置窗口左侧的搜索框中输入 &quot;File Encoding&quot;，然后选择 &quot;File Encodings&quot; 选项。</span><br><span class="line">    </span><br><span class="line">3. **更改默认编码**：在右侧的界面中，找到 &quot;Global Encoding&quot; 下的 &quot;IDE Encoding&quot;，将其设置为 &quot;UTF-8&quot;。同样，也可以设置 &quot;Project Encoding&quot; 和 &quot;Default encoding for properties files&quot; 为 &quot;UTF-8&quot;。</span><br><span class="line">    </span><br><span class="line">4. **应用更改并重新加载项目**：点击 &quot;OK&quot; 按钮以应用更改，并可能需要重新加载项目以确保更改生效。</span><br><span class="line">    </span><br><span class="line">5. **保存文件为 UTF-8 编码**：对于现有的文件，可以通过以下方式将其保存为 UTF-8 编码：</span><br><span class="line">    </span><br><span class="line">    - 打开文件。</span><br><span class="line">    - 点击菜单栏中的 &quot;File&quot; -&gt; &quot;Save with Encoding...&quot;。</span><br><span class="line">    - 在弹出的对话框中，选择 &quot;UTF-8&quot; 编码，然后点击 &quot;OK&quot; 保存文件。</span><br><span class="line"></span><br><span class="line">通过以上步骤，您可以确保在 IntelliJ IDEA 中创建和编辑的所有文件都以 UTF-8 编码保存，包括中文字符。</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
  </entry>
  <entry>
    <title>Transactional注解</title>
    <url>/2023/06/05/%E4%BA%8B%E5%8A%A1%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>方法 A 中调用 B 后再调用 C, 三个方法中均有插入数据后再查询数据</p>
<p>B 方法的注解：@Transactional (propagation=Propagation.REQUIRES_NEW) -- 不管是否存在事务，都创建一个新的事务，原来的挂起，新的执行完毕，继续执行老的事务</p>
<p>C 方法的注解：@Transactional (propagation=Propagation.REQUIRED) -- 如果有事务，那么加入事务，没有的话新建一个</p>
<p>1、当方法 B 或者 C 报错时，A、B、C 方法都回滚</p>
<p>2、当方法 A、B、C 异常被捕获时，A、B、C 事务不回滚（a、b、c 均入库）</p>
<p>3、当方法 BC 执行后，方法 A 报错时，A、C 事务回滚，B 事务不回滚（b 数据入库）</p>
<p>A 方法向表中添加数据 a，在查询该表能得到数据 a</p>
<p>B 方法向表中添加数据 b，再查询该表能得到数据 b</p>
<p>C 方法向表中添加数据 c，再查询该表能得到数据 a，b，c</p>
<p>带有注解 @Transactional (propagation=Propagation.REQUIRES_NEW) 的方法走完之后，数据就会被提交入库</p>
<p>另外需要注意方法内部调用 @Transactional (propagation=Propagation.REQUIRES_NEW) 注解不生效，比如 A 和 B 都在同一个方法中，A 调用 B，B 方法是此注解，则不生效。同样，AOP 拦截也拦截不到 B</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public enum Propagation &#123;</span><br><span class="line">    REQUIRED(0),</span><br><span class="line">    SUPPORTS(1),</span><br><span class="line">    MANDATORY(2),</span><br><span class="line">    REQUIRES_NEW(3),</span><br><span class="line">    NOT_SUPPORTED(4),</span><br><span class="line">    NEVER(5),</span><br><span class="line">    NESTED(6);</span><br><span class="line"></span><br><span class="line">    private final int value;</span><br><span class="line"></span><br><span class="line">    private Propagation(int value) &#123;</span><br><span class="line">        this.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int value() &#123;</span><br><span class="line">        return this.value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>七种事物传播类型 默认为： <code>REQUIRED</code></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>Sql小技巧</title>
    <url>/2023/06/05/%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<p>MySQL 并不是跳过 offset 行，而是取 offset+N 行，然后返回放弃前 offset 行，返回 N 行。</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 反例（耗时129.570s）</span><br><span class="line">select * from task_result LIMIT 20000000, 10;</span><br><span class="line"></span><br><span class="line"># 正例（耗时5.114s）</span><br><span class="line">SELECT a.* FROM task_result a, (select id from task_result LIMIT 20000000, 10) b where a.id = b.id;</span><br><span class="line"></span><br><span class="line"># 说明</span><br><span class="line">task_result表为生产环境的一个表，总数据量为3400万，id为主键，偏移量达到2000万</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h3 id="获取一条数据时的limit-1"><a class="anchor" href="#获取一条数据时的limit-1">#</a> 获取一条数据时的 Limit 1</h3>
<p>在很多情况下我们已知数据仅存在一条，此时我们应该告知数据库只用查一条，否则将会转化为全表扫描</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 反例（耗时2424.612s）</span><br><span class="line">select * from task_result where unique_key = &#x27;ebbf420b65d95573db7669f21fa3be3e_861414030800727_48&#x27;;</span><br><span class="line"></span><br><span class="line"># 正例（耗时1.036s）</span><br><span class="line">select * from task_result where unique_key = &#x27;ebbf420b65d95573db7669f21fa3be3e_861414030800727_48&#x27; LIMIT 1;</span><br><span class="line"></span><br><span class="line"># 说明</span><br><span class="line">task_result表为生产环境的一个表，总数据量为3400万，where条件非索引字段，数据所在行为第19486条记录</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h3 id="批量插入"><a class="anchor" href="#批量插入">#</a> 批量插入</h3>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 反例</span><br><span class="line">INSERT into person(name,age) values(&#x27;A&#x27;,24)</span><br><span class="line">INSERT into person(name,age) values(&#x27;B&#x27;,24)</span><br><span class="line">INSERT into person(name,age) values(&#x27;C&#x27;,24)</span><br><span class="line"></span><br><span class="line"># 正例</span><br><span class="line">INSERT into person(name,age) values(&#x27;A&#x27;,24),(&#x27;B&#x27;,24),(&#x27;C&#x27;,24);</span><br><span class="line"></span><br><span class="line"># 说明</span><br><span class="line">比较常规，就不多做说明了</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZWExNmRlZGU1MWQ0NTQ3MGI0ZmZjNWI/dXRtX3NvdXJjZT1nb2xkX2Jyb3dzZXJfZXh0ZW5zaW9u">https://juejin.im/post/5ea16dede51d45470b4ffc5b?utm_source=gold_browser_extension</span></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/2023/06/05/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="1-最简单的单例模式"><a class="anchor" href="#1-最简单的单例模式">#</a> 1. 最简单的单例模式：</h4>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.example.demo.JUC.thread;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author huapeng.zhang</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @date 2020/9/17 18:28</span><br><span class="line"> */</span><br><span class="line">public class SingletomDemo &#123;</span><br><span class="line"></span><br><span class="line">    private static SingletomDemo singletomDemo = null;</span><br><span class="line">    </span><br><span class="line">    private SingletomDemo() &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + &quot;\t 我是构造方法SingletomDemo()！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static SingletomDemo getInstance() &#123;</span><br><span class="line">        if (singletomDemo == null) &#123;</span><br><span class="line">        		singletomDemo = new SingletomDemo();</span><br><span class="line">        &#125;</span><br><span class="line">        return singletomDemo;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 单线程</span><br><span class="line">        System.out.println(SingletomDemo.getInstance() == SingletomDemo.getInstance());</span><br><span class="line">        System.out.println(SingletomDemo.getInstance() == SingletomDemo.getInstance());</span><br><span class="line">        System.out.println(SingletomDemo.getInstance() == SingletomDemo.getInstance());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>在单线程的情况下，打印结果如下：</p>
<p><img data-src="https://i.loli.net/2020/09/17/J9rb5oynQclfD4d.png" alt="image-20200917191550283" /></p>
<p>可以看到，虽然我们一共调用了六次 <code>getInstance()</code> ， 但是只打印了一次构造方法输出内容，也就是只调用了一个构造函数，所获得的对象地址自然是一样的。</p>
<h4 id="2-多线程下的单例模式"><a class="anchor" href="#2-多线程下的单例模式">#</a> 2. 多线程下的单例模式</h4>
<p>我们对 <code>main()</code>  方法做一下改造，改造后的代码如下：</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    // 改为多线程后 可能多次调用构造函数</span><br><span class="line">    for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">        new Thread(() -&gt; &#123;</span><br><span class="line">            SingletomDemo.getInstance();</span><br><span class="line">        &#125;, String.valueOf(i)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>打印结果为：</p>
<p><img data-src="https://i.loli.net/2020/09/17/Q7RWYjayOgoXfH1.png" alt="image-20200917192220270" /></p>
<p>多次执行下可以看到打印的次数是不同的。</p>
<p>可以对 <code>getInstance()</code>  方法添加 <code>synchronized</code>  加锁，保证只生成一个实例。</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private static synchronized SingletomDemo getInstance() &#123;</span><br><span class="line">    if (singletomDemo == null) &#123;</span><br><span class="line">    		singletomDemo = new SingletomDemo();</span><br><span class="line">    &#125;</span><br><span class="line">    return singletomDemo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>再次执行程序发现只打印了一次构造方法输出函数，还有另外一种方法就是 <code>DCL：double check locks双端检测模式</code> 模式也可以达到同样的目的。</p>
<h4 id="3dcl-单例模式"><a class="anchor" href="#3dcl-单例模式">#</a> 3.DCL + 单例模式</h4>
<p>我们再次对 <code>getInstance()</code>  方法进行改造，代码如下：</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// DCL模式(double check locks双端检测模式)</span><br><span class="line">private static SingletomDemo getInstance() &#123;</span><br><span class="line">    if (singletomDemo == null) &#123;</span><br><span class="line">        synchronized (SingletomDemo.class) &#123;</span><br><span class="line">            if (singletomDemo == null) &#123;</span><br><span class="line">                singletomDemo = new SingletomDemo();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return singletomDemo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当我们的单例模式写到这种程度的时候，基本可以应对 99% 的情况，但是由于 <code>指令排序</code> 的存在，还是有可能会出现问题。</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">memory = allocate(); //1.分配对象内存空间</span><br><span class="line">instance(memory);    //2.初始化对象</span><br><span class="line">instance = memory;   //3.设置instance指向刚分配的内存地址，此时instance!=null</span><br></pre></td></tr></table></figure></p>
<p>步骤 2、3 不存在数据依赖，所以由于指令重排的关系，可能会出现：</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">memory = allocate(); //1.分配对象内存空间</span><br><span class="line">instance = memory;   //3.设置instance指向刚分配的内存地址，此时instance!=null</span><br><span class="line">instance(memory);    //2.初始化对象</span><br></pre></td></tr></table></figure></p>
<h4 id="4volatile-单例模式"><a class="anchor" href="#4volatile-单例模式">#</a> 4.Volatile + 单例模式</h4>
<p>我们在声明  <code>singletomDemo</code>  时，加上 <code>Volatile</code>  关键字修饰，就可以达到完美的效果。</p>
<p>最终代码：</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.example.demo.JUC.thread;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author huapeng.zhang</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @date 2020/9/17 18:28</span><br><span class="line"> */</span><br><span class="line">public class SingletomDemo &#123;</span><br><span class="line"></span><br><span class="line">    private static volatile SingletomDemo singletomDemo = null;</span><br><span class="line"></span><br><span class="line">    private SingletomDemo() &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + &quot;\t 我是构造方法SingletomDemo()！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // DCL模式(double check locks双端检测模式)</span><br><span class="line">    private static SingletomDemo getInstance() &#123;</span><br><span class="line">        if (singletomDemo == null) &#123;</span><br><span class="line">            synchronized (SingletomDemo.class) &#123;</span><br><span class="line">                if (singletomDemo == null) &#123;</span><br><span class="line">                    singletomDemo = new SingletomDemo();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return singletomDemo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 单线程</span><br><span class="line">//        System.out.println(SingletomDemo.getInstance() == SingletomDemo.getInstance());</span><br><span class="line">//        System.out.println(SingletomDemo.getInstance() == SingletomDemo.getInstance());</span><br><span class="line">//        System.out.println(SingletomDemo.getInstance() == SingletomDemo.getInstance());</span><br><span class="line"></span><br><span class="line">//         改为多线程后 可能多次调用构造函数</span><br><span class="line">//         可以在 getInstance上加SYNC解决问题</span><br><span class="line">        for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">            new Thread(() -&gt; &#123;</span><br><span class="line">                SingletomDemo.getInstance();</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>demo</tag>
      </tags>
  </entry>
  <entry>
    <title>反射</title>
    <url>/2023/06/05/%E5%8F%8D%E5%B0%84%E8%8E%B7%E5%8F%96%E7%88%B6%E7%B1%BB%E5%AD%97%E6%AE%B5/</url>
    <content><![CDATA[<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; superclass = itfBaseBO.getClass();</span><br><span class="line"><span class="keyword">while</span> (!superclass.getName().equals(ExpandDomain.class.getName())) &#123;</span><br><span class="line">    superclass = superclass.getSuperclass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>demo</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL查询</title>
    <url>/2023/06/05/%E5%90%8C%E6%AD%A5%E4%B8%8D%E5%90%8C%E6%9C%8D%E5%8A%A1%E7%9A%84MySQL%E6%95%B0%E6%8D%AE%E8%A1%A8/</url>
    <content><![CDATA[<h4 id="1-首先要保证本地的mysql服务支持federated引擎"><a class="anchor" href="#1-首先要保证本地的mysql服务支持federated引擎">#</a> 1. 首先要保证本地的 MySQL 服务支持 FEDERATED 引擎。</h4>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：SHOW ENGINES;</span><br><span class="line">如下 FEDERATED 行的Support为YES则表示开启了FEDERATED。</span><br><span class="line">如果为 NO 则表示未开启。</span><br><span class="line"></span><br><span class="line">如果 FEDERATED 没有开启的话 要启用。</span><br></pre></td></tr></table></figure></p>
<p><img data-src="https://i.loli.net/2020/10/22/7a8G6nUXbLM24wl.png" alt="" /></p>
<h4 id="2启用-federated"><a class="anchor" href="#2启用-federated">#</a> 2. 启用 FEDERATED</h4>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在MySQL的配置文件</span><br><span class="line">安装目录下的my.ini或my.cnf </span><br><span class="line">加上 一行  `FEDERATED`</span><br></pre></td></tr></table></figure></p>
<p><img data-src="https://i.loli.net/2020/10/22/HhLBosuOdeNDbgQ.png" alt="" /></p>
<h4 id="3建表"><a class="anchor" href="#3建表">#</a> 3. 建表</h4>
<p><strong>建表一般应的是 InnoDB 引擎，这里需要修改一下 改为</strong>  <code>ENGINE=FEDERATED</code></p>
<p>从原表导出表结构 SQL，然后修改  <code>ENGINE = InnoDB</code> -&gt; <code>ENGINE=FEDERATED CONNECTION='mysql://用户名:密码@IP:PORT/库名/表名'</code></p>
<p>然后打开这张表，可以看到远程表里的数据已经同步到了这张表。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>utils</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建SSR服务器</title>
    <url>/2022/12/07/%E6%90%AD%E5%BB%BASSR%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install git </span><br><span class="line">报错：Temporary failure resolving &#x27;archive.ubuntu.com</span><br><span class="line">具体如下：</span><br><span class="line"></span><br><span class="line">Ign:1 http://archive.ubuntu.com/ubuntu xenial/main i386 liberror-perl all 0.17-1.2</span><br><span class="line">Ign:2 http://archive.ubuntu.com/ubuntu xenial/main i386 git-man all 1:2.7.4-0ubuntu1</span><br><span class="line">Err:3 http://archive.ubuntu.com/ubuntu xenial/main amd64 git amd64 1:2.7.4-0ubuntu1</span><br><span class="line">  Temporary failure resolving &#x27;archive.ubuntu.com&#x27;</span><br><span class="line">Err:1 http://archive.ubuntu.com/ubuntu xenial/main i386 liberror-perl all 0.17-1.2</span><br><span class="line">  Temporary failure resolving &#x27;archive.ubuntu.com&#x27;</span><br><span class="line">Err:2 http://archive.ubuntu.com/ubuntu xenial/main i386 git-man all 1:2.7.4-0ubuntu1</span><br><span class="line">  Temporary failure resolving &#x27;archive.ubuntu.com&#x27;</span><br><span class="line">E: Failed to fetch http://archive.ubuntu.com/ubuntu/pool/main/libe/liberror-perl/liberror-perl_0.17-1.2_all.deb  Temporary failure resolving &#x27;archive.ubuntu.com&#x27;</span><br><span class="line"></span><br><span class="line">E: Failed to fetch http://archive.ubuntu.com/ubuntu/pool/main/g/git/git-man_2.7.4-0ubuntu1_all.deb  Temporary failure resolving &#x27;archive.ubuntu.com&#x27;</span><br><span class="line"></span><br><span class="line">E: Failed to fetch http://archive.ubuntu.com/ubuntu/pool/main/g/git/git_2.7.4-0ubuntu1_amd64.deb  Temporary failure resolving &#x27;archive.ubuntu.com&#x27;</span><br><span class="line"></span><br><span class="line">E: Unable to fetch some archives, maybe run apt-get update or try with --fix-missing?</span><br><span class="line">root@132157:~# apt-get update</span><br><span class="line">Err:1 http://security.ubuntu.com/ubuntu xenial-security InRelease</span><br><span class="line">  Temporary failure resolving &#x27;security.ubuntu.com&#x27;</span><br><span class="line">Err:2 http://archive.ubuntu.com/ubuntu xenial InRelease</span><br><span class="line">  Temporary failure resolving &#x27;archive.ubuntu.com&#x27;</span><br><span class="line">Err:3 http://archive.ubuntu.com/ubuntu xenial-updates InRelease</span><br><span class="line">  Temporary failure resolving &#x27;archive.ubuntu.com&#x27;</span><br><span class="line">Err:4 http://archive.ubuntu.com/ubuntu xenial-backports InRelease</span><br><span class="line">  Temporary failure resolving &#x27;archive.ubuntu.com&#x27;</span><br><span class="line">Reading package lists... Done</span><br><span class="line">W: Failed to fetch http://archive.ubuntu.com/ubuntu/dists/xenial/InRelease  Temporary failure resolving &#x27;archive.ubuntu.com&#x27;</span><br><span class="line">W: Failed to fetch http://archive.ubuntu.com/ubuntu/dists/xenial-updates/InRelease  Temporary failure resolving &#x27;archive.ubuntu.com&#x27;</span><br><span class="line">W: Failed to fetch http://archive.ubuntu.com/ubuntu/dists/xenial-backports/InRelease  Temporary failure resolving &#x27;archive.ubuntu.com&#x27;</span><br><span class="line">W: Failed to fetch http://security.ubuntu.com/ubuntu/dists/xenial-security/InRelease  Temporary failure resolving &#x27;security.ubuntu.com&#x27;</span><br><span class="line">W: Some index files failed to download. They have been ignored, or old ones used instead.</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p><code>原因是DNS未配置</code></p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/resolv.conf</span><br><span class="line"></span><br><span class="line">+ nameserver 202.96.134.133</span><br><span class="line">+ nameserver 8.8.8.8</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>others</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库时间存储</title>
    <url>/2020/04/29/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%97%B6%E9%97%B4%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<h1 id="数据库如何存储时间你真的知道吗"><a class="anchor" href="#数据库如何存储时间你真的知道吗">#</a> 数据库如何存储时间？你真的知道吗？</h1>
<p>我们平时开发中不可避免的就是要存储时间，比如我们要记录操作表中这条记录的时间、记录转账的交易时间、记录出发时间等等。你会发现这个时间这个东西与我们开发的联系还是非常紧密的，用的好与不好会给我们的业务甚至功能带来很大的影响。所以，我们有必要重新出发，好好认识一下这个东西。</p>
<p>这是一篇短小精悍的文章，仔细阅读一定能学到不少东西！</p>
<h3 id="1切记不要用字符串存储日期"><a class="anchor" href="#1切记不要用字符串存储日期">#</a> 1. 切记不要用字符串存储日期</h3>
<p>我记得我在大学的时候就这样干过，而且现在很多对数据库不太了解的新手也会这样干，可见，这种存储日期的方式的优点还是有的，就是简单直白，容易上手。</p>
<p>但是，这是不正确的做法，主要会有下面两个问题：</p>
<ol>
<li>字符串占用的空间更大！</li>
<li>字符串存储的日期比较效率比较低（逐个字符进行比对），无法用日期相关的 API 进行计算和比较。</li>
</ol>
<h3 id="2datetime-和-timestamp-之间抉择"><a class="anchor" href="#2datetime-和-timestamp-之间抉择">#</a> 2.Datetime 和 Timestamp 之间抉择</h3>
<p>Datetime 和 Timestamp 是 MySQL 提供的两种比较相似的保存时间的数据类型。他们两者究竟该如何选择呢？</p>
<p><strong>通常我们都会首选 Timestamp。</strong> 下面说一下为什么这样做！</p>
<h4 id="21-datetime-类型没有时区信息的"><a class="anchor" href="#21-datetime-类型没有时区信息的">#</a> 2.1 DateTime 类型没有时区信息的</h4>
<p><strong>DateTime 类型是没有时区信息的（时区无关）</strong> ，DateTime 类型保存的时间都是当前会话所设置的时区对应的时间。这样就会有什么问题呢？当你的时区更换之后，比如你的服务器更换地址或者更换客户端连接时区设置的话，就会导致你从数据库中读出的时间错误。不要小看这个问题，很多系统就是因为这个问题闹出了很多笑话。</p>
<p><strong>Timestamp 和时区有关</strong>。Timestamp 类型字段的值会随着服务器时区的变化而变化，自动换算成相应的时间，说简单点就是在不同时区，查询到同一个条记录此字段的值会不一样。</p>
<p>下面实际演示一下！</p>
<p>建表 SQL 语句：</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `time_zone_test` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `date_time` datetime DEFAULT NULL,</span><br><span class="line">  `time_stamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure></p>
<p>插入数据：</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO time_zone_test(date_time,time_stamp) VALUES(NOW(),NOW());</span><br></pre></td></tr></table></figure></p>
<p>查看数据：</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select date_time,time_stamp from time_zone_test;</span><br></pre></td></tr></table></figure></p>
<p>结果：</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+---------------------+---------------------+</span><br><span class="line">| date_time           | time_stamp          |</span><br><span class="line">+---------------------+---------------------+</span><br><span class="line">| 2020-01-11 09:53:32 | 2020-01-11 09:53:32 |</span><br><span class="line">+---------------------+---------------------+</span><br></pre></td></tr></table></figure></p>
<p>现在我们运行</p>
<p>修改当前会话的时区:</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set time_zone=&#x27;+8:00&#x27;;</span><br></pre></td></tr></table></figure></p>
<p>再次查看数据：</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+---------------------+---------------------+</span><br><span class="line">| date_time           | time_stamp          |</span><br><span class="line">+---------------------+---------------------+</span><br><span class="line">| 2020-01-11 09:53:32 | 2020-01-11 17:53:32 |</span><br><span class="line">+---------------------+---------------------+</span><br></pre></td></tr></table></figure></p>
<p><strong>扩展：一些关于 MySQL 时区设置的一个常用 sql 命令</strong></p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看当前会话时区</span><br><span class="line">SELECT @@session.time_zone;</span><br><span class="line"># 设置当前会话时区</span><br><span class="line">SET time_zone = &#x27;Europe/Helsinki&#x27;;</span><br><span class="line">SET time_zone = &quot;+00:00&quot;;</span><br><span class="line"># 数据库全局时区设置</span><br><span class="line">SELECT @@global.time_zone;</span><br><span class="line"># 设置全局时区</span><br><span class="line">SET GLOBAL time_zone = &#x27;+8:00&#x27;;</span><br><span class="line">SET GLOBAL time_zone = &#x27;Europe/Helsinki&#x27;;</span><br></pre></td></tr></table></figure></p>
<h4 id="22-datetime-类型耗费空间更大"><a class="anchor" href="#22-datetime-类型耗费空间更大">#</a> 2.2 DateTime 类型耗费空间更大</h4>
<p>Timestamp 只需要使用 4 个字节的存储空间，但是 DateTime 需要耗费 8 个字节的存储空间。但是，这样同样造成了一个问题，Timestamp 表示的时间范围更小。</p>
<ul>
<li>DateTime ：1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</li>
<li>Timestamp： 1970-01-01 00:00:01 ~ 2037-12-31 23:59:59</li>
</ul>
<blockquote>
<p>Timestamp 在不同版本的 MySQL 中有细微差别。</p>
</blockquote>
<h3 id="3-再看-mysql-日期类型存储空间"><a class="anchor" href="#3-再看-mysql-日期类型存储空间">#</a> 3 再看 MySQL 日期类型存储空间</h3>
<p>下图是 MySQL 5.6 版本中日期类型所占的存储空间：</p>
<p><img data-src="https://user-gold-cdn.xitu.io/2020/1/14/16fa26644507d5f4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img" /></p>
<p>可以看出 5.6.4 之后的 MySQL 多出了一个需要 0 ～ 3 字节的小数位。Datatime 和 Timestamp 会有几种不同的存储空间占用。</p>
<p>为了方便，本文我们还是默认 Timestamp 只需要使用 4 个字节的存储空间，但是 DateTime 需要耗费 8 个字节的存储空间。</p>
<h3 id="4数值型时间戳是更好的选择吗"><a class="anchor" href="#4数值型时间戳是更好的选择吗">#</a> 4. 数值型时间戳是更好的选择吗？</h3>
<p>很多时候，我们也会使用 int 或者 bigint 类型的数值也就是时间戳来表示时间。</p>
<p>这种存储方式的具有 Timestamp 类型的所具有一些优点，并且使用它的进行日期排序以及对比等操作的效率会更高，跨系统也很方便，毕竟只是存放的数值。缺点也很明显，就是数据的可读性太差了，你无法直观的看到具体时间。</p>
<p>时间戳的定义如下：</p>
<blockquote>
<p>时间戳的定义是从一个基准时间开始算起，这个基准时间是「1970-1-1 00:00:00 +0:00」，从这个时间开始，用整数表示，以秒计时，随着时间的流逝这个时间整数不断增加。这样一来，我只需要一个数值，就可以完美地表示时间了，而且这个数值是一个绝对数值，即无论的身处地球的任何角落，这个表示时间的时间戳，都是一样的，生成的数值都是一样的，并且没有时区的概念，所以在系统的中时间的传输中，都不需要进行额外的转换了，只有在显示给用户的时候，才转换为字符串格式的本地时间。</p>
</blockquote>
<p>数据库中实际操作：</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select UNIX_TIMESTAMP(&#x27;2020-01-11 09:53:32&#x27;);</span><br><span class="line">+---------------------------------------+</span><br><span class="line">| UNIX_TIMESTAMP(&#x27;2020-01-11 09:53:32&#x27;) |</span><br><span class="line">+---------------------------------------+</span><br><span class="line">|                            1578707612 |</span><br><span class="line">+---------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select FROM_UNIXTIME(1578707612);</span><br><span class="line">+---------------------------+</span><br><span class="line">| FROM_UNIXTIME(1578707612) |</span><br><span class="line">+---------------------------+</span><br><span class="line">| 2020-01-11 09:53:32       |</span><br><span class="line">+---------------------------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure></p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">转载：https://juejin.im/post/5e1d494a5188254c45778a14</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>dairy</tag>
      </tags>
  </entry>
  <entry>
    <title>时间戳转换日期问题</title>
    <url>/2020/04/17/%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E6%8D%A2%E6%97%A5%E6%9C%9F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h4 id="基础依赖"><a class="anchor" href="#基础依赖">#</a> 基础依赖</h4>
<p>后来发现是我拿到的时间戳是以 秒 为单位的，而转换时需要的是 毫秒。</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1579676844</span>); <span class="comment">// 1970-01-19T14:47:56.844+0800</span></span><br></pre></td></tr></table></figure></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1579676844</span> * <span class="number">1000L</span>); <span class="comment">// 2020-01-22T15:07:24.000+0800</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>basic</tag>
      </tags>
  </entry>
  <entry>
    <title>算法</title>
    <url>/2023/02/13/%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h4 id="lfu最不经常使用缓存"><a class="anchor" href="#lfu最不经常使用缓存">#</a> LFU (最不经常使用缓存)</h4>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">public class LFUCache&lt;K, V&gt; &#123;</span><br><span class="line">    private final int capacity;</span><br><span class="line">    private Map&lt;K, V&gt; cache;</span><br><span class="line">    private Map&lt;K, Integer&gt; freqMap;</span><br><span class="line">    private Map&lt;Integer, LinkedHashSet&lt;K&gt;&gt; freqKeysMap;</span><br><span class="line">    private int minFreq;</span><br><span class="line"></span><br><span class="line">    public LFUCache(int capacity) &#123;</span><br><span class="line">        this.capacity = capacity;</span><br><span class="line">        cache = new HashMap&lt;&gt;();</span><br><span class="line">        freqMap = new HashMap&lt;&gt;();</span><br><span class="line">        freqKeysMap = new HashMap&lt;&gt;();</span><br><span class="line">        minFreq = 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public V get(K key) &#123;</span><br><span class="line">        if (!cache.containsKey(key)) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        int freq = freqMap.get(key);</span><br><span class="line">        freqMap.put(key, freq + 1);</span><br><span class="line">        freqKeysMap.get(freq).remove(key);</span><br><span class="line">        if (freq == minFreq &amp;&amp; freqKeysMap.get(freq).size() == 0) &#123;</span><br><span class="line">            minFreq++;</span><br><span class="line">        &#125;</span><br><span class="line">        if (!freqKeysMap.containsKey(freq + 1)) &#123;</span><br><span class="line">            freqKeysMap.put(freq + 1, new LinkedHashSet&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        freqKeysMap.get(freq + 1).add(key);</span><br><span class="line">        return cache.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void put(K key, V value) &#123;</span><br><span class="line">        if (capacity &lt;= 0) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        if (cache.containsKey(key)) &#123;</span><br><span class="line">            cache.put(key, value);</span><br><span class="line">            get(key);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        if (cache.size() &gt;= capacity) &#123;</span><br><span class="line">            K evictKey = freqKeysMap.get(minFreq).iterator().next();</span><br><span class="line">            freqKeysMap.get(minFreq).remove(evictKey);</span><br><span class="line">            cache.remove(evictKey);</span><br><span class="line">            freqMap.remove(evictKey);</span><br><span class="line">        &#125;</span><br><span class="line">        cache.put(key, value);</span><br><span class="line">        freqMap.put(key, 1);</span><br><span class="line">        minFreq = 1;</span><br><span class="line">        if (!freqKeysMap.containsKey(1)) &#123;</span><br><span class="line">            freqKeysMap.put(1, new LinkedHashSet&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        freqKeysMap.get(1).add(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br />
LFU 缓存在处理缓存置换的时候会考虑到访问频率的因素。如果缓存空间已满，那么就要淘汰掉一些数据，以腾出空间存放新的数据。常见的淘汰算法有：先进先出（First In First Out，FIFO）、最近最少使用（Least Recently Used，LRU）和最不经常使用（Least Frequently Used，LFU）等。</p>
<p>这里我们实现了一个 LFU Cache，使用三个 Map 来存储缓存数据，缓存键的访问频率，以及不同访问频率下对应的缓存键集合。具体实现中，我们使用一个 minFreq 变量来记录当前最小访问频率，并在每次访问或插入数据时更新 minFreq。当缓存空间已满时，我们根据 minFreq 和缓存键集合中的顺序来选择要淘汰的数据。</p>
<p>该实现中，get 和 put 操作的时间复杂度均为 O (1)。如果需要支持高并发操作，可以在实现中加入线程安全机制。</p>
]]></content>
      <tags>
        <tag>dairy</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式笔记</title>
    <url>/2020/04/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>设计模式遵循六⼤原则；单⼀职责 (⼀个类和⽅法只做⼀件事)、⾥⽒替换 ( 多态，⼦类可扩展⽗类 )、依赖 倒置 ( 细节依赖抽象，下层依赖上层 )、接⼝隔离 ( 建⽴单⼀接⼝ )、迪⽶特原则 ( 最少知道，降低耦合 )、开闭 原则 ( 抽象架构，扩展实现 ）。</p>
<h2 id="1-工厂模式"><a class="anchor" href="#1-工厂模式">#</a> 1. 工厂模式</h2>
<p>举个例子：</p>
<p>吃：南方人爱吃饭，北方人爱吃面</p>
<p>定义一个接口：吃</p>
<p>定义两个实现类继承吃：饭、面</p>
<p>定义一个工厂：饭店</p>
<p>饭店通过判断是南方人还是北方人返回不同的实现类，从而让不同的人吃到了不同的饭</p>
<h2 id="2抽象工厂模式"><a class="anchor" href="#2抽象工厂模式">#</a> 2. 抽象工厂模式</h2>
<h2 id="3建造者模式"><a class="anchor" href="#3建造者模式">#</a> 3. 建造者模式</h2>
<p>实体类的 <code>setXxx()</code>  方法，一般是返回 <code>void</code> ，可以改造为：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ObjectX <span class="title function_">setXxx</span><span class="params">(String xx)</span> &#123;</span><br><span class="line">	<span class="built_in">this</span>.xxx = xx</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="4-原型模式"><a class="anchor" href="#4-原型模式">#</a> 4. 原型模式</h2>
<p>考卷题目和答案乱序。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>阿里巴巴手册</title>
    <url>/2020/04/20/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<p><img data-src="https://i.loli.net/2020/07/16/ZXJmPqvfo2W6U9p.png" alt="" /></p>
]]></content>
  </entry>
  <entry>
    <title>需要掌握以下知识</title>
    <url>/2023/06/05/%E9%9C%80%E8%A6%81%E6%8E%8C%E6%8F%A1%E4%BB%A5%E4%B8%8B%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<ol>
<li>
<p>导入数据<br />
<img data-src="https://s3.bmp.ovh/imgs/2023/01/18/7595fe99b5f3116a.png" alt="" /></p>
</li>
<li>
<p>匹配规则<br />
<img data-src="https://s3.bmp.ovh/imgs/2023/01/18/0cb7d29296c95699.png" alt="" /><br />
 3. 生成报告和数据<br />
<img data-src="https://s3.bmp.ovh/imgs/2023/01/18/9f9bd4684069b961.png" alt="" /></p>
</li>
</ol>
<p>作为一名三年经验的 Java 开发人员，你需要掌握以下知识：</p>
<ol>
<li>
<p>Java 基础知识：掌握 Java 的基本语法、面向对象编程、常用数据结构和算法等，能够熟练使用 Java 语言进行开发。</p>
</li>
<li>
<p>Java Web 开发框架：熟悉 Spring、SpringMVC 和 MyBatis 等主流的 Java Web 开发框架，能够使用这些框架进行 Web 应用程序的开发。</p>
</li>
<li>
<p>数据库知识：熟悉关系型数据库和 NoSQL 数据库的使用，掌握 SQL 语言和数据库设计的基本知识。</p>
</li>
<li>
<p>Web 前端技术：熟悉 HTML、CSS、JavaScript、jQuery 等前端开发技术，能够与前端开发人员协同工作，完成 Web 应用程序的前后端分离开发。</p>
</li>
<li>
<p>网络编程知识：熟悉 TCP/IP 协议、HTTP 协议等网络编程相关的知识，能够使用 Java 进行网络编程开发。</p>
</li>
<li>
<p>分布式系统开发：了解分布式系统的基本概念和原理，熟悉 Spring Cloud、Dubbo 等分布式系统开发框架，能够进行分布式系统的设计和开发。</p>
</li>
<li>
<p>微服务架构：了解微服务架构的基本概念和原理，熟悉 Spring Boot、Spring Cloud 等微服务开发框架，能够进行微服务的设计和开发。</p>
</li>
<li>
<p>工具和技术：掌握 Maven、Git、Jenkins 等常用的工具和技术，能够进行代码管理、构建和部署。</p>
</li>
<li>
<p>技术栈扩展：根据自身的兴趣和职业发展需求，了解其他的 Java 技术栈，例如大数据处理、人工智能、区块链等，不断扩展自己的技术领域。</p>
</li>
</ol>
<p>除了以上技术知识，你还需要具备良好的团队协作能力、学习能力和解决问题的能力，能够快速适应不同的项目需求和开发环境，不断提升自己的技术水平和职业素养。</p>
<p><img data-src="https://s3.bmp.ovh/imgs/2023/09/18/2deefcad5a554594.png" alt="" /></p>
<p><img data-src="https://s3.bmp.ovh/imgs/2023/09/18/8b2889661b1c45e0.png" alt="" /></p>
]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac使用记录</title>
    <url>/2023/10/25/Mac%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="软件"><a class="anchor" href="#软件">#</a> 软件</h2>
<h3 id="ttygif"><a class="anchor" href="#ttygif">#</a> ttygif</h3>
<ul>
<li>终端录制工具</li>
</ul>
<h4 id="安装教程"><a class="anchor" href="#安装教程">#</a> 安装教程</h4>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install ttygif</span><br></pre></td></tr></table></figure></p>
<h4 id="使用"><a class="anchor" href="#使用">#</a> 使用</h4>
<p><figure class="highlight bash"><figcaption><span>命令行提示符 command:("[root@localhost] $":1,9-10||"[admin@remotehost] #":4-6)</span></figcaption><table><tr><td class="code"><pre><span class="line">ttyrec myrecording</span><br></pre></td></tr></table></figure></p>
<h3 id="sshx"><a class="anchor" href="#sshx">#</a> sshx</h3>
<ul>
<li>终端共享</li>
</ul>
<h4 id="使用-2"><a class="anchor" href="#使用-2">#</a> 使用</h4>
<p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">zhanghuapengdeMacBook-Pro :: Downloads/work_space/AA % sshx</span><br><span class="line"></span><br><span class="line">  sshx v0.2.1</span><br><span class="line"></span><br><span class="line">  ➜  Link:  https://sshx.io/s/ZtVval8VO2<span class="comment">#e9o4sruIiflVdh</span></span><br><span class="line">  ➜  Shell: /bin/zsh</span><br></pre></td></tr></table></figure></p>
<h2 id="flutter"><a class="anchor" href="#flutter">#</a> Flutter</h2>
<h4 id="环境安装"><a class="anchor" href="#环境安装">#</a> 环境安装：</h4>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmZsdXR0ZXIuZGV2L2dldC1zdGFydGVkL2luc3RhbGwvbWFjb3M=">官方说明</span></p>
<h2 id="环境"><a class="anchor" href="#环境">#</a> 环境</h2>
<p>python 环境</p>
<p>虚拟环境：~/</p>
<p>DP:DrissionPage</p>
<h2 id="lua"><a class="anchor" href="#lua">#</a> LUA</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvQWc1RTZEODFkaUU2TS11ZWhXbG9KUQ==">lua+redis 限流</span></p>
<h2 id="cargo"><a class="anchor" href="#cargo">#</a> Cargo</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2MucnVzdC1sYW5nLm9yZy9jYXJnby9nZXR0aW5nLXN0YXJ0ZWQvaW5zdGFsbGF0aW9uLmh0bWw=">install cargo</span></p>
<h2 id="破解软件打不开"><a class="anchor" href="#破解软件打不开">#</a> 破解软件打不开</h2>
<p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这个好像没生效</span></span><br><span class="line">Mac :: ~ % sudo spctl --global-disable</span><br><span class="line">Password:</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将软件拖进来</span></span><br><span class="line">Mac :: ~ % sudo xattr -r -c /Applications/Navicat\ Premium.app</span><br></pre></td></tr></table></figure></p>
<h2 id="jrebel-激活"><a class="anchor" href="#jrebel-激活">#</a> Jrebel 激活</h2>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull qierkang/golang-reverseproxy</span><br><span class="line">docker run -d -p 8888:8888 qierkang/golang-reverseproxy</span><br><span class="line"></span><br><span class="line">#licene</span><br><span class="line">http://127.0.0.1:8888/7a14c9f7-8a27-46d6-bb50-2b30c19e766c</span><br></pre></td></tr></table></figure></p>
<h3 id="一行命令下载全网视频"><a class="anchor" href="#一行命令下载全网视频">#</a> 一行命令下载全网视频</h3>
<p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ pip3 install you-get</span><br></pre></td></tr></table></figure><br />
<strong> 如何下载</strong></p>
<p><em><strong>1.</strong></em> 可通过如下命令查看该视频的详细信息。<br />
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">you-get -i <span class="string">&#x27;视频url&#x27;</span></span><br></pre></td></tr></table></figure><br />
<em><strong>2.</strong></em> 下载方式更简单，只需一行命令即可下载了：</p>
<p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">you-get <span class="string">&#x27;视频url&#x27;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="jan-将人工智能带入您的桌面"><a class="anchor" href="#jan-将人工智能带入您的桌面">#</a> Jan - 将人工智能带入您的桌面</h3>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## Sonoma系统退回到Catalina</span><br><span class="line"></span><br><span class="line">![](https://s3.bmp.ovh/imgs/2024/03/18/26d4edbd95ba29b0.png)</span><br><span class="line"></span><br><span class="line">20款MacBook Pro，使用Sonoma系统感觉有点卡顿，晚上说是新系统对旧Mac兼容不是很好，决定退回Catalina版本，最后一个Inter电脑发布的系统</span><br><span class="line"></span><br><span class="line">准备：U盘（32G）（没有也行</span><br><span class="line">时间机器：（没有也行 主打一个凑合</span><br><span class="line">电脑硬盘：这个得有</span><br><span class="line">Catalina系统安装器（去App Store下载好</span><br><span class="line">0. 先分区</span><br><span class="line"> - 有U盘的情况，直接新建一个系统分区就好（`APFS`格式）</span><br><span class="line"> - 无U盘的情况，先建一个系统分区，再用至少20G空间做一个引导系统分区，格式选（Mac OS日志）</span><br><span class="line"> - 分区的时候，该抹掉就抹掉，只要别把当前系统抹掉就行</span><br><span class="line"></span><br><span class="line">1. 制作引导系统 （这步记不太清楚了</span><br><span class="line"></span><br><span class="line">有U盘的情况下，重启电脑，按`option`键，显示小地球图标（没有图），大概就是下面的这种，</span><br><span class="line">![](https://s3.bmp.ovh/imgs/2024/03/18/5ad8cd52fe6b475c.png)</span><br><span class="line"></span><br><span class="line">2. 分区</span><br><span class="line">3. 安装到分区上</span><br><span class="line">4. 用Catalina系统制作时间机器，保证时间机器分区是Mac OS 扩展（日志式）</span><br><span class="line">5. 将Sonoma系统数据备份到时间机器</span><br><span class="line">6. 到Catalina系统，用迁移助理将数据迁移过来</span><br><span class="line">7. 后续看情况删除Sonoma系统分区</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## Docker</span><br><span class="line"></span><br><span class="line">### QL</span><br><span class="line"></span><br><span class="line">#### dailycheckin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">获取i茅台账号cookie</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">获取地点信息,这里用的高德 api,需要自己去高德开发者平台申请自己的 key</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">AMAP_KEY = &quot;d13d06ac58fd360776f58583254c0079&quot;</span><br><span class="line"></span><br><span class="line">SALT = &quot;2af72f100c356273d46284f6fd1dfc08&quot;</span><br><span class="line"></span><br><span class="line">CURRENT_TIME = str(int(time.time() * 1000))</span><br><span class="line"></span><br><span class="line">headers = &#123;&#125;</span><br><span class="line"></span><br><span class="line">mt_version = json.loads(</span><br><span class="line"></span><br><span class="line">requests.get(&quot;https://itunes.apple.com/cn/lookup?id=1600482450&quot;).text</span><br><span class="line"></span><br><span class="line">)[&quot;results&quot;][0][&quot;version&quot;]</span><br><span class="line"></span><br><span class="line">header_context = &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">MT-Lat: 28.499562</span><br><span class="line"></span><br><span class="line">MT-K: 1675213490331</span><br><span class="line"></span><br><span class="line">MT-Lng: 102.182324</span><br><span class="line"></span><br><span class="line">Host: app.moutai519.com.cn</span><br><span class="line"></span><br><span class="line">MT-User-Tag: 0</span><br><span class="line"></span><br><span class="line">Accept: */*</span><br><span class="line"></span><br><span class="line">MT-Network-Type: WIFI</span><br><span class="line"></span><br><span class="line">MT-Token: 1</span><br><span class="line"></span><br><span class="line">MT-Team-ID: 1</span><br><span class="line"></span><br><span class="line">MT-Info: 028e7f96f6369cafe1d105579c5b9377</span><br><span class="line"></span><br><span class="line">MT-Device-ID: 2F2075D0-B66C-4287-A903-DBFF6358342A</span><br><span class="line"></span><br><span class="line">MT-Bundle-ID: com.moutai.mall</span><br><span class="line"></span><br><span class="line">Accept-Language: en-CN;q=1, zh-Hans-CN;q=0.9</span><br><span class="line"></span><br><span class="line">MT-Request-ID: 167560018873318465</span><br><span class="line"></span><br><span class="line">MT-APP-Version: 1.3.7</span><br><span class="line"></span><br><span class="line">User-Agent: iOS;16.3;Apple;?unrecognized?</span><br><span class="line"></span><br><span class="line">MT-R: clips_OlU6TmFRag5rCXwbNAQ/Tz1SKlN8THcecBp/HGhHdw==</span><br><span class="line"></span><br><span class="line">Content-Length: 93</span><br><span class="line"></span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line"></span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">userId: 2</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"># 初始化请求头</span><br><span class="line"></span><br><span class="line">def init_headers(</span><br><span class="line"></span><br><span class="line">user_id: str = &quot;1&quot;, token: str = &quot;2&quot;, lat: str = &quot;29.83826&quot;, lng: str = &quot;119.74375&quot;</span><br><span class="line"></span><br><span class="line">):</span><br><span class="line"></span><br><span class="line">for k in header_context.strip().split(&quot;\n&quot;):</span><br><span class="line"></span><br><span class="line">temp_l = k.split(&quot;: &quot;)</span><br><span class="line"></span><br><span class="line">dict.update(headers, &#123;temp_l[0]: temp_l[1]&#125;)</span><br><span class="line"></span><br><span class="line">dict.update(headers, &#123;&quot;userId&quot;: user_id&#125;)</span><br><span class="line"></span><br><span class="line">dict.update(headers, &#123;&quot;MT-Token&quot;: token&#125;)</span><br><span class="line"></span><br><span class="line">dict.update(headers, &#123;&quot;MT-Lat&quot;: lat&#125;)</span><br><span class="line"></span><br><span class="line">dict.update(headers, &#123;&quot;MT-Lng&quot;: lng&#125;)</span><br><span class="line"></span><br><span class="line">dict.update(headers, &#123;&quot;MT-APP-Version&quot;: mt_version&#125;)</span><br><span class="line"></span><br><span class="line"># 用高德api获取地图信息</span><br><span class="line"></span><br><span class="line">def select_geo(i: str):</span><br><span class="line"></span><br><span class="line"># 校验高德api是否配置</span><br><span class="line"></span><br><span class="line">if AMAP_KEY is None:</span><br><span class="line"></span><br><span class="line">print(&quot;!!!!请配置 AMAP_KEY (高德地图的MapKey)&quot;)</span><br><span class="line"></span><br><span class="line">raise ValueError</span><br><span class="line"></span><br><span class="line">resp = requests.get(</span><br><span class="line"></span><br><span class="line">f&quot;https://restapi.amap.com/v3/geocode/geo?key=&#123;AMAP_KEY&#125;&amp;output=json&amp;address=&#123;i&#125;&quot;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">geocodes: list = resp.json()[&quot;geocodes&quot;]</span><br><span class="line"></span><br><span class="line">return geocodes</span><br><span class="line"></span><br><span class="line">def signature(data: dict):</span><br><span class="line"></span><br><span class="line">keys = sorted(data.keys())</span><br><span class="line"></span><br><span class="line">temp_v = &quot;&quot;</span><br><span class="line"></span><br><span class="line">for item in keys:</span><br><span class="line"></span><br><span class="line">temp_v += data[item]</span><br><span class="line"></span><br><span class="line">text = SALT + temp_v + CURRENT_TIME</span><br><span class="line"></span><br><span class="line">hl = hashlib.md5()</span><br><span class="line"></span><br><span class="line">hl.update(text.encode(encoding=&quot;utf8&quot;))</span><br><span class="line"></span><br><span class="line">md5 = hl.hexdigest()</span><br><span class="line"></span><br><span class="line">return md5</span><br><span class="line"></span><br><span class="line"># 获取登录手机验证码</span><br><span class="line"></span><br><span class="line">def get_vcode(mobile: str):</span><br><span class="line"></span><br><span class="line">params = &#123;&quot;mobile&quot;: mobile&#125;</span><br><span class="line"></span><br><span class="line">md5 = signature(params)</span><br><span class="line"></span><br><span class="line">dict.update(</span><br><span class="line"></span><br><span class="line">params, &#123;&quot;md5&quot;: md5, &quot;timestamp&quot;: CURRENT_TIME, &quot;MT-APP-Version&quot;: mt_version&#125;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">responses = requests.post(</span><br><span class="line"></span><br><span class="line">&quot;https://app.moutai519.com.cn/xhr/front/user/register/vcode&quot;,</span><br><span class="line"></span><br><span class="line">json=params,</span><br><span class="line"></span><br><span class="line">headers=headers,</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">if responses.status_code != 200:</span><br><span class="line"></span><br><span class="line">print(</span><br><span class="line"></span><br><span class="line">f&quot;get v_code : params : &#123;params&#125;, response code : &#123;responses.status_code&#125;, response body : &#123;responses.text&#125;&quot;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># 执行登录操作</span><br><span class="line"></span><br><span class="line">def login(mobile: str, v_code: str):</span><br><span class="line"></span><br><span class="line">params = &#123;&quot;mobile&quot;: mobile, &quot;vCode&quot;: v_code, &quot;ydToken&quot;: &quot;&quot;, &quot;ydLogId&quot;: &quot;&quot;&#125;</span><br><span class="line"></span><br><span class="line">md5 = signature(params)</span><br><span class="line"></span><br><span class="line">dict.update(</span><br><span class="line"></span><br><span class="line">params, &#123;&quot;md5&quot;: md5, &quot;timestamp&quot;: CURRENT_TIME, &quot;MT-APP-Version&quot;: mt_version&#125;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">responses = requests.post(</span><br><span class="line"></span><br><span class="line">&quot;https://app.moutai519.com.cn/xhr/front/user/register/login&quot;,</span><br><span class="line"></span><br><span class="line">json=params,</span><br><span class="line"></span><br><span class="line">headers=headers,</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">if responses.status_code != 200:</span><br><span class="line"></span><br><span class="line">print(</span><br><span class="line"></span><br><span class="line">f&quot;login : params : &#123;params&#125;, response code : &#123;responses.status_code&#125;, response body : &#123;responses.text&#125;&quot;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">dict.update(headers, &#123;&quot;MT-Token&quot;: responses.json()[&quot;data&quot;][&quot;token&quot;]&#125;)</span><br><span class="line"></span><br><span class="line">dict.update(headers, &#123;&quot;userId&quot;: responses.json()[&quot;data&quot;][&quot;userId&quot;]&#125;)</span><br><span class="line"></span><br><span class="line">return responses.json()[&quot;data&quot;][&quot;token&quot;], responses.json()[&quot;data&quot;][&quot;userId&quot;]</span><br><span class="line"></span><br><span class="line">def get_location():</span><br><span class="line"></span><br><span class="line">while 1:</span><br><span class="line"></span><br><span class="line">location = input(</span><br><span class="line"></span><br><span class="line">&quot;请输入精确小区位置，例如[小区名称]，为你自动预约附近的门店:&quot;</span><br><span class="line"></span><br><span class="line">).strip()</span><br><span class="line"></span><br><span class="line">selects = select_geo(location)</span><br><span class="line"></span><br><span class="line">a = 0</span><br><span class="line"></span><br><span class="line">for item in selects:</span><br><span class="line"></span><br><span class="line">formatted_address = item[&quot;formatted_address&quot;]</span><br><span class="line"></span><br><span class="line">province = item[&quot;province&quot;]</span><br><span class="line"></span><br><span class="line">print(f&quot;&#123;a&#125; : [地区:&#123;province&#125;,位置:&#123;formatted_address&#125;]&quot;)</span><br><span class="line"></span><br><span class="line">a += 1</span><br><span class="line"></span><br><span class="line">user_select = input(&quot;请选择位置序号,重新输入请输入[-]:&quot;).strip()</span><br><span class="line"></span><br><span class="line">if user_select == &quot;-&quot;:</span><br><span class="line"></span><br><span class="line">continue</span><br><span class="line"></span><br><span class="line">select = selects[int(user_select)]</span><br><span class="line"></span><br><span class="line">formatted_address = select[&quot;formatted_address&quot;]</span><br><span class="line"></span><br><span class="line">province = select[&quot;province&quot;]</span><br><span class="line"></span><br><span class="line">print(f&quot;已选择 地区:&#123;province&#125;,[&#123;formatted_address&#125;]附近的门店&quot;)</span><br><span class="line"></span><br><span class="line">return select</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line"></span><br><span class="line">items = []</span><br><span class="line"></span><br><span class="line">while 1:</span><br><span class="line"></span><br><span class="line">init_headers()</span><br><span class="line"></span><br><span class="line">location_select: dict = get_location()</span><br><span class="line"></span><br><span class="line">province = location_select[&quot;province&quot;]</span><br><span class="line"></span><br><span class="line">city = location_select[&quot;city&quot;]</span><br><span class="line"></span><br><span class="line">location: str = location_select[&quot;location&quot;]</span><br><span class="line"></span><br><span class="line">mobile = input(&quot;输入手机号[18888888888]:&quot;).strip()</span><br><span class="line"></span><br><span class="line">get_vcode(mobile)</span><br><span class="line"></span><br><span class="line">code = input(f&quot;输入 [&#123;mobile&#125;] 验证码[8888]:&quot;).strip()</span><br><span class="line"></span><br><span class="line">token, userId = login(mobile, code)</span><br><span class="line"></span><br><span class="line">item = &#123;</span><br><span class="line"></span><br><span class="line">&quot;city&quot;: str(city),</span><br><span class="line"></span><br><span class="line">&quot;lat&quot;: location.split(&quot;,&quot;)[1],</span><br><span class="line"></span><br><span class="line">&quot;lng&quot;: location.split(&quot;,&quot;)[0],</span><br><span class="line"></span><br><span class="line">&quot;mobile&quot;: str(mobile),</span><br><span class="line"></span><br><span class="line">&quot;province&quot;: province,</span><br><span class="line"></span><br><span class="line">&quot;token&quot;: str(token),</span><br><span class="line"></span><br><span class="line">&quot;userid&quot;: str(userId),</span><br><span class="line"></span><br><span class="line">&quot;reserve_rule&quot;: 0,</span><br><span class="line"></span><br><span class="line">&quot;item_codes&quot;: [&quot;10941&quot;, &quot;10942&quot;],</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">items.append(item)</span><br><span class="line"></span><br><span class="line">condition = input(&quot;是否继续添加账号[y/n]:&quot;).strip()</span><br><span class="line"></span><br><span class="line">with open(&quot;account.json&quot;, &quot;w&quot;) as f:</span><br><span class="line"></span><br><span class="line">f.write(json.dumps(items, ensure_ascii=False, indent=4))</span><br><span class="line"></span><br><span class="line">if condition.lower() == &quot;n&quot;:</span><br><span class="line"></span><br><span class="line">break</span><br></pre></td></tr></table></figure></p>
<h2 id="scrcpy"><a class="anchor" href="#scrcpy">#</a> Scrcpy</h2>
<p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 手机息屏启动</span></span><br><span class="line">scrcpy --turn-screen-off</span><br></pre></td></tr></table></figure></p>
<h2 id="服务器frp"><a class="anchor" href="#服务器frp">#</a> 服务器 FRP</h2>
<h5 id="path-homelifrpc"><a class="anchor" href="#path-homelifrpc">#</a> path:  <code>/home/li/frpc</code></h5>
]]></content>
      <tags>
        <tag>日常记录</tag>
      </tags>
  </entry>
  <entry>
    <title>测试</title>
    <url>/2023/10/27/%E6%96%87%E7%AB%A0%E5%90%8D%E7%A7%B0/</url>
    <content><![CDATA[<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(Objects.nonNull(prLine)&amp;&amp;Objects.nonNull(prLine.getPurchaseAgentId()))&#123;</span><br><span class="line">    poHeaderDetailDTO.setAgentId(prLine.getPurchaseAgentId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>Hello Algo</title>
    <url>/2023/12/25/Algo/</url>
    <content><![CDATA[<p>二分搜索、插入排序、贪心</p>
<p>迭代、递归</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># n &gt;= 1 时</span><br><span class="line">T(n) = 3+2n &lt;= 3n+2n = 5n</span><br><span class="line">T(n) &lt;= c * f(n)</span><br><span class="line">T(n) = O(f(n))</span><br></pre></td></tr></table></figure></p>
<h3 id="kmp"><a class="anchor" href="#kmp">#</a> KMP</h3>
<h4 id="求next"><a class="anchor" href="#求next">#</a> 求 <code>next[]</code></h4>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">next[]：找出一个以0下标(必须0下标)开始，以j-1下标结束的两个相同子串</span><br><span class="line">=&gt;next[j-1] =&gt; k-1</span><br></pre></td></tr></table></figure></p>
<p><img data-src="https://s3.bmp.ovh/imgs/2023/12/28/114225dc0dc58919.png" alt="" /></p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">哈哈               k        x     j            </span><br><span class="line">下标k       0   1  2  3  4  5  6  7  8  9  10 11 12 13</span><br><span class="line">数组p       a   b  a  b  c  a  b  c  d  a  b  c  d  e</span><br><span class="line">next数组    -1  0  0  1  2  0  1  2  0  0  1  2  0  0</span><br><span class="line"></span><br><span class="line">j++</span><br><span class="line">下标0 = a</span><br><span class="line">当 j = 3:</span><br><span class="line">	下标j-1=2 -&gt; a     可以找到 a、aba、a  但是aba不满足条件     =&gt;  1</span><br><span class="line">当 j = 4:</span><br><span class="line">	下标j-1=3 -&gt; b     可以找到 ab、abab   但是abab不满足条件   =&gt;  2</span><br><span class="line">当 j = 5:</span><br><span class="line">	下标j-1=4 -&gt; c     可以找到 ababc   不满足条件  =&gt;  0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">哈哈               k        x     j            </span><br><span class="line">下标k       0   1  2  3  4  5  6  7  8  9  10 11 12 13</span><br><span class="line">数组p       a   b  a  b  c  a  b  a  d  a  b  c  d  e</span><br><span class="line">next数组    -1  0  0  1  2  0  1  2  3  0  1  2  0  0</span><br><span class="line"></span><br><span class="line">已知条件：</span><br><span class="line">以0下标(必须0下标)开始，以j-1下标结束的两个相同子串</span><br><span class="line">p[0]..p[k-1] = p[x]..p[j-1]</span><br><span class="line">得出：</span><br><span class="line">=&gt; k-1-0 = j-1-x </span><br><span class="line">=&gt; k = j-x</span><br><span class="line">=&gt; x = j-k</span><br><span class="line">==&gt; p[0]..p[k-1] = p[j-k]..p[j-1]</span><br><span class="line">假设：p[k] = p[j]</span><br><span class="line">=&gt; p[0]..p[k] = p[j-k]..p[j]</span><br><span class="line">所以 next[j] = k  </span><br><span class="line"></span><br><span class="line">k-1 = next[j-1]</span><br><span class="line">p[0]..p[k-1] = p[x]..p[j-1]</span><br><span class="line">假设：p[k] = p[j]</span><br><span class="line">p[0]..p[k-1]p[k] = p[x]..p[j-1]p[j]</span><br><span class="line">p[0]..p[k] = p[j-k]..p[j]</span><br><span class="line">k = next[j]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h3 id="数组"><a class="anchor" href="#数组">#</a> 数组</h3>
<p>优点：</p>
<ul>
<li>空间效率高</li>
<li>支持随机访问</li>
<li>缓存局部性？<br />
缺点：</li>
<li>插入与删除效率低</li>
<li>长度不可变</li>
<li>空间浪费<br />
典型应用：</li>
<li>随机访问</li>
<li>排序、搜索</li>
<li>查找表</li>
<li>机器学习</li>
<li>数据结构实现</li>
</ul>
<h3 id="链表"><a class="anchor" href="#链表">#</a> 链表</h3>
<h3 id="数组-vs-链表"><a class="anchor" href="#数组-vs-链表">#</a> 数组 vs 链表</h3>
<ul>
<li>存储方式</li>
<li>容量扩展</li>
<li>内存效率</li>
<li>访问元素</li>
<li>添加元素</li>
<li>删除元素</li>
</ul>
]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2024/01/03/%E6%95%B0%E7%BB%84%E4%B8%8E%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>拉勾训练营5期</title>
    <url>/2024/03/20/AA/</url>
    <content><![CDATA[<h1 id="jdbc"><a class="anchor" href="#jdbc">#</a> JDBC</h1>
<p>需要手动引入 Mysql 的 jar 包</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCDemo</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;  </span><br><span class="line">        <span class="comment">// 加载驱动  </span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);  </span><br><span class="line">        <span class="comment">// 建立连接  </span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;12345678&quot;</span>);  </span><br><span class="line">        <span class="comment">// 定义SQL语句  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from db_account where id = 4&quot;</span>;  </span><br><span class="line">        <span class="comment">// 获取预处理prepareStatement  </span></span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);  </span><br><span class="line">        <span class="comment">// 设置参数  </span></span><br><span class="line">        <span class="comment">// preparedStatement.setInt(1, 4);  </span></span><br><span class="line">        <span class="comment">// 执行查询 得到结果  </span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> preparedStatement.executeQuery(sql);  </span><br><span class="line">        <span class="comment">// 处理结果  </span></span><br><span class="line">        <span class="keyword">while</span> (resultSet.next()) &#123;  </span><br><span class="line">            System.out.println(<span class="string">&quot;id:&quot;</span> + resultSet.getInt(<span class="string">&quot;id&quot;</span>));  </span><br><span class="line">            System.out.println(<span class="string">&quot;email:&quot;</span> + resultSet.getString(<span class="string">&quot;email&quot;</span>));  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ol>
<li>为什么要有 ORM 框架</li>
</ol>
<ul>
<li>驱动 uri、数据库地址、账号密码，硬编码，不灵活</li>
<li>重复的建立连接</li>
<li>处理结果集麻烦</li>
</ul>
<h2 id="自定义"><a class="anchor" href="#自定义">#</a> 自定义</h2>
<h3 id="创建两个工程"><a class="anchor" href="#创建两个工程">#</a> 创建两个工程</h3>
<ul>
<li>IPersistence、IPersistence_Test</li>
</ul>
<h4 id="ipersistence_test-使用端"><a class="anchor" href="#ipersistence_test-使用端">#</a> IPersistence_Test  使用端</h4>
<h4 id="ipersistence-自定义框架"><a class="anchor" href="#ipersistence-自定义框架">#</a> IPersistence  自定义框架</h4>
<h5 id="根据配置文件的路径将配置文件加载成字节输入流存储在内存中"><a class="anchor" href="#根据配置文件的路径将配置文件加载成字节输入流存储在内存中">#</a> 根据配置文件的路径，将配置文件加载成字节输入流，存储在内存中</h5>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Resources.getResourceAsStream(String path)</span><br></pre></td></tr></table></figure></p>
<ol>
<li>获得 sqlSession 对象</li>
</ol>
<p>sqlSession 通过 sqlSessionFatory.open 获得<br />
 sqlSessionFatory 通过 sqlSessionFatoryBuilder.build (configuration) 获得<br />
 build 需要获取数据库信息</p>
<ul>
<li>创建 SqlSessionFactoryBuilder</li>
<li>通过 SqlSessionFatoryBuilder.build () 获得 SqlSessionFatory</li>
<li>通过 DefaultSqlSessionFactory.open () 获得 SqlSession</li>
<li>创建 DefaultSqlSession 实现基础方法 selectAll，selectList</li>
</ul>
<ol start="2">
<li>执行 JDBC 逻辑</li>
</ol>
<p>创建 Executor、Executor 实现类，执行 CURD</p>
<ol start="3">
<li>处理返回结果</li>
</ol>
<p>通过反射或内省 + SQLID 上的 resultType 全路径，处理返参</p>
<ul>
<li>问题 1：数据库类型与实体类型不一致<br />
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.IllegalArgumentException: argument type mismatch at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498)</span><br></pre></td></tr></table></figure></li>
<li>问题 2：数据库版本与驱动版本不一致</li>
</ul>
<p>无法获取数据库连接，报错信息和获取连接方法有关</p>
<p>使用 C3P0 连接池是报错：<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.sql.SQLException: Connections could not be acquired from the underlying database!</span><br></pre></td></tr></table></figure></p>
<p>使用 DriverManager 直接连接时：<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Client does not support authentication protocol requested by server; consider upgrading MySQL client</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<ol start="4">
<li>持久层实现</li>
</ol>
<p>通过 mapper 接口，数据库的交互</p>
<p>SqlSession 中创建一个 getMapper 方法，获取 mapper 的代理类，执行被代理类的方法</p>
<h1 id="mybatis"><a class="anchor" href="#mybatis">#</a> Mybatis</h1>
<h3 id="概念"><a class="anchor" href="#概念">#</a> 概念</h3>
<p>基于 ORM 的 <code>半自动</code> 轻量级持久层框架。</p>
<h3 id="缓存"><a class="anchor" href="#缓存">#</a> 缓存</h3>
<p><strong>底层数据结构：</strong> 就是一个 HashMap。</p>
<p><code>先去缓存中查，然后到数据库中，如果缓存中有，就直接返回，不再去数据库查询。</code></p>
<h4 id="一级缓存-sqlsession级别"><a class="anchor" href="#一级缓存-sqlsession级别">#</a> <strong>一级缓存 - SqlSession 级别</strong></h4>
<p><strong>是否启用：</strong> 默认开启</p>
<p><code>cacheKey: org.apache.ibatis.executor.BaseExecutor#createCacheKey</code></p>
<p>增删改操作时，会刷新缓存（<strong>全部缓存</strong>）</p>
<h4 id="二级缓存-namespace级别"><a class="anchor" href="#二级缓存-namespace级别">#</a> <strong>二级缓存 - NameSpace 级别</strong></h4>
<p><strong>是否启用：</strong> 默认关闭，需要手动开启</p>
<ul>
<li>
<p>[I] 二级缓存是在 SqlSession 事务提交时写入的</p>
</li>
<li>
<p>[!] 二级缓存在分布式的情况下，可能有问题。</p>
</li>
</ul>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">secondLevelCacheTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;sqlMapConfig.xml&quot;</span>);  </span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);  </span><br><span class="line">  </span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession1</span> <span class="operator">=</span> sqlSessionFactory.openSession();  </span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession2</span> <span class="operator">=</span> sqlSessionFactory.openSession();  </span><br><span class="line">  </span><br><span class="line">    <span class="type">IUserMapper</span> <span class="variable">mapper1</span> <span class="operator">=</span> sqlSession1.getMapper(IUserMapper.class);  </span><br><span class="line">    <span class="type">IUserMapper</span> <span class="variable">mapper2</span> <span class="operator">=</span> sqlSession2.getMapper(IUserMapper.class);  </span><br><span class="line">  </span><br><span class="line">    <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> mapper1.selectByPrimaryKey(<span class="number">1</span>);  </span><br><span class="line">    <span class="comment">// 这样是不会查到二级缓存的，需要事务提交或者关闭后才可以</span></span><br><span class="line">    <span class="comment">// sqlSession1.commit();  </span></span><br><span class="line">    <span class="comment">// sqlSession1.close();  </span></span><br><span class="line">  </span><br><span class="line">    <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> mapper2.selectByPrimaryKey(<span class="number">1</span>);  </span><br><span class="line">  </span><br><span class="line">    System.out.println(user1==user2);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>结论：</strong> 节省了数据库的交互</p>
<p><strong>Q:</strong><br />
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">firstLevelCacheTest3</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;sqlMapConfig.xml&quot;</span>);  </span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);  </span><br><span class="line">  </span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);  </span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession2</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="type">IUserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(IUserMapper.class);  </span><br><span class="line">    <span class="type">IUserMapper</span> <span class="variable">mapper2</span> <span class="operator">=</span> sqlSession2.getMapper(IUserMapper.class);  </span><br><span class="line">  </span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.selectByPrimaryKey(<span class="number">1</span>);  </span><br><span class="line">    System.out.println(user);  </span><br><span class="line">    mapper2.updateUserByPrimaryKey(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;gaga&quot;</span>));  </span><br><span class="line">    <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> mapper.selectByPrimaryKey(<span class="number">1</span>);  </span><br><span class="line">    System.out.println(user1); </span><br><span class="line">    System.out.println(<span class="string">&quot;user == user1: &quot;</span> + (user == user1)); </span><br><span class="line">    sqlSession.close();  </span><br><span class="line">    sqlSession2.close();  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// User&#123;id=1, name=&#x27;haha&#x27;&#125;</span></span><br><span class="line"><span class="comment">// User&#123;id=1, name=&#x27;haha&#x27;&#125;</span></span><br><span class="line"><span class="comment">// user == user1: true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h3 id="插件"><a class="anchor" href="#插件">#</a> 插件</h3>
<ul>
<li>[I]  需要在 SqlMapConfig.xml 中启用</li>
</ul>
<p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.li.plugin.MyPlugin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="分页插件"><a class="anchor" href="#分页插件">#</a> 分页插件</h4>
<p><strong>拦截器实现</strong></p>
<ul>
<li>
<p>[*]  <code>com.github.pagehelper.PageHelper</code></p>
</li>
<li>
<p>[*] 入口： <code>com.github.pagehelper.SqlUtil#_processPage</code></p>
</li>
<li>
<p>[*] 增加 COUNTSQL： <code>com.github.pagehelper.MSUtils#processCountMappedStatement(MappedStatement ms, SqlSource sqlSource, Object[] args)</code></p>
</li>
<li>
<p>countSql 返回结果大于 0 时，执行分页，将总数设置到 page 对象中</p>
</li>
<li>
<p>替换参数  <code>com.github.pagehelper.MSUtils#processPageMappedStatement(MappedStatement ms, SqlSource sqlSource, Page page, Object[] args)</code></p>
</li>
<li>
<p>创建新的 mapperStatement，执行分页 SQL</p>
</li>
<li>
<p>设置分页参数： <code>com.github.pagehelper.MSUtils#setPageParameter</code></p>
</li>
</ul>
<h4 id="通用mapper"><a class="anchor" href="#通用mapper">#</a> 通用 Mapper</h4>
<h3 id="架构原理"><a class="anchor" href="#架构原理">#</a> 架构原理</h3>
<h4 id="架构设计"><a class="anchor" href="#架构设计">#</a> 架构设计</h4>
<h5 id="接口"><a class="anchor" href="#接口">#</a> 接口</h5>
<ul>
<li>通过 sqlSession.method (statementId) 或者 Mapper 代理类调用方法，执行主句的增删改查。</li>
<li>调用接口修改配置信息等。</li>
</ul>
<h5 id="数据处理"><a class="anchor" href="#数据处理">#</a> 数据处理</h5>
<ul>
<li>请求参数处理 (@Param)：ParameterHandler</li>
<li>SQL 解析 (处理占位符、Mapper 标签)：SqlSource</li>
<li>SQL 执行 (JDBC)：Executor</li>
<li>返回结果处理 (类型转换等)：ResultSetHandler</li>
</ul>
<h5 id="框架支撑"><a class="anchor" href="#框架支撑">#</a> 框架支撑</h5>
<ul>
<li>事务管理</li>
<li>连接池管理</li>
<li>缓存机制</li>
</ul>
<h4 id="主要构件"><a class="anchor" href="#主要构件">#</a> 主要构件</h4>
<ul>
<li>
<p>SqlSession：session 表示与数据库的连接</p>
</li>
<li>
<p>Executor：执行器</p>
</li>
<li>
<p>StatementHandler：</p>
</li>
<li>
<p>ParameterHandler：</p>
</li>
<li>
<p>BoundSql：</p>
</li>
<li>
<p>ResultSetHander：</p>
</li>
<li>
<p>TypeHandler：数据库类型与 JavaBean 类型的转换</p>
</li>
<li>
<p>MappedStatement：</p>
</li>
<li>
<p>SqlSource：</p>
</li>
</ul>
<h4 id="总体流程"><a class="anchor" href="#总体流程">#</a> 总体流程</h4>
<ol>
<li>SqlSessionFactoryBuilder 获取 SqlSessionFactory</li>
<li>SqlSessionFactory.openSession 获取 SqlSession 对象</li>
<li>通过 getMapper 获取 Mapper 代理对象</li>
<li>执行代理 Mapper 的方法</li>
<li>=&gt; Executor Mybatis 的执行器</li>
<li>=&gt; StatementHandler 与 JDBC Statement 的交互</li>
<li>=&gt; ParameterHandler 处理方法中携带的参数，拼接到 Sql 中</li>
<li>=&gt; 执行 JDBC 流程（加载驱动、建立连接、定义 Sql、获取预处理对象、处理参数、执行、处理返回结果）</li>
<li>=&gt; 处理 Java 类型和数据库类型映射</li>
</ol>
<h3 id="源码分析"><a class="anchor" href="#源码分析">#</a> 源码分析</h3>
<h4 id="getmapper"><a class="anchor" href="#getmapper">#</a> getMapper</h4>
<p>扫描 @Mapper 注解、从 sqlMapConfigXml 中读取 Mapper 包名，或者 Mapper 接口，将其存到 MapperRegistry.knownMappers 中<br />
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Class&lt;?&gt;, MapperProxyFactory&lt;?&gt;&gt; knownMappers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure></p>
<p>value 值存储的是一个工厂类，有个 <code>Class&lt;T&gt;</code>  的变量，和 <code>newInstance(SqlSession sqlSession)</code>  方法，用于给 Mapper 创建代理对象</p>
<ul>
<li>[*]  <code>Proxy.newProxyInstance(mapperInterface.getClassLoader(), new Class[]&#123;mapperInterface&#125;, mapperProxy);</code></li>
</ul>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JDK动态代理 生成代理对象</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * loader 类加载器</span></span><br><span class="line"><span class="comment"> * interfaces 代理对象类型</span></span><br><span class="line"><span class="comment"> * h InvocationHandler接口的实现类，需要实现invoke方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">newProxyInstance(ClassLoader loader,  </span><br><span class="line">                                      Class&lt;?&gt;[] interfaces,  </span><br><span class="line">                                      InvocationHandler h)</span><br></pre></td></tr></table></figure></p>
<h4 id="二级缓存"><a class="anchor" href="#二级缓存">#</a> 二级缓存</h4>
<ul>
<li>
<p>[*]  <code>org.apache.ibatis.executor.CachingExecutor#flushCacheIfRequired</code></p>
</li>
<li>
<p>[*]  <code>org.apache.ibatis.builder.MapperBuilderAssistant#addMappedStatement(java.lang.String, org.apache.ibatis.mapping.SqlSource, org.apache.ibatis.mapping.StatementType, org.apache.ibatis.mapping.SqlCommandType, java.lang.Integer, java.lang.Integer, java.lang.String, java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;, org.apache.ibatis.mapping.ResultSetType, boolean, boolean, boolean, org.apache.ibatis.executor.keygen.KeyGenerator, java.lang.String, java.lang.String, java.lang.String, org.apache.ibatis.scripting.LanguageDriver, java.lang.String)</code></p>
</li>
<li>
<p>[?] 二级缓存需要再事务提交后或者关闭后生效</p>
</li>
</ul>
<p><code>org.apache.ibatis.executor.CachingExecutor#query(org.apache.ibatis.mapping.MappedStatement, java.lang.Object, org.apache.ibatis.session.RowBounds, org.apache.ibatis.session.ResultHandler, org.apache.ibatis.cache.CacheKey, org.apache.ibatis.mapping.BoundSql)</code></p>
<p>=&gt;  使用 <code>CachingExecutor.query()</code> <br />
=&gt;  清空缓存<br />
 =&gt;<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 从二级缓存中，获取结果</span><br><span class="line">List&lt;E&gt; list = (List&lt;E&gt;) tcm.getObject(cache, key);</span><br><span class="line">getObject =&gt; TransactionalCacheManager.transactionalCaches.delegate中获取缓存</span><br><span class="line"></span><br><span class="line">// 如果没有取到 去一级缓存中取</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 缓存查询结果  </span><br><span class="line">tcm.putObject(cache, key, list);</span><br><span class="line"></span><br><span class="line">=&gt; 实际是存到了entriesToAddOnCommit中</span><br><span class="line"></span><br><span class="line">transactionalCaches中有一个：</span><br><span class="line">private final Map&lt;Object, Object&gt; entriesToAddOnCommit;</span><br><span class="line"></span><br><span class="line">public void putObject(Cache cache, CacheKey key, Object value) &#123;  </span><br><span class="line">    // 存入TransactionalCache的缓存中  </span><br><span class="line">    getTransactionalCache(cache).putObject(key, value);  </span><br><span class="line">&#125;</span><br><span class="line">=&gt; </span><br><span class="line">entriesToAddOnCommit.put(key, object);</span><br><span class="line"></span><br><span class="line">transactionalCaches中有一个flushPendingEntries方法，该方法会在事务提交、关闭时会调用，这也是二级缓存需要在事务提交或者关闭后才能查到的原因</span><br><span class="line">// 将 entriesToAddOnCommit、entriesMissedInCache 刷入 delegate(cache) 中  </span><br><span class="line">flushPendingEntries();</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<ul>
<li>[?] 二级缓存为什么使用的是 <code>CachingExecutor</code></li>
</ul>
<p>sqlSessionFactory.openSession () 时会 new Executor<br />
 <code>org.apache.ibatis.session.defaults.DefaultSqlSessionFactory#openSessionFromDataSource</code></p>
<p><code>org.apache.ibatis.session.Configuration#newExecutor(org.apache.ibatis.transaction.Transaction, org.apache.ibatis.session.ExecutorType)</code></p>
]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2024/01/19/Leetcode/</url>
    <content><![CDATA[<h3 id="2171-拿出最少得魔法豆"><a class="anchor" href="#2171-拿出最少得魔法豆">#</a> 2171 拿出最少得魔法豆</h3>
<p><img data-src="https://s3.bmp.ovh/imgs/2024/01/19/2f204f7d3bbeef18.png" alt="" /></p>
]]></content>
  </entry>
  <entry>
    <title>Spring Boot Admin</title>
    <url>/2024/03/13/Spring%20Boot%20Admin/</url>
    <content><![CDATA[<h3 id="服务端配置"><a class="anchor" href="#服务端配置">#</a> 服务端配置</h3>
<p>新建一个 SpringBoot 项目</p>
<p><code>pom.xml</code></p>
<p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--如果不需要鉴权 可以不加Security依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><code>application.properties</code></p>
<p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">20000  </span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/admin</span></span><br></pre></td></tr></table></figure></p>
<p>启动类加上  <code>@EnableAdminServer</code>  注解</p>
<p>如果不需要鉴权  到这里就结束了，运行项目，然后访问 <code>localhost:20000/admin</code>  就可以看到 SBA 的 UI</p>
<p><img data-src="https://s3.bmp.ovh/imgs/2024/03/13/b436a3855a95e5cb.png" alt="" /></p>
<h4 id="非必须项"><a class="anchor" href="#非必须项">#</a> 非必须项</h4>
<p>引入 Security，开启认证登录，下面是一个简单的样例</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecuritySecureConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AdminServerProperties adminServer;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SecuritySecureConfig</span><span class="params">(AdminServerProperties adminServer)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.adminServer = adminServer;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">    <span class="type">SavedRequestAwareAuthenticationSuccessHandler</span> <span class="variable">successHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SavedRequestAwareAuthenticationSuccessHandler</span>();  </span><br><span class="line">    successHandler.setTargetUrlParameter(<span class="string">&quot;redirectTo&quot;</span>);  </span><br><span class="line">    successHandler.setDefaultTargetUrl(<span class="built_in">this</span>.adminServer.path(<span class="string">&quot;/&quot;</span>));  </span><br><span class="line">  </span><br><span class="line">    http.authorizeRequests()  </span><br><span class="line">      .antMatchers(<span class="built_in">this</span>.adminServer.path(<span class="string">&quot;/assets/**&quot;</span>)).permitAll()   </span><br><span class="line">      .antMatchers(<span class="built_in">this</span>.adminServer.path(<span class="string">&quot;/login&quot;</span>)).permitAll()  </span><br><span class="line">      .anyRequest().authenticated()   </span><br><span class="line">      .and()  </span><br><span class="line">    .formLogin().loginPage(<span class="built_in">this</span>.adminServer.path(<span class="string">&quot;/login&quot;</span>)).successHandler(successHandler).and()   </span><br><span class="line">    .logout().logoutUrl(<span class="built_in">this</span>.adminServer.path(<span class="string">&quot;/logout&quot;</span>)).and()  </span><br><span class="line">    .httpBasic().and()   </span><br><span class="line">    .csrf()  </span><br><span class="line">      .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())  </span><br><span class="line">      .ignoringRequestMatchers(  </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">AntPathRequestMatcher</span>(<span class="built_in">this</span>.adminServer.path(<span class="string">&quot;/instances&quot;</span>), HttpMethod.POST.toString()),  </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">AntPathRequestMatcher</span>(<span class="built_in">this</span>.adminServer.path(<span class="string">&quot;/instances/*&quot;</span>), HttpMethod.DELETE.toString()),    </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">AntPathRequestMatcher</span>(<span class="built_in">this</span>.adminServer.path(<span class="string">&quot;/actuator/**&quot;</span>))    </span><br><span class="line">      )  </span><br><span class="line">    .and()  </span><br><span class="line">    .rememberMe().key(UUID.randomUUID().toString()).tokenValiditySeconds(<span class="number">1209600</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        auth.inMemoryAuthentication().withUser(<span class="string">&quot;user&quot;</span>).password(<span class="string">&quot;&#123;noop&#125;passwd&quot;</span>).roles(<span class="string">&quot;USER&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行项目，然后访问 <code>localhost:20000/admin</code>  需要登录</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>日常记录</tag>
      </tags>
  </entry>
  <entry>
    <title>security</title>
    <url>/2024/02/22/security/</url>
    <content><![CDATA[<h2 id="1"><a class="anchor" href="#1">#</a> 1.</h2>
<p>引入依赖：<br />
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>一些必要的配置：</p>
<p>新建一个配置类  <code>WebSecurityConfig</code>  继承 <code>WebSecurityConfigurerAdapter</code>  重写 <code>configure</code>  方法。（<strong>重要</strong>）</p>
<ul>
<li>是 SpringSecurity 的核心</li>
</ul>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="comment">// 开启登录  </span></span><br><span class="line">        http.formLogin();  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>新建一个 controller 用来测试登录</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhanghuapeng  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/1/28  </span></span><br><span class="line"><span class="comment"> */</span><span class="meta">@RestController</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 获取当前登录用户信息  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user-info&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> Authentication <span class="title function_">getUserInfo</span><span class="params">(Authentication authentication)</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> authentication;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br />
 启动项目：终端会有这么一段日志<br />
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Using generated security password: f429b724-db54-4a56-ae82-7ebb63f22d69</span><br></pre></td></tr></table></figure><br />
 表示：没有设置用户信息，给出了一个默认用户及密码，默认用户 <code>user</code></p>
<p>登录之后，默认会跳转到 Index 页面，但是目前没有这个页面，所以会报错。<br />
暂不处理。</p>
<p>访问： <code>http://localhost:8080/user-info</code> <br />
 返回结果：<br />
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;credentials&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span><span class="attr">&quot;details&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span><span class="attr">&quot;authenticated&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span><span class="attr">&quot;authorities&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span><span class="attr">&quot;principal&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;not login!&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>可以通过 <code>http://localhost:8080/logount</code>  退出登录</p>
<p>之后在访问 user-info 接口，发现不在包含用户信息</p>
<h2 id="2"><a class="anchor" href="#2">#</a> 2.</h2>
<p>实际使用中 没有登录的用户是不能访问接口的</p>
<p>修改 <code>WebSecurityConfig</code> <br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration  </span><br><span class="line">public class WebSecurityConfig extends WebSecurityConfigurerAdapter &#123;  </span><br><span class="line">    @Override  </span><br><span class="line">    protected void configure(HttpSecurity http) throws Exception &#123;  </span><br><span class="line">        // 开启登录  </span><br><span class="line">        http.formLogin();  </span><br><span class="line">        // 设置访问权限  任何请求均需要认证（登录成功）才能访问  </span><br><span class="line">http.authorizeRequests().anyRequest().authenticated();    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>重启项目<br />
此时，访问： <code>http://localhost:8080/user-info</code> <br />
 发现会直接跳转到登录页面</p>
<h2 id="增加一些细节"><a class="anchor" href="#增加一些细节">#</a> 增加一些细节</h2>
<h3 id="依赖"><a class="anchor" href="#依赖">#</a> 依赖</h3>
<p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- Web --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span>            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span>                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span>        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span>    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- Undertow --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- Security --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- Test --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!--lombok--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!--mybatis--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 添加jwt的依赖 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!--Redis--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="配置"><a class="anchor" href="#配置">#</a> 配置</h3>
<p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span>  </span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span>  </span><br><span class="line">  </span><br><span class="line"><span class="attr">spring:</span>  </span><br><span class="line">  <span class="attr">output:</span>  </span><br><span class="line">    <span class="attr">ansi:</span>  </span><br><span class="line">      <span class="attr">enabled:</span> <span class="string">always</span>   <span class="comment"># 强制启用 ansi 输出  </span></span><br><span class="line">  <span class="attr">datasource:</span>  </span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span>  </span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/security_study?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span>  </span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span>  </span><br><span class="line">    <span class="attr">password:</span> <span class="number">12345678</span>  </span><br><span class="line">  <span class="attr">redis:</span>  </span><br><span class="line">      <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>  </span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span>  </span><br><span class="line">      <span class="attr">database:</span> <span class="number">1</span>  </span><br><span class="line"><span class="attr">jwt:</span>  </span><br><span class="line">    <span class="attr">secretKey:</span> <span class="string">a3e4cd2d191a017bf49dbdf49a4c62b1fb292c5b112d6a51bdc4e2ea5052e816</span>  </span><br><span class="line">    <span class="attr">expiration:</span> <span class="number">3600</span>  </span><br><span class="line">  </span><br><span class="line"><span class="attr">logging:</span>  </span><br><span class="line">  <span class="attr">pattern:</span>  </span><br><span class="line">    <span class="comment"># 控制台日志格式  </span></span><br><span class="line">    <span class="attr">console:</span> <span class="string">&quot;%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr(%5p) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; : %msg%n&quot;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="attr">mybatis:</span>  </span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.li.entity</span>  </span><br><span class="line">  <span class="attr">configuration:</span>  </span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span>  </span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span>  </span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure></p>
<ol>
<li>
<p>在 <code>com.li</code>  新建 <code>utils</code>  包，新建 <code>JwtUtils</code> <br />
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtils</span> &#123;  </span><br><span class="line">    <span class="comment">//算法密钥  </span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.secretKey&#125;&quot;)</span>  </span><br><span class="line">    <span class="keyword">private</span> String jwtSecretKey;  </span><br><span class="line">    <span class="comment">// 过期时间  </span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.expiration&#125;&quot;)</span>  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> expiration;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 创建jwt  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userInfo 用户信息  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authList 用户权限列表  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回jwt（JSON WEB TOKEN）  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">createToken</span><span class="params">(String userInfo, List&lt;String&gt; authList)</span> &#123;  </span><br><span class="line">        <span class="comment">//创建时间  </span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">currentTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();  </span><br><span class="line">        <span class="comment">//过期时间，5分钟后过期  </span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">expireTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(currentTime.getTime() + expiration);  </span><br><span class="line">        <span class="comment">//jwt 的header信息  </span></span><br><span class="line">        Map&lt;String, Object&gt; headerClaims = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        headerClaims.put(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;JWT&quot;</span>);  </span><br><span class="line">        headerClaims.put(<span class="string">&quot;alg&quot;</span>, <span class="string">&quot;HS256&quot;</span>);  </span><br><span class="line">        <span class="comment">//创建jwt  </span></span><br><span class="line">        <span class="keyword">return</span> JWT.create()  </span><br><span class="line">                .withHeader(headerClaims) <span class="comment">// 头部  </span></span><br><span class="line">                .withIssuedAt(currentTime) <span class="comment">//已注册声明：签发日期，发行日期  </span></span><br><span class="line">                .withExpiresAt(expireTime) <span class="comment">//已注册声明 过期时间  </span></span><br><span class="line">                .withIssuer(<span class="string">&quot;thomas&quot;</span>)  <span class="comment">//已注册声明，签发人  </span></span><br><span class="line">                .withClaim(<span class="string">&quot;userInfo&quot;</span>, userInfo) <span class="comment">//私有声明，可以自己定义  </span></span><br><span class="line">                .withClaim(<span class="string">&quot;authList&quot;</span>, authList) <span class="comment">//私有声明，可以自定义  </span></span><br><span class="line">                .sign(Algorithm.HMAC256(jwtSecretKey)); <span class="comment">// 签名，使用HS256算法签名，并使用密钥  </span></span><br><span class="line"><span class="comment">//        HS256是一种对称算法，这意味着只有一个密钥，在双方之间共享。 使用相同的密钥生成签名并对其进行验证。 应特别注意钥匙是否保密。  </span></span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 验证jwt的签名，简称验签  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token 需要验签的jwt  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 验签结果  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">verifyToken</span><span class="params">(String token)</span> &#123;  </span><br><span class="line">        <span class="comment">//获取验签类对象  </span></span><br><span class="line">        <span class="type">JWTVerifier</span> <span class="variable">jwtVerifier</span> <span class="operator">=</span> JWT.require(Algorithm.HMAC256(jwtSecretKey)).build();  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="comment">//验签，如果不报错，则说明jwt是合法的，而且也没有过期  </span></span><br><span class="line">            <span class="type">DecodedJWT</span> <span class="variable">decodedJWT</span> <span class="operator">=</span> jwtVerifier.verify(token);  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (JWTVerificationException e) &#123;  </span><br><span class="line">            <span class="comment">//如果报错说明jwt 为非法的，或者已过期（已过期也属于非法的）  </span></span><br><span class="line">            log.error(<span class="string">&quot;验签失败：&#123;&#125;&quot;</span>, token);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 获取用户id  </span></span><br><span class="line"><span class="comment">     *     * <span class="doctag">@param</span> token jwt  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户id  </span></span><br><span class="line"><span class="comment">     */</span>    <span class="keyword">public</span> String <span class="title function_">getUserInfo</span><span class="params">(String token)</span> &#123;  </span><br><span class="line">        <span class="comment">//创建jwt验签对象  </span></span><br><span class="line">        <span class="type">JWTVerifier</span> <span class="variable">jwtVerifier</span> <span class="operator">=</span> JWT.require(Algorithm.HMAC256(jwtSecretKey)).build();  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="comment">//验签  </span></span><br><span class="line">            <span class="type">DecodedJWT</span> <span class="variable">decodedJWT</span> <span class="operator">=</span> jwtVerifier.verify(token);  </span><br><span class="line">            <span class="comment">//获取payload中userInfo的值，并返回  </span></span><br><span class="line">            <span class="keyword">return</span> decodedJWT.getClaim(<span class="string">&quot;userInfo&quot;</span>).asString();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (JWTVerificationException e) &#123;  </span><br><span class="line">            log.error(<span class="string">&quot;getUserInfo error&quot;</span>, e);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 获取用户权限  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getUserAuth</span><span class="params">(String token)</span> &#123;  </span><br><span class="line">        <span class="comment">//创建jwt验签对象  </span></span><br><span class="line">        <span class="type">JWTVerifier</span> <span class="variable">jwtVerifier</span> <span class="operator">=</span> JWT.require(Algorithm.HMAC256(jwtSecretKey)).build();  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="comment">//验签  </span></span><br><span class="line">            <span class="type">DecodedJWT</span> <span class="variable">decodedJWT</span> <span class="operator">=</span> jwtVerifier.verify(token);  </span><br><span class="line">            <span class="comment">//获取payload中的自定义数据authList（权限列表），并返回  </span></span><br><span class="line">            <span class="keyword">return</span> decodedJWT.getClaim(<span class="string">&quot;authList&quot;</span>).asList(String.class);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (JWTVerificationException e) &#123;  </span><br><span class="line">            log.error(<span class="string">&quot;getUserAuth error&quot;</span>, e);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</li>
<li>
<p>在 <code>com.li</code>  新建 <code>filter</code>  包，新建 <code>SaySomethingJWTFilter</code> <br />
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhanghuapeng  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/2/22  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> 一次性请求过滤器  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SaySomethingJWTFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;  </span><br><span class="line">    <span class="meta">@Resource</span>  </span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper;  </span><br><span class="line">    <span class="meta">@Resource</span>  </span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;  </span><br><span class="line">    <span class="meta">@Resource</span>  </span><br><span class="line">    <span class="keyword">private</span> JwtUtils jwtUtils;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;  </span><br><span class="line">        <span class="comment">//获取请求uri  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();  </span><br><span class="line">        <span class="comment">// 如果是登录页面，放行  </span></span><br><span class="line">        <span class="keyword">if</span> (requestURI.equals(<span class="string">&quot;/login&quot;</span>)) &#123;  </span><br><span class="line">            filterChain.doFilter(request, response);  </span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">//获取请求头中的Authorization  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">authorization</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);  </span><br><span class="line">        <span class="comment">//如果Authorization为空，那么不允许用户访问，直接返回  </span></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(authorization)) &#123;  </span><br><span class="line">            printFront(response, <span class="string">&quot;没有登录！&quot;</span>);  </span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//Authorization 去掉头部的Bearer 信息，获取token值  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jwtToken</span> <span class="operator">=</span> authorization.replace(<span class="string">&quot;Bearer &quot;</span>, <span class="string">&quot;&quot;</span>);  </span><br><span class="line">        <span class="comment">//验签  </span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">verifyTokenResult</span> <span class="operator">=</span> jwtUtils.verifyToken(jwtToken);  </span><br><span class="line">        <span class="comment">//验签不成功  </span></span><br><span class="line">        <span class="keyword">if</span> (!verifyTokenResult) &#123;  </span><br><span class="line">            printFront(response, <span class="string">&quot;jwtToken 已过期&quot;</span>);  </span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//从payload中获取userInfo  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userInfo</span> <span class="operator">=</span> jwtUtils.getUserInfo(jwtToken);  </span><br><span class="line">        <span class="comment">//从payload中获取授权列表  </span></span><br><span class="line">        List&lt;String&gt; userAuth = jwtUtils.getUserAuth(jwtToken);  </span><br><span class="line">        <span class="comment">//创建登录用户  </span></span><br><span class="line">        <span class="type">SysUser</span> <span class="variable">sysUser</span> <span class="operator">=</span> objectMapper.readValue(userInfo, SysUser.class);  </span><br><span class="line">        <span class="type">SecurityUser</span> <span class="variable">securityUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecurityUser</span>(sysUser);  </span><br><span class="line">          </span><br><span class="line">        <span class="comment">//设置权限  </span></span><br><span class="line">        List&lt;SimpleGrantedAuthority&gt; authList = userAuth.stream().map(SimpleGrantedAuthority::<span class="keyword">new</span>).collect(Collectors.toList());  </span><br><span class="line">        securityUser.setAuthorities(authList);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">usernamePasswordAuthenticationToke</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(securityUser  </span><br><span class="line">                , <span class="literal">null</span>, authList);  </span><br><span class="line">        <span class="comment">//通过安全上下文设置认证信息  </span></span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(usernamePasswordAuthenticationToke);  </span><br><span class="line">        <span class="comment">//继续访问相应的rul等  </span></span><br><span class="line">        filterChain.doFilter(request, response);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printFront</span><span class="params">(HttpServletResponse response, String message)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);  </span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);  </span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();  </span><br><span class="line">        <span class="type">HttpResult</span> <span class="variable">httpResult</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpResult</span>();  </span><br><span class="line">        httpResult.setCode(-<span class="number">1</span>);  </span><br><span class="line">        httpResult.setMsg(message);  </span><br><span class="line">  </span><br><span class="line">        writer.print(objectMapper.writeValueAsString(httpResult));  </span><br><span class="line">        writer.flush();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</li>
<li>
<p>调整 <code>SecurityConfig</code> , 将过滤器添加到配置中<br />
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span>  </span><br><span class="line"><span class="keyword">private</span> SaySTokenFilter saySTokenFilter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">  <span class="comment">// 增加配置</span></span><br><span class="line">    http.addFilterBefore(saySomethingJWTFilter, UsernamePasswordAuthenticationFilter.class);  </span><br><span class="line"><span class="comment">// ...原来的配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</li>
</ol>
<h5 id="调试"><a class="anchor" href="#调试">#</a> 调试</h5>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 不携带token访问http://localhost:8080/user-info</span><br><span class="line">返回：&#123;&quot;code&quot;:-1,&quot;msg&quot;:&quot;没有登录！&quot;,&quot;data&quot;:null&#125;</span><br><span class="line"># 携带错误token访问http://localhost:8080/user-info</span><br><span class="line">返回：&#123;&quot;code&quot;:-1,&quot;msg&quot;:&quot;jwtToken 已过期&quot;,&quot;data&quot;:null&#125;</span><br></pre></td></tr></table></figure></p>
<ol start="4">
<li>在 <code>com.li.config</code> , 新建 <code>SaySAuthenticationSuccessHandler</code></li>
</ol>
<h4 id="设置权限"><a class="anchor" href="#设置权限">#</a> 设置权限</h4>
<p><strong>在 loadUserByUsername 中获取权限，并设置到 SecurityUser 中</strong></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// com.li.service.impl.UserServiceImpl</span></span><br><span class="line"></span><br><span class="line"><span class="type">SecurityUser</span> <span class="variable">securityUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecurityUser</span>(sysUser);  </span><br><span class="line"><span class="comment">// 获取权限信息  </span></span><br><span class="line">List&lt;String&gt; authList = sysMenuDao.queryPermissionByUserId(sysUser.getUserId());  </span><br><span class="line"><span class="keyword">if</span> (!CollectionUtils.isEmpty(authList)) &#123;  </span><br><span class="line">    List&lt;SimpleGrantedAuthority&gt; authorities = authList.stream().map(SimpleGrantedAuthority::<span class="keyword">new</span>).collect(toList());  </span><br><span class="line">    <span class="comment">// 设置权限  </span></span><br><span class="line">    securityUser.setAuthorities(authorities);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">return</span> securityUser;</span><br></pre></td></tr></table></figure></p>
<p>在 SaySAuthenticationSuccessHandler.onAuthenticationSuccess 中，生成 Token 时，可以将权限信息一起放入 Token 中。</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; authList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line"><span class="comment">// 获取权限  </span></span><br><span class="line">List&lt;SimpleGrantedAuthority&gt; authorities = (List&lt;SimpleGrantedAuthority&gt;) securityUser.getAuthorities();  </span><br><span class="line"><span class="keyword">if</span> (!CollectionUtils.isEmpty(authorities)) &#123;  </span><br><span class="line">    <span class="comment">// 转成String 用于生成Token  </span></span><br><span class="line">    authList = authorities.stream().map(SimpleGrantedAuthority::getAuthority).collect(Collectors.toList());  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建Token  增加authList参数</span></span><br><span class="line"><span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> saySJwtUtils.createToken(userInfo, authList);</span><br></pre></td></tr></table></figure></p>
<h4 id="注销处理"><a class="anchor" href="#注销处理">#</a> 注销处理</h4>
<p><strong>Jwt 本质上是一个字符串，无法手动将其过期，也就是说，即使手动退出登录，对于 Token 来说，还是一个有效的 Token，可以通过接入 Redis 来解决这一问题</strong></p>
<ol>
<li>
<p>登录成功时，将 Token 写入 Redis<br />
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SaySAuthenticationSuccessHandler</span></span><br><span class="line"><span class="comment">// 设置过期时间  </span></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;jwt.expiration&#125;&quot;)</span>  </span><br><span class="line"><span class="keyword">private</span> <span class="type">long</span> expiration;</span><br><span class="line"><span class="comment">// 引入StringRedisTemplate</span></span><br><span class="line"><span class="meta">@Resource</span>  </span><br><span class="line"><span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在创建Token之后，将Token存到Redis中</span></span><br><span class="line"></span><br><span class="line">onAuthenticationSuccess()&#123;</span><br><span class="line"><span class="comment">// 创建Token  </span></span><br><span class="line"><span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> saySJwtUtils.createToken(userInfo, authList);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入Redis  </span></span><br><span class="line">stringRedisTemplate.opsForValue().set(<span class="string">&quot;login_token:&quot;</span> + token, objectMapper.writeValueAsString(authentication), expiration, TimeUnit.MILLISECONDS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
</li>
<li>
<p>校验 Token 时，先验签，再去 Redis 中判断 Token 是否还存在</p>
</li>
</ol>
<ul>
<li>如果验签成功，但是 Redis 中不存在，说明 Token 被手动过期了<br />
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">doFilterInternal()&#123;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 从Redis获取token并校验  </span></span><br><span class="line"><span class="type">String</span> <span class="variable">tokenInRedis</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(<span class="string">&quot;login_token:&quot;</span> + jwtToken);  </span><br><span class="line"><span class="keyword">if</span> (!StringUtils.hasText(tokenInRedis)) &#123;  </span><br><span class="line">    printFront(response, <span class="string">&quot;用户已退出，请重新登录&quot;</span>);  </span><br><span class="line">    <span class="keyword">return</span>;  </span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>在 <code>com.li.config</code> ，新建 <code>SaysLogoutSuccessHandler</code> <br />
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 退出成功处理器，用户退出成功后，执行此处理器  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SaysLogoutSuccessHandler</span> <span class="keyword">implements</span> <span class="title class_">LogoutSuccessHandler</span> &#123;  </span><br><span class="line">    <span class="comment">//使用此工具类的对象进行序列化操作  </span></span><br><span class="line">    <span class="meta">@Resource</span>  </span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper;  </span><br><span class="line">    <span class="meta">@Resource</span>  </span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLogoutSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException &#123;  </span><br><span class="line">        <span class="comment">//从请求头中获取Authorization信息  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">authorization</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);  </span><br><span class="line">        <span class="comment">//如果授权信息为空，返回前端  </span></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == authorization) &#123;  </span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);  </span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);  </span><br><span class="line">            <span class="type">HttpResult</span> <span class="variable">httpResult</span> <span class="operator">=</span> HttpResult.builder().code(-<span class="number">1</span>).msg(<span class="string">&quot;token不能为空&quot;</span>).build();  </span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();  </span><br><span class="line">            writer.write(objectMapper.writeValueAsString(httpResult));  </span><br><span class="line">            writer.flush();  </span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">//如果Authorization信息不为空，去掉头部的Bearer字符串  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> authorization.replace(<span class="string">&quot;Bearer &quot;</span>, <span class="string">&quot;&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//redis中删除token，这是关键点  </span></span><br><span class="line">        stringRedisTemplate.delete(<span class="string">&quot;login_token:&quot;</span> + token);  </span><br><span class="line">  </span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);  </span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);  </span><br><span class="line">        <span class="type">HttpResult</span> <span class="variable">httpResult</span> <span class="operator">=</span> HttpResult.builder().code(<span class="number">200</span>).msg(<span class="string">&quot;退出成功&quot;</span>).build();  </span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();  </span><br><span class="line">        writer.write(objectMapper.writeValueAsString(httpResult));  </span><br><span class="line">        writer.flush();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>调整 <code>SecurityConfig</code> <br />
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Resource</span>  </span><br><span class="line"><span class="keyword">private</span> SaysLogoutSuccessHandler saysLogoutSuccessHandler;</span><br><span class="line"></span><br><span class="line">configure()&#123;</span><br><span class="line">http.logout().logoutSuccessHandler(saysLogoutSuccessHandler);</span><br><span class="line"><span class="comment">// 禁用跨域请求保护 要不然logout不能访问(目前体现是弹出了确认退出登录的确认框  </span></span><br><span class="line">http.csrf().disable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider#authenticate</code> <br />
 <code>org.springframework.security.authentication.dao.DaoAuthenticationProvider#retrieveUser</code></p>
<p><code>org.springframework.security.authentication.dao.DaoAuthenticationProvider#additionalAuthenticationChecks</code></p>
]]></content>
  </entry>
  <entry>
    <title>苏州一日游</title>
    <url>/2024/06/08/%E8%8B%8F%E5%B7%9E%E4%B8%80%E6%97%A5%E6%B8%B8/</url>
    <content><![CDATA[<h4 id="洞泾-上海松江站-苏州站-720-820-02车"><a class="anchor" href="#洞泾-上海松江站-苏州站-720-820-02车">#</a> 洞泾  - 上海松江站 - 苏州站 （7.20-8.20   02 车）</h4>
<p>21 分钟（5.1 公里）-   8.50 左右</p>
<p><img data-src="https://s3.bmp.ovh/imgs/2024/06/08/32faa5d56b5ec6fc.png" alt="" /></p>
<h4 id="平江路"><a class="anchor" href="#平江路">#</a> 平江路</h4>
<p>吃早点，逛一逛   （1.5h  -  9.30 左右）</p>
<p><img data-src="https://s3.bmp.ovh/imgs/2024/06/08/546339c0896af6e9.png" alt="" /></p>
<p>从南 - &gt; 北</p>
<h5 id="苏香记"><a class="anchor" href="#苏香记">#</a> 苏香记</h5>
<h5 id="梅月轩"><a class="anchor" href="#梅月轩">#</a> 梅月轩</h5>
<h5 id="苏州打卡墙"><a class="anchor" href="#苏州打卡墙">#</a> 苏州打卡墙</h5>
<h5 id="桃花源记"><a class="anchor" href="#桃花源记">#</a> 桃花源记</h5>
<h5 id="通利桥"><a class="anchor" href="#通利桥">#</a> 通利桥</h5>
<h5 id="胡厢使桥"><a class="anchor" href="#胡厢使桥">#</a> 胡厢使桥</h5>
<h5 id="猫咖狗咖"><a class="anchor" href="#猫咖狗咖">#</a> 猫咖狗咖</h5>
<h4 id="西园寺"><a class="anchor" href="#西园寺">#</a> 西园寺</h4>
<p>交通：最好打车</p>
<p>素面</p>
<h4 id="虎丘"><a class="anchor" href="#虎丘">#</a> 虎丘</h4>
<h4 id="东方之门"><a class="anchor" href="#东方之门">#</a> 东方之门</h4>
<h4 id="七里山塘景区-夜景"><a class="anchor" href="#七里山塘景区-夜景">#</a> 七里山塘景区 夜景</h4>
<h5 id="蟹皇捞-江南蟹黄面"><a class="anchor" href="#蟹皇捞-江南蟹黄面">#</a> 蟹皇捞・江南蟹黄面</h5>
<h4 id="苏州站-上海站-地铁-2115-2222"><a class="anchor" href="#苏州站-上海站-地铁-2115-2222">#</a> 苏州站 - 上海站 - 地铁  （21.15-22.22）</h4>
]]></content>
      <tags>
        <tag>旅游</tag>
      </tags>
  </entry>
  <entry>
    <title>开发日志</title>
    <url>/2024/06/13/%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<h2 id="备份部分代码"><a class="anchor" href="#备份部分代码">#</a> 备份部分代码</h2>
<p><code>MainActivity.java</code>  实用源生安卓来处理模糊，但是还是慢</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.li.ying;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> android.graphics.Bitmap;  </span><br><span class="line"><span class="keyword">import</span> android.graphics.BitmapFactory;  </span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;  </span><br><span class="line"><span class="keyword">import</span> androidx.annotation.NonNull;  </span><br><span class="line"><span class="keyword">import</span> androidx.annotation.Nullable;  </span><br><span class="line"><span class="keyword">import</span> io.flutter.embedding.android.FlutterActivity;  </span><br><span class="line"><span class="keyword">import</span> io.flutter.embedding.engine.FlutterEngine;  </span><br><span class="line"><span class="keyword">import</span> io.flutter.plugin.common.MethodCall;  </span><br><span class="line"><span class="keyword">import</span> io.flutter.plugin.common.MethodChannel;  </span><br><span class="line"><span class="keyword">import</span> android.renderscript.*;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.File;  </span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">FlutterActivity</span> &#123;  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CHANNEL</span> <span class="operator">=</span> <span class="string">&quot;image_processing&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span>  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureFlutterEngine</span><span class="params">(<span class="meta">@NonNull</span> FlutterEngine flutterEngine)</span> &#123;  </span><br><span class="line">    <span class="built_in">super</span>.configureFlutterEngine(flutterEngine);  </span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MethodChannel</span>(flutterEngine.getDartExecutor().getBinaryMessenger(), CHANNEL)  </span><br><span class="line">      .setMethodCallHandler(  </span><br><span class="line">        (call, result) -&gt; &#123;  </span><br><span class="line">          <span class="keyword">if</span> (call.method.equals(<span class="string">&quot;blurImage&quot;</span>)) &#123;  </span><br><span class="line">            <span class="type">String</span> <span class="variable">imagePath</span> <span class="operator">=</span> call.argument(<span class="string">&quot;imagePath&quot;</span>);  </span><br><span class="line">            <span class="type">int</span> <span class="variable">radius</span> <span class="operator">=</span> call.argument(<span class="string">&quot;radius&quot;</span>);  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">              result.success(blurImage(imagePath, radius));  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);  </span><br><span class="line">            &#125;  </span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            result.notImplemented();  </span><br><span class="line">          &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">      );  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> String <span class="title function_">blurImage</span><span class="params">(String imagePath, <span class="type">int</span> radius)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">    <span class="type">Bitmap</span> <span class="variable">bitmap</span> <span class="operator">=</span> BitmapFactory.decodeFile(imagePath);  </span><br><span class="line">    <span class="type">RenderScript</span> <span class="variable">rs</span> <span class="operator">=</span> RenderScript.create(<span class="built_in">this</span>);  </span><br><span class="line">    <span class="type">Allocation</span> <span class="variable">input</span> <span class="operator">=</span> Allocation.createFromBitmap(rs, bitmap);  </span><br><span class="line">    <span class="type">Allocation</span> <span class="variable">output</span> <span class="operator">=</span> Allocation.createTyped(rs, input.getType());  </span><br><span class="line">    <span class="type">ScriptIntrinsicBlur</span> <span class="variable">script</span> <span class="operator">=</span> ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 多次应用高斯模糊  </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;  </span><br><span class="line">      script.setRadius(radius);  </span><br><span class="line">      script.setInput(input);  </span><br><span class="line">      script.forEach(output);  </span><br><span class="line">      output.copyTo(bitmap);  </span><br><span class="line">      input.copyFrom(bitmap);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    rs.destroy();  </span><br><span class="line">  </span><br><span class="line">    <span class="type">File</span> <span class="variable">outputDir</span> <span class="operator">=</span> getCacheDir();  </span><br><span class="line">    <span class="type">File</span> <span class="variable">outputFile</span> <span class="operator">=</span> File.createTempFile(<span class="string">&quot;blurred_&quot;</span>, <span class="string">&quot;.png&quot;</span>, outputDir);  </span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(outputFile);  </span><br><span class="line">    bitmap.compress(Bitmap.CompressFormat.PNG, <span class="number">100</span>, out);  </span><br><span class="line">    out.close();  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> outputFile.getAbsolutePath();  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>main.dart</code>  调用源生安卓</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// static const platform = MethodChannel(&#x27;image_processing&#x27;);  </span><br><span class="line">//  </span><br><span class="line">// 这种方法 调用了安卓原生代码 速度更快 但是快不过缩小图片模糊  </span><br><span class="line">// 并且radius最大25 模糊效果不尽人意  </span><br><span class="line">// File? _blurredImage;  </span><br><span class="line">//  </span><br><span class="line">// Future&lt;void&gt; _blurImage(String imagePath) async &#123;  </span><br><span class="line">//   try &#123;  </span><br><span class="line">//     final String blurredImagePath = await platform.invokeMethod(  </span><br><span class="line">//       &#x27;blurImage&#x27;,  </span><br><span class="line">//       &#123;&#x27;imagePath&#x27;: imagePath, &#x27;radius&#x27;: 25&#125;,  </span><br><span class="line">//     );  </span><br><span class="line">//     setState(() &#123;  </span><br><span class="line">//       _blurredImage = File(blurredImagePath);  </span><br><span class="line">//     &#125;);  </span><br><span class="line">//   &#125; on PlatformException catch (e) &#123;  </span><br><span class="line">//     print(&quot;Failed to blur image: &#x27;$&#123;e.message&#125;&#x27;.&quot;);  </span><br><span class="line">//   &#125;  </span><br><span class="line">// &#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>Arch Linux安装</title>
    <url>/2024/07/03/Arch%20Linux/</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAzODM0NjcvYXJ0aWNsZS9kZXRhaWxzLzEzNTg3NjY4Mg==">很详细的链接</span></p>
<h2 id="制作u盘"><a class="anchor" href="#制作u盘">#</a> 制作 U 盘</h2>
<p>使用 <span class="exturl" data-url="aHR0cHM6Ly9ydWZ1cy5pZS8=">Rufus</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BiYXRhcmQvcnVmdXMvcmVsZWFzZXMvZG93bmxvYWQvdjQuNS9ydWZ1cy00LjUuZXhl">下载链接 v4.5 </span></p>
<h2 id="使用-archinstall-安装"><a class="anchor" href="#使用-archinstall-安装">#</a> 使用 archInstall 安装</h2>
<p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">archinstall</span><br><span class="line"><span class="comment"># 设置一下即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 必选：设置硬盘、root密码   网络！！  选第二个</span></span><br><span class="line"><span class="comment"># 可选：时区</span></span><br></pre></td></tr></table></figure></p>
<p><img data-src="https://s3.bmp.ovh/imgs/2024/07/04/977f126f1c2f2a59.png" alt="" /></p>
<h2 id="启用ssh"><a class="anchor" href="#启用ssh">#</a> 启用 SSH</h2>
<p>如果你安装完系统后无法通过 SSH 远程登录，可能是由于 SSH 服务未安装、未启动或防火墙配置问题。以下是一些可能的解决方法：</p>
<h3 id="1-检查并安装-openssh"><a class="anchor" href="#1-检查并安装-openssh">#</a> 1. 检查并安装 OpenSSH</h3>
<p>确保 OpenSSH 已安装：</p>
<p>安装  <code>sshd</code></p>
<p><code>sudo pacman -S openssh</code></p>
<h3 id="2-启动并启用-ssh-服务"><a class="anchor" href="#2-启动并启用-ssh-服务">#</a> 2. 启动并启用 SSH 服务</h3>
<p>启动 SSH 服务：</p>
<p><code>sudo systemctl start sshd</code></p>
<p>启用 SSH 服务，使其在系统启动时自动运行：</p>
<p><code>sudo systemctl enable sshd</code></p>
<h3 id="3-检查防火墙设置"><a class="anchor" href="#3-检查防火墙设置">#</a> 3. 检查防火墙设置</h3>
<p>如果你启用了防火墙，需要确保允许 SSH 端口（默认端口 22）的连接。例如，如果你使用  <code>ufw</code>  作为防火墙，可以使用以下命令：</p>
<p><code>sudo ufw allow ssh</code></p>
<p>如果使用  <code>iptables</code> ，可以使用以下命令：</p>
<p><code>sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT</code></p>
<h3 id="4-检查-ssh-配置文件"><a class="anchor" href="#4-检查-ssh-配置文件">#</a> 4. 检查 SSH 配置文件</h3>
<p>检查 SSH 配置文件  <code>/etc/ssh/sshd_config</code>  是否正确配置。例如，确保以下行没有被注释掉（去掉前面的  <code>#</code> ）：</p>
<p><code>Port 22 PermitRootLogin yes  # 如果你需要以 root 登录 PasswordAuthentication yes  # 如果你使用密码登录</code></p>
<p>编辑完配置文件后，重新启动 SSH 服务以应用更改：</p>
<p><code>sudo systemctl restart sshd</code></p>
<h3 id="5-检查网络连接"><a class="anchor" href="#5-检查网络连接">#</a> 5. 检查网络连接</h3>
<p>确保你的计算机在网络中是可访问的，可以通过以下命令查看 IP 地址：</p>
<p><code>ip addr show</code></p>
<p>确保你使用的是正确的 IP 地址和端口连接。</p>
<h3 id="6-检查-ssh-客户端输出"><a class="anchor" href="#6-检查-ssh-客户端输出">#</a> 6. 检查 SSH 客户端输出</h3>
<p>如果仍然无法连接，使用 SSH 客户端连接时查看详细输出，以获取更多调试信息。例如，在 Linux 或 macOS 上，可以使用以下命令：</p>
<p><code>ssh -v user@hostname</code></p>
<p>这个命令会显示详细的连接过程，有助于找出问题所在。</p>
<h3 id="7-确保-ssh-服务在运行"><a class="anchor" href="#7-确保-ssh-服务在运行">#</a> 7. 确保 SSH 服务在运行</h3>
<p>使用以下命令检查 SSH 服务状态：</p>
<p><code>sudo systemctl status sshd</code></p>
<p>确保显示的状态为  <code>active (running)</code> 。如果不是，请检查日志文件以获取更多信息：</p>
<p><code>sudo journalctl -u sshd</code></p>
<h3 id="8-确保主机名解析正常"><a class="anchor" href="#8-确保主机名解析正常">#</a> 8. 确保主机名解析正常</h3>
<p>确保你连接的主机名可以正确解析。如果你使用主机名连接，尝试改用 IP 地址连接，以排除 DNS 解析问题。</p>
<h3 id="9-确保网络没有阻塞-ssh-端口"><a class="anchor" href="#9-确保网络没有阻塞-ssh-端口">#</a> 9. 确保网络没有阻塞 SSH 端口</h3>
<p>某些网络环境（如企业网络或公共 WiFi）可能会阻止 SSH 端口的流量。尝试在不同的网络环境中进行连接测试。</p>
<h3 id="10-检查用户权限"><a class="anchor" href="#10-检查用户权限">#</a> 10. 检查用户权限</h3>
<p>确保你使用的用户在目标机器上存在，并且具有适当的权限。你可以使用以下命令查看当前用户列表：</p>
<p><code>cat /etc/passwd</code></p>
<p>确保用户存在并且可以登录。</p>
<h2 id="启用并启动显示管理器"><a class="anchor" href="#启用并启动显示管理器">#</a> 启用并启动显示管理器</h2>
<p>假设你选择了 GDM 作为显示管理器：</p>
<p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> gdm</span><br><span class="line">sudo systemctl start gdm</span><br></pre></td></tr></table></figure></p>
<p>如果选择了 SDDM：</p>
<p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> sddm</span><br><span class="line">sudo systemctl start sddm</span><br></pre></td></tr></table></figure></p>
<p>安装缺失的软件包:</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo pacman -S gnome  # 安装 GNOME</span><br><span class="line">sudo pacman -S plasma  # 安装 KDE Plasma</span><br><span class="line">sudo pacman -S gdm  # 安装 GDM</span><br><span class="line">sudo pacman -S sddm  # 安装 SDDM</span><br></pre></td></tr></table></figure></p>
<p>到这里 系统就算安装完成了</p>
<h2 id="安装hyprland-报错中"><a class="anchor" href="#安装hyprland-报错中">#</a> 安装 Hyprland   报错中</h2>
<p>需要创建一个非 root 用户</p>
<p>给 sudo 权限</p>
<p>需要安装编辑器  vim 或者 nano</p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/2024/07/09/NO%20Name/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/09/09/%E6%9C%AA%E5%91%BD%E5%90%8D/</url>
    <content><![CDATA[<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 联系人 -需解密</span><br><span class="line">select</span><br><span class="line">  ses.supplier_num &#x27;本地供应商编码&#x27;,</span><br><span class="line">  sesc.name &#x27;名称&#x27;,</span><br><span class="line">  hlv.meaning &#x27;证件类型&#x27;,</span><br><span class="line">  sesc.id_number &#x27;证件号码&#x27;,</span><br><span class="line">  hlv2.meaning &#x27;联系人类型&#x27;,</span><br><span class="line">  sesc.position &#x27;职位&#x27;,</span><br><span class="line">  sesc.mobilephone &#x27;电话&#x27;,</span><br><span class="line">  sesc.mail &#x27;邮箱&#x27;,</span><br><span class="line">  if(sesc.default_flag=1,&#x27;是&#x27;,&#x27;否&#x27;) &#x27;默认联系人&#x27;</span><br><span class="line">from</span><br><span class="line">  sslm_ext_supplier_contact sesc</span><br><span class="line">  left join sslm_external_supplier ses on sesc.supplier_id = ses.supplier_id</span><br><span class="line">  left join hpfm_lov_value hlv on hlv.value = sesc.id_type and hlv.tenant_id = 0 and hlv.lov_code = &#x27;SPFM.ID_TYPE&#x27;</span><br><span class="line">  left join hpfm_lov_value hlv2 on hlv2.value = sesc.contact_type and hlv2.tenant_id = 0 and hlv2.lov_code = &#x27;SSLM.CONTACT_TYPE&#x27;</span><br><span class="line">where</span><br><span class="line">  sesc.tenant_id = 61618</span><br><span class="line">  order by sesc.supplier_id</span><br></pre></td></tr></table></figure></p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 地址</span><br><span class="line">select</span><br><span class="line">  ses.supplier_num &#x27;本地供应商编码&#x27;,</span><br><span class="line">  t.country_name &#x27;国家&#x27;,</span><br><span class="line">  t.region_name &#x27;地区&#x27;,</span><br><span class="line">  t.city_name &#x27;城市&#x27;,</span><br><span class="line">  t.zip_code &#x27;邮政编码&#x27;</span><br><span class="line">from</span><br><span class="line">  sslm_ext_supplier_address t</span><br><span class="line">  left join sslm_external_supplier ses on t.supplier_id = ses.supplier_id</span><br><span class="line">where</span><br><span class="line">  t.tenant_id = 61618</span><br><span class="line">order by</span><br><span class="line">  t.supplier_id</span><br></pre></td></tr></table></figure></p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 银行账户 -需解密</span><br><span class="line">SELECT</span><br><span class="line">  ses.supplier_num,</span><br><span class="line">  hc.country_name,</span><br><span class="line">  sb.bank_code,</span><br><span class="line">  sb.bank_name,</span><br><span class="line">  t.bank_firm &#x27;联行行号&#x27;,</span><br><span class="line">  t.deposit_bank &#x27;开户行名称&#x27;,</span><br><span class="line">  t.bank_account_name &#x27;账户名称&#x27;,</span><br><span class="line">  t.bank_account_num &#x27;银行账户&#x27;,</span><br><span class="line">  if(t.main_account_flag=1,&#x27;是&#x27;,&#x27;否&#x27;) &#x27;主账号&#x27;,</span><br><span class="line">  if(t.enabled_flag=1,&#x27;是&#x27;,&#x27;否&#x27;) &#x27;启用&#x27;</span><br><span class="line">FROM</span><br><span class="line">  sslm_ext_sup_bank_acct t</span><br><span class="line">  LEFT JOIN smdm_bank sb ON t.bank_id = sb.bank_id</span><br><span class="line">  LEFT JOIN hpfm_country hc ON hc.country_id = t.country_id</span><br><span class="line">  left join sslm_external_supplier ses on t.supplier_id = ses.supplier_id</span><br><span class="line">where</span><br><span class="line">  t.tenant_id = 61618 </span><br></pre></td></tr></table></figure></p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 地点层</span><br><span class="line">SELECT</span><br><span class="line">	ses.supplier_num &#x27;本地供应商编码&#x27;,</span><br><span class="line">	t.supplier_site_code &#x27;地点编码&#x27;,</span><br><span class="line">	t.supplier_site_name &#x27;地点名称&#x27;,</span><br><span class="line">	hou.ou_code &#x27;业务实体编码&#x27;,</span><br><span class="line">	hou.ou_name &#x27;业务实体名称&#x27;,</span><br><span class="line">	if(t.enabled_flag=1,&#x27;是&#x27;,&#x27;否&#x27;) &#x27;启用&#x27;</span><br><span class="line">FROM</span><br><span class="line">	sslm_ext_supplier_site t</span><br><span class="line">	LEFT JOIN sslm_external_supplier ses ON t.supplier_id = ses.supplier_id</span><br><span class="line">	LEFT JOIN hpfm_operation_unit hou ON hou.ou_id = t.ou_id </span><br><span class="line">	AND hou.tenant_id = t.tenant_id </span><br><span class="line">WHERE</span><br><span class="line">	t.tenant_id = 61618</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
</search>
